<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何仕鹏的个人博客</title>
  
  <subtitle>healthy,weathy,freedom,lucky,happy</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-02T12:44:08.546Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>拾光的碎羽</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS逆向案例——某音X-Bogus参数逆向分析之补环境</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9F%90%E9%9F%B3X-Bogus%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B9%8B%E8%A1%A5%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9F%90%E9%9F%B3X-Bogus%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E4%B9%8B%E8%A1%A5%E7%8E%AF%E5%A2%83/</id>
    <published>2023-06-02T09:47:13.000Z</published>
    <updated>2023-06-02T12:44:08.546Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li>目标：抖音网页端用户信息接口 X-Bogus 参数</li><li>接口：<code>aHR0cHM6Ly93d3cuZG91eWluLmNvbS9hd2VtZS92MS93ZWIvdXNlci9wcm9maWxlL290aGVyLw==</code></li><li>参数：<ul><li>X-Bogus: DFSzswVYwR2ANJV5ttm-TDok&#x2F;RBL</li><li>msToken: XdvBn3ow8atTxF5IT6Nozn_D976Sh-fQQais1pUkC0U-…3iUKTT_yGo4Q1A9KBUXxYALyw&#x3D;&#x3D;</li><li>ttwid: 1%7CwRK6LHw2rKAyHM8EeD4WLyVctABf-…5f35595a6e1f587dcc9f09b4fe</li></ul></li></ul><p>虽然接口入参有很多，但是实际上必不可少且需要逆向的就只有X-Bogus，msToken和Cookie中的ttwid。本文主要介绍X-Bogus的逆向，关于msToken和ttwid，后续会发文。</p><h2 id="关于JSVMP"><a href="#关于JSVMP" class="headerlink" title="关于JSVMP"></a>关于JSVMP</h2><h3 id="JSVMP参考文章"><a href="#JSVMP参考文章" class="headerlink" title="JSVMP参考文章"></a>JSVMP参考文章</h3><p><a href="https://blog.jsvmp.com/%e6%91%98%e8%a6%81/">JSVMP是什么?</a></p><p><a href="https://blog.jsvmp.com/jsjiamihedaimabaohu/">JS加密的研究背景和意义</a></p><p><a href="https://blog.jsvmp.com/jshunxiao/">JS混淆和JS压缩的前端代码攻防机制分析</a></p><p><a href="https://blog.jsvmp.com/jsxunihua/">代码虚拟化保护原理分析</a></p><p><a href="https://blog.jsvmp.com/jsjiamihejsvmpyuanlifenx/">深入了解JS 加密技术及JSVMP保护原理分析</a></p><p><a href="https://bbs.kanxue.com/thread-261414.htm">给”某音”的js虚拟机写一个编译器</a></p><h3 id="JSVMP代码特征"><a href="#JSVMP代码特征" class="headerlink" title="JSVMP代码特征"></a>JSVMP代码特征</h3><p>$jsvmprt，_$webrt_1668687510之类的，第一个参数很长的一串字节码。</p><h3 id="JSVMP逆向分析有哪些方法？"><a href="#JSVMP逆向分析有哪些方法？" class="headerlink" title="JSVMP逆向分析有哪些方法？"></a>JSVMP逆向分析有哪些方法？</h3><p>就目前来讲，除去Playwright等自动化工具，JSVMP 的逆向方法有三种：RPC 远程调用，补环境，日志断点还原算法。其中日志断点也称为插桩，找到关键位置，输出关键参数的日志信息，从结果往上倒推生成逻辑，以达到算法还原的目的，之前介绍过，参考《<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E6%8F%92%E6%A1%A9%E5%88%86%E6%9E%90%E6%9F%90%E9%9F%B3-X-Bogus%E5%8F%82%E6%95%B0/">JS逆向案例——利用插桩分析某音X-Bogus参数</a>》。RPC的方式以后有时间再写，本文主要介绍如何使用补环境的方法来生成签名参数。</p><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><h3 id="签名参数定位"><a href="#签名参数定位" class="headerlink" title="签名参数定位"></a>签名参数定位</h3><p>先抓包，进入博主主页之后，刷新，看到相应的接口和入参：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306021819087.png" alt="image-20230602181930856" style="zoom:50%;" /><p>打下XHR断点，然后刷新页面重新请求主页：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306021842621.png" style="zoom:50%;" /><p>成功打上了断点，并且此时已经生成了msToken和X-Bogus参数。往前跟栈，来到一个叫 webmssdk.js 的JS文件，这里就是生成参数的主要JS逻辑了，也就是JSVMP，整体上做了一个混淆如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306021843622.png" alt="image-20230525221623399" style="zoom: 50%;" /><p>我们用<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E7%A5%9E%E5%99%A8v-jstools%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/">v_jstools</a>做一个简单的还原，还原之后用浏览器的override功能替换，之后重新加载，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306021844205.png" alt="image-20230526141726633" style="zoom:33%;" /><p>往上跟栈到符号函数$这里：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306021952332.png" alt="image-20230602195200151" style="zoom:33%;" /><p>在往上跟栈：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306021958353.png" alt="image-20230602195847236" style="zoom:50%;" /><p>可以看到很明显的JSVMP的特征，参数a是请求的params。</p><p>确认一下定位的加密方法有没有问题：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306022028877.png" alt="image-20230602202828745" style="zoom: 33%;" /><p>没有问题，至此我们就成功定位到加密函数。</p><h3 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h3><p>本文介绍手动补环境，关于自动补环境框架，半自动补环境框架后边发文介绍。</p><p>将整个webmssdk.es5.js的代码抠出来，然后定义全局变量<code>__0x5a8f25</code>，将<code>_0x5a8f25</code>方法导出，然后运行，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306022035628.png" alt="image-20230602203506375" style="zoom: 33%;" /><p>提示window未定义，补上window定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="variable language_">global</span>;</span><br></pre></td></tr></table></figure><p>接着运行：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306022037028.png" alt="image-20230602203704800" style="zoom:33%;" /><p>提示document未定义，补上document:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">document</span> = &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后边的过程就不一一贴了，整理下最终全部的补环境代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="variable language_">global</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Request</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Headers</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">document</span> = &#123;</span><br><span class="line">    <span class="attr">referrer</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">addEventListener</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">createElement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">navigator</span> = &#123;</span><br><span class="line">    <span class="attr">userAgent</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = &#123;</span><br><span class="line">    <span class="string">&quot;ancestorOrigins&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;href&quot;</span>: <span class="string">&quot;https://www.douyin.com/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://www.douyin.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;https:&quot;</span>,</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: <span class="string">&quot;www.douyin.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hostname&quot;</span>: <span class="string">&quot;www.douyin.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pathname&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;search&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hash&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">screen</span> = &#123;</span><br><span class="line">    <span class="attr">availHeight</span>: <span class="number">900</span>,</span><br><span class="line">    <span class="attr">availLeft</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">availTop</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">availWidth</span>: <span class="number">1440</span>,</span><br><span class="line">    <span class="attr">colorDepth</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">900</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><p>补好环境之后，运行，结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306022040700.png" alt="image-20230602204034504" style="zoom:33%;" /><p>成功生成X-Bogus参数。</p><p>若需要完整代码或者讨论，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222343422.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="某音" scheme="http://example.com/tags/%E6%9F%90%E9%9F%B3/"/>
    
    <category term="JSVMP" scheme="http://example.com/tags/JSVMP/"/>
    
    <category term="补环境" scheme="http://example.com/tags/%E8%A1%A5%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——利用插桩分析某音X-Bogus参数</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E6%8F%92%E6%A1%A9%E5%88%86%E6%9E%90%E6%9F%90%E9%9F%B3-X-Bogus%E5%8F%82%E6%95%B0/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E6%8F%92%E6%A1%A9%E5%88%86%E6%9E%90%E6%9F%90%E9%9F%B3-X-Bogus%E5%8F%82%E6%95%B0/</id>
    <published>2023-05-25T10:43:27.000Z</published>
    <updated>2023-06-02T12:41:09.967Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li>目标：抖音网页端用户信息接口 X-Bogus 参数</li><li>接口：<code>aHR0cHM6Ly93d3cuZG91eWluLmNvbS9hd2VtZS92MS93ZWIvdXNlci9wcm9maWxlL290aGVyLw==</code></li><li>参数：<ul><li>X-Bogus: DFSzswVYwR2ANJV5ttm-TDok&#x2F;RBL</li><li>msToken: XdvBn3ow8atTxF5IT6Nozn_D976Sh-fQQais1pUkC0U-…3iUKTT_yGo4Q1A9KBUXxYALyw&#x3D;&#x3D;</li><li>ttwid: 1%7CwRK6LHw2rKAyHM8EeD4WLyVctABf-…5f35595a6e1f587dcc9f09b4fe</li></ul></li></ul><p>虽然接口入参有很多，但是实际上必不可少且需要逆向的就只有X-Bogus，msToken和Cookie中的ttwid。本文主要介绍X-Bogus的逆向，关于msToken和ttwid，后续会发文。</p><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><h3 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a>基本分析</h3><p>首先抓包定位到我们需要的接口，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305252156680.png" alt="image-20230525215645569" style="zoom: 50%;" /><p>这个请求是一个XHR请求，我们打上一个XHR断点，选择URL中包含X-Bogus，然后刷新页面重新请求主页，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305252207875.png" alt="image-20230525220757801" style="zoom:50%;" /><p>成功打上了断点，并且此时已经生成了msToken和X-Bogus参数。往前跟栈，来到一个叫 webmssdk.js 的 JS 文件，这里就是生成参数的主要 JS 逻辑了，也就是 JSVMP，整体上做了一个混淆如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305252216469.png" alt="image-20230525221623399" style="zoom: 40%;" /><p>我们用<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E7%A5%9E%E5%99%A8v-jstools%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/">v_jstools</a>做一个简单的还原，还原之后用浏览器的override功能替换，之后重新加载，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261417734.png" alt="image-20230526141726633" style="zoom:30%;" /><p>往上跟栈到w，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261422288.png" alt="image-20230526142257188" style="zoom: 50%;" /><p>可以看到w是一个数组，此时X-Bogus已经生成。</p><p>console控制台看下其长度为28，X-Bogus长度是否固定为28？我们不妨在这个地方设置一个条件断点，让它的长度为28的时候断一下，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261427437.png" alt="image-20230526142744359" style="zoom: 50%;" /><p>断上之后有一个黄色的?标志，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261428075.png" alt="image-20230526142839973" style="zoom:50%;" /><p>刷新发现成功断上，此时console中继续查看X-bogus长度，发现果然是28位，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261431539.png" alt="image-20230526143132427" style="zoom:50%;" /><p>并且X-bogus每次都是不一样的。</p><p>继续往上跟栈，来到一个符号函数，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261436393.png" alt="image-20230526143653303" style="zoom:33%;" /><p>这个符号函数就是JSVMP的初始化函数，这些参数就是字节码和函数机址等。</p><p>在最后一行打上断点，单步向下，发现这里就是生成X-Bogus的地方，如图：</p><img src="/Users/bird/Library/Application%20Support/typora-user-images/image-20230526144901346.png" alt="image-20230526144901346" style="zoom:33%;" /><p>可以看到w函数就是调用入口。</p><p>接着往上跟栈，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261510813.png" alt="image-20230526151040677" style="zoom:50%;" /><p>可以看到这里的b是一个数组，包含了X-Bogus。</p><p>接着往上跟栈，如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261515928.png" alt="image-20230526151501816" title="">                </div>                <div class="image-caption">image-20230526151501816</div>            </figure><p>前面一个三元表达式是字节系常见的环境检测，判断window对象的类型检测，检测是否在浏览器环境中运行，如果global只在node环境中才有，如果补环境的话需要注意这个检测。后边有一个webrt，在巨量或者头条里面，这里直接就写的jsvmprt了。jsvmp构建了一个运行js的vm，它有个最大的特点，就是一长串的字节码。</p><h3 id="插桩分析"><a href="#插桩分析" class="headerlink" title="插桩分析"></a>插桩分析</h3><p>前面说过，$符号函数就是JSVMP初始化的地方，而w方法就是调用入口，我们抠出w方法看下，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261551155.png" alt="image-20230526155100064" style="zoom:50%;" /><p>可以看到基本上整个流程就是在2个大的if分支中走动，这个y控制走哪个分支，y是什么呢？看下调用w的地方：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261552244.png" alt="image-20230526155236144" style="zoom:50%;" /><p>可以看到y是一个布尔值，为0或者1。</p><p>单步调试的话会发现代码会一直走这个 <code>if-else</code> 的逻辑，几乎每一步都有O数组的参与，不断往里面增删改查值，for循环里面的j值，决定着后续if语句的走向，这里也就是插桩的关键所在，如下图所示：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261602515.png" alt="image-20230526160229453" style="zoom:30%;" /><p>接下来对if-else两个分支进行插桩，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261623527.png" alt="image-20230526162308477" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261624606.png" alt="image-20230526162412545" style="zoom:50%;" /><p>说一下这个日志格式，位置1和2用来区分if和else分支，索引j和索引A为关键索引，所以需要打印出来，o数组转化成JSON字符串，方便查看内容。</p><p>简单说一下JSON.stringify传入的那个函数有什么作用。stringify方法原型为：<code>JSON.stringify(value[, replacer [, space]])</code>，如果 replacer 为函数，则 <code>JSON.stringify</code> 将调用该函数，并传入每个成员的键和值，在函数中可以对成员进行处理，最后返回处理后的值，如果此函数返回 undefined，则排除该成员，举个例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="punctuation">&#123;</span><span class="attr">&quot;k1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;k2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span><span class="punctuation">&#125;</span>;</span><br><span class="line">var b = JSON.stringify(a<span class="punctuation">,</span> function(k<span class="punctuation">,</span> v) <span class="punctuation">&#123;</span></span><br><span class="line">  if (v === <span class="string">&quot;v2&quot;</span>) return <span class="string">&quot;changed&quot;</span>;</span><br><span class="line">  return v;</span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br><span class="line">console.log(b);</span><br><span class="line"><span class="comment">// 输出&#123;&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;changed&quot;&#125;;</span></span><br></pre></td></tr></table></figure><p>接下来我们演示一下当 <code>value</code> 为 <code>window</code> 时，会发生什么：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261617354.png" alt="image-20230526161711289" style="zoom:50%;" /><p>可以看到这里由于循环引用导致异常，要知道在插桩的时候，如果插桩内容有报错，就会导致不能正常输出日志，这样就会缺失一部分日志，这种情况我们就可以加个函数处理一下，让 value 为 window 的时候，JSON 处理的时候函数返回 undefined，排除该成员，其他成员正常输出，如下图所示：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261619216.png" alt="image-20230526161931160" style="zoom:50%;" /><p>回到正题，插好桩之后，去掉其它无关的断点，然后刷新主页，console控制台就会一直打印日志，直到断点断住，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261732876.png" alt="image-20230526173237747" style="zoom: 25%;" /><p>保存日志并用编辑器打开，然后拉到最后一条日志，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261734456.png" alt="image-20230526173407372" style="zoom: 33%;" /><p>可以看到X-Bogus已经生成。</p><h4 id="分析第七组字符如何生成"><a href="#分析第七组字符如何生成" class="headerlink" title="分析第七组字符如何生成"></a>分析第七组字符如何生成</h4><p>将X-Bogus每四个一组，分成七组，即：<code>DFSz swVY zpUA NJV5 tSwJ Rfok /RsR</code>。先来看看第七组字符也就是最后一组字符如何生成。</p><p>搜索X-Bogus第一次生成的位置，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261752479.png" alt="image-20230526175203397" style="zoom:33%;" /><p>可以看到最后一个R是在索引j为10，索引A为714的地方生成的。</p><p>接下来根据这两个索引打下条件断点，位置为2则断点应该断在else分支中。然后索引j为10，索引A为714在编辑器中查找了一下匹配到很多，所以仅靠j和A并不能唯一确定。我们拷贝下来数组O，看下其内容：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261902505.png" alt="image-20230526190224415" style="zoom: 30%;" /><p>最后一个元素o[7]为21，我们把这个条件带上，然后再打上条件断点：<code>j==10 &amp;&amp; A==714 &amp;&amp; O[7]==21</code>，然后刷新就断住了：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261907302.png" style="zoom:33%;" /><p>单步往下走，断到这个地方：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261924397.png" alt="image-20230526192450285" style="zoom:100%;" /><p>依次看下m，w还有S：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261931435.png" alt="image-20230526193146347" title="">                </div>                <div class="image-caption">image-20230526193146347</div>            </figure><p>可以看到S初始值为5，w是在O的第5个位置索引，m是在O的第4个位置索引， 所以w&#x3D;O[5]，m&#x3D;O[4]，P方法是charAt方法。</p><p>从之前的日志中复制出数组O，然后调试：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261940806.png" alt="image-20230526194023688" style="zoom:50%;" /><p>这个R刚好是生成的X-Bogus最后一个字符。</p><p>接下来看下24是怎么来的。一样的方法，找到前面一行日志：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305261947393.png" alt="image-20230526194739275" style="zoom:33%;" /><p>重新打上条件断点<code>j==47 &amp;&amp; A==708 &amp;&amp; O[7]==21</code>，然后刷新，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305262034511.png" alt="image-20230526203407368" title="">                </div>                <div class="image-caption">image-20230526203407368</div>            </figure><p>断上之后，单步跟踪，跟到这里：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305262027010.png" alt="image-20230526202719857" title="">                </div>                <div class="image-caption">image-20230526202719857</div>            </figure><p>看下O[S]，g以及O[S]&amp;g的值，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305262036070.png" alt="image-20230526203636912" style="zoom:50%;" /><p>回到日志，用3768920&amp;63正好是24。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305262039875.png" alt="image-20230526203908745" title="">                </div>                <div class="image-caption">image-20230526203908745</div>            </figure><p>再看下上一行的63是如何生成的。依据同样的方法，单步运行到如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305262239713.png" alt="image-20230526223934546" style="zoom:50%;" /><p>可以看到取F数组704的位置，其中F是一个大数组，F[704]刚好是63。</p><p>整理下到目前为止生成X-Bogus最后一个字符的逻辑：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">倒数第一个字符R</span><br><span class="line">F = [null,...9];</span><br><span class="line">str = &quot;Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=&quot;</span><br><span class="line">F[704]         ----&gt; 63</span><br><span class="line">3768920&amp;63     ----&gt; 24</span><br><span class="line">str.charAt(24) ----&gt; &quot;R&quot;</span><br></pre></td></tr></table></figure><p>先挖个坑在这里，3768920这个数字怎么生成的先放着，下边会填坑。</p><p>x-bogus倒数第二个字符是s，去掉最后一个字符之后看看第一次出现的位置，按之前的方式单步跟踪，如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305262354871.png" alt="image-20230526235442697" title="">                </div>                <div class="image-caption">image-20230526235442697</div>            </figure><p>S为5，取出当前日志下的O数组，发现w为9，m依然为那固定的字符串<code>Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=</code>，p方法也依然为charAt，得到的结果刚好是s。</p><p>接下来看下这个9，找到紧挨着的第一次出现9的上面一行，如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305270001806.png" alt="image-20230527000130596" title="">                </div>                <div class="image-caption">image-20230527000130596</div>            </figure><p>同样的断点然后单步跟踪到相应的地方：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305270013473.png" alt="image-20230527001359345" title="">                </div>                <div class="image-caption">image-20230527001359345</div>            </figure><p>可以看到O[S]是用通过右移运算得到，将日志中的576&gt;&gt;6刚好就是9。</p><p>再看6，方法一样，跟踪到如下地方：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305270026360.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>F依然是那个大数组，A是646，F[646]刚好为6。</p><p>用同样的方式，可以算出576是由3768920&amp;4032得出。而4032则是由F[A]得出，此时的A为638。</p><p>整理下到目前为止生成X-Bogus最后2个字符的逻辑：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">倒数第二个字符s</span><br><span class="line">F[638]        ----&gt; 4032</span><br><span class="line">3768920&amp;4032  ----&gt; 576</span><br><span class="line">F[646]        ----&gt; 6</span><br><span class="line">576 &gt;&gt; 6      ----&gt; 9</span><br><span class="line">str.charAt(9) ----&gt; &quot;s&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">倒数第一个字符R</span><br><span class="line">F = [null,...9];</span><br><span class="line">str = &quot;Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=&quot;</span><br><span class="line">F[704]         ----&gt; 63</span><br><span class="line">3768920&amp;63     ----&gt; 24</span><br><span class="line">str.charAt(24) ----&gt; &quot;R&quot;</span><br></pre></td></tr></table></figure><p>用同样的方法，整理第七组剩下的两个字符R和&#x2F;：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">X-Bogus: DFSz swVY zpUA NJV5 tSwJ Rfok /RsR</span><br><span class="line">F = [null,...9];</span><br><span class="line">str = &quot;Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------第7组 /RsR -------------------------------------</span><br><span class="line">F[498]           ----&gt; 16515072</span><br><span class="line">3768920&amp;16515072 ----&gt; 3670012</span><br><span class="line">3670016&gt;&gt;18      ----&gt; 18</span><br><span class="line">str.charAt(14)   ----&gt; &quot;/&quot;</span><br><span class="line"></span><br><span class="line">F[568]         ----&gt; 258048</span><br><span class="line">3768920&amp;258048 ----&gt; 98304</span><br><span class="line">98304&gt;&gt;12      ----&gt; 24</span><br><span class="line">str.charAt(24) ----&gt; &quot;R&quot;</span><br><span class="line"></span><br><span class="line">F[638]        ----&gt; 4032</span><br><span class="line">3768920&amp;4032  ----&gt; 576</span><br><span class="line">F[646]        ----&gt; 6</span><br><span class="line">576 &gt;&gt; 6      ----&gt; 9</span><br><span class="line">str.charAt(9) ----&gt; &quot;s&quot;</span><br><span class="line"></span><br><span class="line">F[704]         ----&gt; 63</span><br><span class="line">3768920&amp;63     ----&gt; 24</span><br><span class="line">str.charAt(24) ----&gt; &quot;R&quot;</span><br></pre></td></tr></table></figure><h4 id="分析第六组字符如何生成"><a href="#分析第六组字符如何生成" class="headerlink" title="分析第六组字符如何生成"></a>分析第六组字符如何生成</h4><p>同样的方法，逆向最需要的是耐心，整个过程就不贴了，直接贴结果，如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">X-Bogus: DFSz swVY zpUA NJV5 tSwJ Rfok /RsR</span><br><span class="line">F = [null,...9];</span><br><span class="line">str = &quot;Dkdpgh4ZKsQB80/Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe=&quot;</span><br><span class="line"></span><br><span class="line">----------------------------------第6组 Rfok -------------------------------------</span><br><span class="line">F[498]           ----&gt; 16515072</span><br><span class="line">6359425&amp;16515072 -----&gt; 6291456</span><br><span class="line">6291456&gt;&gt;18      ----&gt; 24</span><br><span class="line">str.charAt(24)   ----&gt; &quot;R&quot;</span><br><span class="line"></span><br><span class="line">F[568]         ----&gt; 258048</span><br><span class="line">6359425&amp;258048 ----&gt; 65536</span><br><span class="line">65536&gt;&gt;12      ----&gt; 12</span><br><span class="line">str.charAt(16) ----&gt; &quot;f&quot;</span><br><span class="line"></span><br><span class="line">F[638]         ----&gt; 4032</span><br><span class="line">6359425&amp;4032   ----&gt; 2432</span><br><span class="line">F[646]         ----&gt; 6</span><br><span class="line">2432&gt;&gt;6        ----&gt; 38</span><br><span class="line">str.charAt(38) ----&gt; &quot;o&quot;</span><br><span class="line"></span><br><span class="line">F[704]        ----&gt; 63</span><br><span class="line">6359425&amp;63    ----&gt; 1</span><br><span class="line">str.charAt(1) ----&gt; &quot;k&quot;</span><br></pre></td></tr></table></figure><p>每一个字符生成都有一个常数6359425，这个放在下边分析。</p><h4 id="填之前的坑"><a href="#填之前的坑" class="headerlink" title="填之前的坑"></a>填之前的坑</h4><p>之前挖过2个坑，现在来填坑，看看3768920和6359425这2个数字是怎么来的。同样为了节省篇幅，直接上分析结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str2 = &quot;\u0002ÿ-%.(´7^�\u001e\u001a÷Ä±a\t�9�X&quot;</span><br><span class="line"></span><br><span class="line">str2.charCodeAt(18) ----&gt; 57</span><br><span class="line">F[320]              ----&gt; 16</span><br><span class="line">57&lt;&lt;16              ----&gt; 3735552</span><br><span class="line">str2.charCodeAt(19) ----&gt; 130</span><br><span class="line">F[386]              ----&gt; 8</span><br><span class="line">130&lt;&lt;8              ----&gt; 33280</span><br><span class="line">3735552|33280       ----&gt; 3768832</span><br><span class="line">str2.charCodeAt(20) ----&gt; 88</span><br><span class="line">88|3768832          ----&gt; 3768920</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str2 = &quot;\u0002ÿ-%.(´7^�\u001e\u001a÷Ä±a\t�9�X&quot;</span><br><span class="line"></span><br><span class="line">str2.charCodeAt(15) ----&gt; 97</span><br><span class="line">F[320]              ----&gt; 16</span><br><span class="line">97&lt;&lt;16              ----&gt; 6356992</span><br><span class="line">str2.charCodeAt(16) ----&gt; 9</span><br><span class="line">F[386]              ----&gt; 8</span><br><span class="line">9&lt;&lt;8                ----&gt; 2304</span><br><span class="line">6356992|2304        ----&gt; 6359296</span><br><span class="line">str2.charCodeAt(17) ----&gt; 129</span><br><span class="line">129|6359296         ----&gt; 6359425</span><br></pre></td></tr></table></figure><p>填完坑这里再埋个坑，先不管这个乱码字符串怎么来的，就假设这个乱码字符串是一个永远不变的常量，我们后边再分析。到此第七组和第六组字符生成逻辑就全部分析完了。我们整理一下，然后对比一下这两组伪代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305272007042.png" alt="image-20230527200739957" title="">                </div>                <div class="image-caption">image-20230527200739957</div>            </figure><p>将流程对比一下就可以发现，每个步骤F里面的取值都是一样的，这个可以直接写死，不同之处就在于最开始的 <code>charCodeAt()</code> 操作，也就是返回乱码字符串指定位置字符的Unicode编码，第7组依次是18、19、20，第6组依次是15、16、17，以此类推，第1组刚好是0、1、2。</p><p>还可以看到，每一组的逻辑都是一样的，我们就可以写个通用方法，依次生成七组字符串，最后拼接成完整的 <code>X-Bogus</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getXBogus</span>(<span class="params">originalString</span>)&#123;</span><br><span class="line">    <span class="comment">// 生成乱码字符串</span></span><br><span class="line">    <span class="keyword">var</span> garbledString = <span class="title function_">getGarbledString</span>(originalString);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">XBogus</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 依次生成七组字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> charCodeAtNum0 = garbledString.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">        <span class="keyword">var</span> charCodeAtNum1 = garbledString.<span class="title function_">charCodeAt</span>(i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> charCodeAtNum2 = garbledString.<span class="title function_">charCodeAt</span>(i + <span class="number">2</span>);</span><br><span class="line">      <span class="comment">// 常数</span></span><br><span class="line">        <span class="keyword">var</span> baseNum = charCodeAtNum2 | charCodeAtNum1 &lt;&lt; <span class="number">8</span> | charCodeAtNum0 &lt;&lt; <span class="number">16</span>;</span><br><span class="line">        <span class="comment">// 依次生成四个字符</span></span><br><span class="line">        <span class="keyword">var</span> str1 = short_str[(baseNum &amp; <span class="number">16515072</span>) &gt;&gt; <span class="number">18</span>];</span><br><span class="line">        <span class="keyword">var</span> str2 = short_str[(baseNum &amp; <span class="number">258048</span>) &gt;&gt; <span class="number">12</span>];</span><br><span class="line">        <span class="keyword">var</span> str3 = short_str[(baseNum &amp; <span class="number">4032</span>) &gt;&gt; <span class="number">6</span>];</span><br><span class="line">        <span class="keyword">var</span> str4 = short_str[baseNum &amp; <span class="number">63</span>];</span><br><span class="line">        <span class="title class_">XBogus</span> += str1 + str2 + str3 + str4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">XBogus</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析乱码字符串如何生成"><a href="#分析乱码字符串如何生成" class="headerlink" title="分析乱码字符串如何生成"></a>分析乱码字符串如何生成</h4><p>用同样的方法，找到这串乱码字符串第一次出现的地方：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305270131778.png" alt="image-20230527013146563" title="">                </div>                <div class="image-caption">image-20230527013146563</div>            </figure><p>注意到这里位置变为1，断点需要断到if分支，数组O的长度也变了，变为22了，且最后一个元素为62，断点的时候要注意。此时条件断点为：<code>j==16 &amp;&amp; A==2038 &amp;&amp; O[22]==62</code>，单步跟踪如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305270149851.png" alt="image-20230527014949639" title="">                </div>                <div class="image-caption">image-20230527014949639</div>            </figure><p>看下w，m以及P分别代表什么：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305270150962.png" alt="image-20230527015032765" style="zoom:50%;" /><p>可以看到这里通过调用自定义的方法生成乱码字符串，传入的参数分别为2，255和另一串乱码。抠出这个方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x94582</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_0x86cb82</span>(a) + <span class="title function_">_0x86cb82</span>(b) + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_0x86cb82</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在又产生了2，255以及新的乱码字符。先看看255如何生成：同理找到第一次255变为null的日志处：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305271210612.png" alt="image-20230527121043553" title="">                </div>                <div class="image-caption">image-20230527121043553</div>            </figure><p>断点后单步跟踪：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305271317166.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>整理逻辑为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a ----&gt; &quot;484...&quot;</span><br><span class="line">A ----&gt; 2020</span><br><span class="line">l = function(a, b) &#123;</span><br><span class="line">    return parseInt(&quot;&quot; + a[b] + a[b + 1], 16);</span><br><span class="line">&#125;</span><br><span class="line">T = l(a, A);</span><br><span class="line">O[S][T] ----&gt; 255</span><br></pre></td></tr></table></figure><p>同样看下2是如何生成的，方法不变，整理下逻辑为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a ----&gt; &quot;484...&quot;</span><br><span class="line">A ----&gt; 2012</span><br><span class="line">T = l(a, A)</span><br><span class="line">O[S][T] ----&gt; 2</span><br></pre></td></tr></table></figure><p>跟255的生成逻辑是一致的。</p><p>再看下乱码字符串<code>-%.(´7^\u001e\u001a÷Ä±a\t9X</code>如何生成：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305271334889.png" alt="image-20230527133421812" style="zoom:50%;" /><p>整理逻辑为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function _0x25788b(a, b) &#123;</span><br><span class="line">    for (var c, e = [], d = 0, t = &quot;&quot;, f = 0; f &lt; 256; f++) &#123;</span><br><span class="line">        e[f] = f;</span><br><span class="line">    &#125;</span><br><span class="line">    for (var r = 0; r &lt; 256; r++) &#123;</span><br><span class="line">        d = (d + e[r] + a.charCodeAt(r % a.length)) % 256, c = e[r], e[r] = e[d], e[d] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    var n = 0;</span><br><span class="line">    d = 0;</span><br><span class="line">    for (var o = 0; o &lt; b.length; o++) &#123;</span><br><span class="line">        d = (d + e[n = (n + 1) % 256]) % 256, c = e[n], e[n] = e[d], e[d] = c, t += String.fromCharCode(b.charCodeAt(o) ^ e[(e[n] + e[d]) % 256]);</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_0x25788b(&#x27;ÿ&#x27;, &quot;@\u0000\u0001\fÄdE?&#x27;Qdpu\u000eÔ\u001dÑ&gt;¨&quot;) ----&gt; &#x27;-%.(´7^\u001e\u001a÷Ä±a\t9X&#x27;</span><br></pre></td></tr></table></figure><p>整理下’ÿ’和”@\u0000\u0001\fÄdE?’Qdpu\u000eÔ\u001dÑ&gt;¨”的生成逻辑：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a                      ----&gt; 255 固定值</span><br><span class="line">String.fromCharCode(a) ----&gt; &#x27;ÿ&#x27;;</span><br><span class="line"></span><br><span class="line">function _0x398111(a, b, c, e, d, t, f, r, n, o, i, _, x, u, s, l, v, h, p) &#123;</span><br><span class="line">    var y = new Uint8Array(19);</span><br><span class="line">    return y[0] = a, y[1] = i, y[2] = b, y[3] = _, y[4] = c, y[5] = x, y[6] = e, y[7] = u,</span><br><span class="line">    y[8] = d, y[9] = s, y[10] = t, y[11] = l, y[12] = f, y[13] = v, y[14] = r, y[15] = h,</span><br><span class="line">    y[16] = n, y[17] = p, y[18] = o, String.fromCharCode.apply(null, y);</span><br><span class="line">&#125; ----&gt; &quot;@\u0000\u0001\fÄdE?&#x27;Qdpu\u000eÔ\u001dÑ&gt;¨&quot;</span><br></pre></td></tr></table></figure><p>_0x398111方法，看下入参：<code>[64,0.00390625,1,12,196,100,69,63,39,81,100,112,117,14,212,29,209,62,16]</code>，数组里面每一个value值可能是动态的，具体的每一个值接下来都会一一分析。</p><h4 id="动态数组成员分析"><a href="#动态数组成员分析" class="headerlink" title="动态数组成员分析"></a>动态数组成员分析</h4><p>分析数组<code>arr1 = [64,1,196,69,39,100,117,212,209,168,0.00390625,12,100,63,81,112,14,29,62]</code>生成规则，结果如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">62:   l(a, 1922)  ----&gt; T  (59) </span><br><span class="line">      O[S][T]     ----&gt; 62 (S=22)</span><br><span class="line">29:   l(a, 1914)  ----&gt; T  (57)</span><br><span class="line">      O[S][T]     ----&gt; 29 (S=21)</span><br><span class="line">14:   l(a, 1906)  ----&gt; T  (55)</span><br><span class="line">      O[S][T]     ----&gt; 14 (S=20)</span><br><span class="line">112:  l(a, 1898)  ----&gt; T  (53)</span><br><span class="line">      O[S][T]     ----&gt; 112 (S=19)</span><br><span class="line">81:   l(a, 1890)  ----&gt; T  (51)</span><br><span class="line">      O[S][T]     ----&gt; 81 (S=18)</span><br><span class="line">63:   l(a, 1882)  ----&gt; T  (49)</span><br><span class="line">      O[S][T]     ----&gt; 63 (S=17)</span><br><span class="line">100:  l(a, 1874)  ----&gt; T  (47)</span><br><span class="line">      O[S][T]     ----&gt; 100 (S=16)</span><br><span class="line">12:   l(a, 1866)  ----&gt; T  (45)</span><br><span class="line">      O[S][T]     ----&gt; 12 (S=15)</span><br><span class="line">0.00390625:</span><br><span class="line">      l(a, 1858)  ----&gt; T  (43)</span><br><span class="line">      O[S][T]     ----&gt; 0.00390625 (S=14)</span><br><span class="line">168:  l(a, 1850)  ----&gt; T  (60)</span><br><span class="line">      O[S][T]     ----&gt; 168 (S=13)</span><br><span class="line">209:  l(a, 1842)  ----&gt; T  (58)</span><br><span class="line">      O[S][T]     ----&gt; 209 (S=12)</span><br><span class="line">212:  l(a, 1834)  ----&gt; T  (56)</span><br><span class="line">      O[S][T]     ----&gt; 212 (S=11)</span><br><span class="line">117:  l(a, 1826)  ----&gt; T  (54)</span><br><span class="line">      O[S][T]     ----&gt; 117 (S=10)</span><br><span class="line">100:  l(a, 1818)  ----&gt; T  (52)</span><br><span class="line">      O[S][T]     ----&gt; 100 (S=9)</span><br><span class="line">39:   l(a, 1810)  ----&gt; T  (50)</span><br><span class="line">      O[S][T]     ----&gt; 39 (S=8)</span><br><span class="line">69:   l(a, 1802)  ----&gt; T  (48)</span><br><span class="line">      O[S][T]     ----&gt; 69 (S=7)</span><br><span class="line">196:  l(a, 1794)  ----&gt; T  (46)</span><br><span class="line">      O[S][T]     ----&gt; 196 (S=6)</span><br><span class="line">1:    l(a, 1786)  ----&gt; T  (44)</span><br><span class="line">      O[S][T]     ----&gt; 1 (S=5)</span><br><span class="line">64:   l(a, 1778)  ----&gt; T  (42)</span><br><span class="line">      O[S][T]     ----&gt; 64 (S=4)</span><br></pre></td></tr></table></figure><p>不难看出这一段逻辑是将一个数组的奇数索引与偶数索引重新组成一个新的数组，arr1就是重组之后的数组。</p><p>将arr1重新排列，得到arr2为<code>arr2=[64,0.00390625,1,12,196,100,69,63,39,81,100,112,117,14,212,29,209,62,168]</code>。</p><p><strong>arr2的索引值从T&#x3D;42～T&#x3D;60，刚好长度为19</strong>。</p><p>接下来就是分析这个arr2数组了。方法依旧是一模一样，先看最后一个也就是索引为18的元素。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">168:</span><br><span class="line">O[S][T] ----&gt; 64 (T=42, arr2[42]) 64</span><br><span class="line">O[S][T] ----&gt; 0.00390625 (T=43, arr2[43]) 64^0.00390625 -----&gt; 64</span><br><span class="line">O[S][T] ----&gt; 1 (T=44, arr2[44]),    64^1    ----&gt; 65</span><br><span class="line">O[S][T] ----&gt; 12 (T=45, arr2[45]),   65^12   ----&gt; 77 </span><br><span class="line">O[S][T] ----&gt; 196 (T=46, arr2[46]),  77^196  ----&gt; 137</span><br><span class="line">O[S][T] ----&gt; 100 (T=47, arr2[47]),  137^100 ----&gt; 237</span><br><span class="line">O[S][T] ----&gt; 69 (T=48, arr2[48]),   237^69  ----&gt; 168</span><br><span class="line">O[S][T] ----&gt; 63 (T=49, arr2[49]),   168^63  ----&gt; 151</span><br><span class="line">O[S][T] ----&gt; 39 (T=50, arr2[50]),   151^39  ----&gt; 176</span><br><span class="line">O[S][T] ----&gt; 81 (T=51, arr2[51]),   176^81  ----&gt; 225</span><br><span class="line">O[S][T] ----&gt; 100 (T=52, arr2[52]),  225^100 ----&gt; 133</span><br><span class="line">O[S][T] ----&gt; 112 (T=53, arr2[53]),  133^112 ----&gt; 245</span><br><span class="line">O[S][T] ----&gt; 117 (T=54, arr2[54]),  245^117 ----&gt; 128</span><br><span class="line">O[S][T] ----&gt; 14 (T=55, arr2[55]),   128^14  ----&gt; 142</span><br><span class="line">O[S][T] ----&gt; 212 (T=56, arr2[56]),  142^212 ----&gt; 90</span><br><span class="line">O[S][T] ----&gt; 29 (T=57, arr2[57]),   90^29   ----&gt; 71</span><br><span class="line">O[S][T] ----&gt; 209 (T=58, arr2[58]),  71^209  ----&gt; 150</span><br><span class="line">O[S][T]----&gt; 62 (T=59, arr2[59]),   150^62  ----&gt; 168</span><br></pre></td></tr></table></figure><p>看下逻辑，就是对arr2数组从前往后做位运算。代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a ^ b; &#125;)</span><br></pre></td></tr></table></figure><p>测试一下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305281654744.png" style="zoom:50%;" /><p>没有问题。</p><p>接着分析索引为14~17的元素的生成逻辑，伪代码如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3558723902&gt;&gt;24 ----&gt; -44</span><br><span class="line">-44&amp;255        ----&gt; 212</span><br><span class="line"></span><br><span class="line">3558723902&gt;&gt;16 ----&gt; -11235</span><br><span class="line">-11235&amp;255     ----&gt; 29</span><br><span class="line"></span><br><span class="line">3558723902&gt;&gt;8 ----&gt; -2875951</span><br><span class="line">-2875951&amp;255  ----&gt; 209</span><br><span class="line"></span><br><span class="line">3558723902&gt;&gt;0  ----&gt; -736243394</span><br><span class="line">-736243394&amp;255 ----&gt; 62</span><br></pre></td></tr></table></figure><p>这四个元素生成逻辑大同小异，都是将固定数字<code>3558723902</code>经过2次位运算得到。</p><p>而这个固定字符<code>3558723902</code>是调用<code>_0x5bc542</code>生成的。抠出代码并微做调整如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x5bc542</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="title function_">createCanvas</span>(<span class="number">48</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">var</span> e = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    e.<span class="property">font</span> = <span class="string">&quot;14px serif&quot;</span>;</span><br><span class="line">    e.<span class="title function_">fillText</span>(<span class="string">&quot;龘ฑภ경&quot;</span>, <span class="number">2</span>, <span class="number">12</span>);</span><br><span class="line">    e.<span class="property">shadowBlur</span> = <span class="number">2</span>;</span><br><span class="line">    e.<span class="property">showOffsetX</span> = <span class="number">1</span>;</span><br><span class="line">    e.<span class="property">showColor</span> = <span class="string">&quot;lime&quot;</span>;</span><br><span class="line">    e.<span class="title function_">arc</span>(<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    e.<span class="title function_">stroke</span>();</span><br><span class="line">    <span class="keyword">const</span> b = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = <span class="number">0</span>; d &lt; <span class="number">32</span>; d++) &#123;</span><br><span class="line">        a = <span class="number">65599</span> * a + b.<span class="title function_">charCodeAt</span>(a % b.<span class="property">length</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到了canvas库，需要安装依赖：<code>npm i canvas</code></p><p>然后分析索引为10～13的元素的生成逻辑，伪代码如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1685091598.763&gt;&gt;24 ----&gt; 100</span><br><span class="line">100&amp;255            ----&gt; 100</span><br><span class="line"></span><br><span class="line">1685091598.763&gt;&gt;16 ----&gt; 25712</span><br><span class="line">25712&amp;255          ----&gt; 112</span><br><span class="line"></span><br><span class="line">1685091598.763&gt;&gt;8 ----&gt; 6582389</span><br><span class="line">6582389&amp;255       ----&gt;117</span><br><span class="line"></span><br><span class="line">1685091598.763&gt;&gt;0 ----&gt; 1685091598</span><br><span class="line">1685091598&amp;255    ----&gt;14</span><br></pre></td></tr></table></figure><p>逻辑跟上边四个字符一样，只不过固定的字符串生成规则不一样，是由一个13位的时间戳&#x2F;1000得到。</p><p>索引为6～9和0～3的元素为定值。</p><p>最后分析下索引为4～5的元素：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">originalString为URL后边的请求字符串拼接</span><br><span class="line">_0x1f3b8d(md5(_0x1f3b8d(md5(originalString)))) ----&gt; uint8Array</span><br><span class="line">uint8Array[14] ----&gt; 196</span><br><span class="line">uint8Array[15] ----&gt; 100</span><br></pre></td></tr></table></figure><p><code>uint8Array</code>方法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_0x1f3b8d = <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _0x19ae48 = []; <span class="comment">//内容自己补</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> b = a.<span class="property">length</span> &gt;&gt; <span class="number">1</span>, c = b &lt;&lt; <span class="number">1</span>, e = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(b), d = <span class="number">0</span>, t = <span class="number">0</span>; t &lt; c; ) &#123;</span><br><span class="line">        e[d++] = _0x19ae48[a.<span class="title function_">charCodeAt</span>(t++)] &lt;&lt; <span class="number">4</span> | _0x19ae48[a.<span class="title function_">charCodeAt</span>(t++)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此乱码字符串的生成逻辑就完成了，总结下来就是X-Bogus会对params，form-data，user-agent，时间，canvas进行校验。</p><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><p>运行结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305291449033.png" alt="image-20230529144947847" style="zoom:33%;" /><p>成功生成X-Bogus，通过生成的X-Bogus拿到博主主页数据。</p><p>若需要完整代码或者讨论，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222343422.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="插桩" scheme="http://example.com/tags/%E6%8F%92%E6%A1%A9/"/>
    
    <category term="某音" scheme="http://example.com/tags/%E6%9F%90%E9%9F%B3/"/>
    
    <category term="JSVMP" scheme="http://example.com/tags/JSVMP/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验无感验证逆向分析</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%97%A0%E6%84%9F%E9%AA%8C%E8%AF%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%97%A0%E6%84%9F%E9%AA%8C%E8%AF%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2023-05-24T14:25:50.000Z</published>
    <updated>2023-05-24T14:40:07.555Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li><p>目标：极验五子棋验证码逆向</p></li><li><p>主页：<a href="https://gt4.geetest.com/">https://gt4.geetest.com/</a></p></li><li><p>接口：</p><ul><li><a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a></li><li><a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a></li></ul></li><li><p>逆向参数：</p><ul><li>Get Param<ul><li>captcha_id: 54088bb07d2df3c46b79f80300b0abbe</li><li>challenge: e924d75f-7817-4ecc-9387-57eeefd060ce</li><li>lot_number: 56076d56745d43489287d7465d4d0101</li><li>payload: 太长，略</li><li>process_token：太长，略</li><li>w：太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>无感验证属于极验验证码中最简单的了，w参数生成过程基本跟滑块，消消乐，五子棋，文字点选一致。如果看了前面的滑块，消消乐，文字点选等逆向过程，这个无感基本就是小儿科，并且之前生成w的代码只需稍加修改就可以直接拿来用。</p><p>看下e结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span><span class="string">&quot;89b5360c20ea4820b7c098bea3f291bf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;1|0|md5|2023-05-24T22:14:37.410573+08:00|54088bb07d2df3c46b79f80300b0abbe|89b5360c20ea4820b7c098bea3f291bf||f62dd1e38c706b4d&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span><span class="string">&quot;6b5ebf3f4fd0e1223a5f93d80196715a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span><span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span><span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;biht&quot;</span><span class="punctuation">:</span><span class="string">&quot;1426265548&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span><span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;si&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>与前面不同的是，没了userresponse和pastime，这点不难理解，既然是无感验证，自然不需要人工操作，而之前userresponse保存的要么是滑块的轨迹，要么是坐标，要么是位置比例。在无感验证里userresponse自然没有意义，没有人工操作的话，passtime也不需要。</p><p>直接贴一下全部的w生成的代码吧。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deviceId = <span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">s</span>(<span class="params">lot_number, guid</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chapterId = <span class="string">&quot;54088bb07d2df3c46b79f80300b0abbe&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> hashFunc = <span class="string">&quot;md5&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> _ = version + <span class="string">&quot;|&quot;</span> + bits + <span class="string">&quot;|&quot;</span> + hashFunc + <span class="string">&quot;|&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>() + <span class="string">&quot;|&quot;</span> + chapterId + <span class="string">&quot;|&quot;</span> + lot_number + <span class="string">&quot;|&quot;</span> + <span class="string">&quot;&quot;</span> + <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> l = _ + guid;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;pow_msg&quot;</span>: l,</span><br><span class="line">        <span class="string">&quot;pow_sign&quot;</span>: md5.<span class="title function_">update</span>(l).<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uuid</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/[xy]/g</span>, <span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span> | <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> v = c === <span class="string">&#x27;x&#x27;</span> ? r : r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">word, key, iv</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> src = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(word);</span><br><span class="line">    <span class="keyword">let</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(src, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key), &#123; <span class="attr">iv</span>: <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(iv), <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>, <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="property">ciphertext</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FvBQ</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">5381</span>;</span><br><span class="line">    <span class="keyword">var</span> n = t.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        e = (e &lt;&lt; <span class="number">5</span>) + e + t.<span class="title function_">charCodeAt</span>(o++);</span><br><span class="line">    &#125;</span><br><span class="line">    e &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GRmF</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    t[<span class="string">&#x27;e0vm&#x27;</span>] = <span class="title class_">FvBQ</span>(<span class="title class_">GRmF</span>.<span class="title function_">toString</span>() + <span class="title class_">FvBQ</span>(<span class="title class_">FvBQ</span>.<span class="title function_">toString</span>())) + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FvBQ</span>(<span class="title class_">FvBQ</span>.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_e</span>(<span class="params">lotNumber, guid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = &#123;&#125;;</span><br><span class="line">    e[<span class="string">&quot;device_id&quot;</span>] = deviceId;</span><br><span class="line">    e[<span class="string">&quot;lot_number&quot;</span>] = lotNumber;</span><br><span class="line">    <span class="keyword">const</span> pow = <span class="title function_">s</span>(lotNumber, guid);</span><br><span class="line">    e[<span class="string">&quot;pow_msg&quot;</span>] = pow[<span class="string">&#x27;pow_msg&#x27;</span>];</span><br><span class="line">    e[<span class="string">&quot;pow_sign&quot;</span>] = pow[<span class="string">&#x27;pow_sign&#x27;</span>];</span><br><span class="line">    e[<span class="string">&quot;geetest&quot;</span>] = <span class="string">&quot;captcha&quot;</span>;</span><br><span class="line">    e[<span class="string">&quot;lang&quot;</span>] =  <span class="string">&quot;zh&quot;</span>;</span><br><span class="line">    e[<span class="string">&quot;ep&quot;</span>] =  <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    e[<span class="string">&quot;e0vm&quot;</span>] = <span class="title class_">GRmF</span>(&#123;</span><br><span class="line">        <span class="string">&quot;geetest&quot;</span>: <span class="string">&quot;captcha&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;zh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ep&quot;</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    e[<span class="string">&quot;em&quot;</span>] = &#123;</span><br><span class="line">        <span class="string">&quot;ph&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;cp&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;ek&quot;</span>: <span class="string">&quot;11&quot;</span>,</span><br><span class="line">        <span class="string">&quot;wd&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;nt&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;si&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;sc&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_w</span>(<span class="params">lotNumber, guid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="title function_">get_e</span>(lotNumber, guid);</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e), guid, <span class="string">&quot;0000000000000000&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> o = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>, i = c.<span class="property">sigBytes</span>; a &lt; i; a++) &#123;</span><br><span class="line">        <span class="keyword">var</span> u = c.<span class="property">words</span>[a &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - a % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        o.<span class="title function_">push</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">arrayToHex</span>(o)<span class="comment">//, JSON.stringify(e);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayToHex</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = [], n = <span class="number">0</span>, s = <span class="number">0</span>; s &lt; <span class="number">2</span> * e[<span class="string">&quot;length&quot;</span>]; s += <span class="number">2</span>) t[s &gt;&gt;&gt; <span class="number">3</span>] |= <span class="built_in">parseInt</span>(e[n], <span class="number">10</span>) &lt;&lt; <span class="number">24</span> - s % <span class="number">8</span> * <span class="number">4</span>, n++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = [], i = <span class="number">0</span>; i &lt; e[<span class="string">&quot;length&quot;</span>]; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> o = t[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - i % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        r[<span class="string">&quot;push&quot;</span>]((o &gt;&gt;&gt; <span class="number">4</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>)), r[<span class="string">&quot;push&quot;</span>]((<span class="number">15</span> &amp; o)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305242233935.png" alt="image-20230524223353798" style="zoom:33%;" /><p>运行结果如上，无感验证通过率一定是100%。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305242234736.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="MD5" scheme="http://example.com/tags/MD5/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验文字点选验证码逆向分析</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%96%87%E5%AD%97%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%96%87%E5%AD%97%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2023-05-23T16:05:07.000Z</published>
    <updated>2023-05-24T11:10:28.007Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li><p>目标：极验五子棋验证码逆向</p></li><li><p>主页：<a href="https://gt4.geetest.com/">https://gt4.geetest.com/</a></p></li><li><p>接口：</p><ul><li><a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a></li><li><a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a></li></ul></li><li><p>逆向参数：</p><ul><li>Get Param<ul><li>captcha_id: 54088bb07d2df3c46b79f80300b0abbe</li><li>challenge: e924d75f-7817-4ecc-9387-57eeefd060ce</li><li>lot_number: 56076d56745d43489287d7465d4d0101</li><li>payload: 太长，略</li><li>process_token：太长，略</li><li>w：太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>逆向过程基本上与消消乐与五子棋一致。说说不同的几点。</p><ol><li>关于验证码加载接口</li></ol><p>入参只有risk_type不一样，其余都一致。文字点选的risk_type为word，消消乐的为match，五子棋的是winlinze。接口返回的数据也基本一致，不同的是imgs对应的是点选验证码的底图，即要点击的图片，而ques这是要点击的文字的图片。如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305240016948.png" style="zoom:30%;" /><p>可以看到，ques中图片的顺序与要点击的文字的顺序一一对应。</p><ol start="2"><li>关于验证码验证接口</li></ol><p>入参完全一致，生成w参数的e对象结构也一致，如下图：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;passtime&quot;</span><span class="punctuation">:</span><span class="number">2617</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userresponse&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">993</span><span class="punctuation">,</span> <span class="number">1025</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1793</span><span class="punctuation">,</span> <span class="number">5472</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">3793</span><span class="punctuation">,</span> <span class="number">1874</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span><span class="string">&quot;dac26749dcc54f758675ffa7280d52b3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;1|0|md5|2023-05-24T00:19:56.722398+08:00|54088bb07d2df3c46b79f80300b0abbe|dac26749dcc54f758675ffa7280d52b3||f1c8f88b905d4249&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span><span class="string">&quot;57c50f085e4c13fe6d23c870b96d5b1b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span><span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span><span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mrc5&quot;</span><span class="punctuation">:</span><span class="string">&quot;103342051&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span><span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;si&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>userresponse正是点击背景图上三个文字产生的坐标，但是这个坐标数值比较大，而实际的背景图大小是宽为300px，高为200px的，所以这个坐标肯定是经过处理的。</p><p>扒一扒userresponse的生成过程：</p><p>添加如下断点：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305240128754.png" alt="image-20230524012849614" style="zoom: 35%;" /><p>一路跟踪到这里：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305240137613.png" alt="image-20230524013702426" style="zoom: 67%;" /><p>其中，t[left]，t[top]，t[width]，t[height]都是固定值，分别为：103，320，300， 200。简单分析一下知，r和i分别是点击的位置坐标在整个背景图上的横纵坐标所占百分比，也即是某个汉字在整个背景图上横纵坐标的占比。最后，把这个百分比扩大100倍取整即可。</p><p>分析出来了userresponse坐标的生成过程，接下来就是文字点选最关键的目标检测与识别。</p><ol start="3"><li>文字位置的检测与识别</li></ol><p>首先是底图文字位置的检测，使用ddddocr库，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">det = ddddocr.DdddOcr(det=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;4138cab002ce453696bd84d92cc5322f.jpg&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = f.read()</span><br><span class="line"></span><br><span class="line">poses = det.detection(image)</span><br><span class="line"><span class="built_in">print</span>(poses)</span><br><span class="line"></span><br><span class="line">im = cv2.imread(<span class="string">&quot;4138cab002ce453696bd84d92cc5322f.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> box <span class="keyword">in</span> poses:</span><br><span class="line">    x1, y1, x2, y2 = box</span><br><span class="line">    im = cv2.rectangle(im, (x1, y1), (x2, y2), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">&quot;result.jpg&quot;</span>, im)</span><br></pre></td></tr></table></figure><p>输出三个坐标，同时标记了验证码图片上文字的位置。</p><p>举例几张图片如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241012360.png" alt="image-20230524101252194" title="">                </div>                <div class="image-caption">image-20230524101252194</div>            </figure><p>并输出坐标为：[[78, 18, 131, 71], [122, 102, 174, 152], [175, 89, 227, 139]]。</p><p>接下来就是文字识别，根据每个文字的四个顶点坐标把文字依次裁剪下来，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;4138cab002ce453696bd84d92cc5322f.jpg&quot;</span>)</span><br><span class="line">cropped = img[<span class="number">18</span>:<span class="number">71</span>, <span class="number">78</span>:<span class="number">131</span>]  <span class="comment"># 裁剪坐标为[y0:y1, x0:x1]</span></span><br></pre></td></tr></table></figure><p>得到的图片依次为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241746294.jpg" alt="result1](https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241745081.jpg)![result2](https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241746166.jpg)![result3" title="">                </div>                <div class="image-caption">result1](https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241745081.jpg)![result2](https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241746166.jpg)![result3</div>            </figure><p>然后再用ddddocr依次对其做文字识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"></span><br><span class="line">ocr = ddddocr.DdddOcr()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.png&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = f.read()</span><br><span class="line"></span><br><span class="line">res = ocr.classification(image)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>识别结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241748483.png" alt="image-20230524174831372" style="zoom: 33%;" /><p>识别还是挺准确的。</p><p>除了底图的文字位置检测与识别，还有上边的标题需要识别，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241750899.png" alt="image-20230524175041775" style="zoom: 33%;" /><p>这些文字都是比较规整，并且同一个汉子的图片的md5的文件名基本上是不变的，大约只有400多个汉字，所以提前跑一个脚本，把它们收集起来即可。如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241757270.png" alt="image-20230524175703147" style="zoom: 33%;" /><p>承载汉字的md5码名称的图片文件与汉字一一对应，并保存到data.pickle文件中。</p><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><p>运行与测试结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241908173.png" alt="image-20230524190803029" style="zoom: 33%;" /><p>识别2个或者3个汉字，才能验证成功。通过测试可知，汉字的识别率还是挺低的，还是需要自己收集数据训练。后边会专门出一篇文章介绍自己训练这一块。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241910130.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="MD5" scheme="http://example.com/tags/MD5/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验五子棋验证码逆向分析</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E4%BA%94%E5%AD%90%E6%A3%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E4%BA%94%E5%AD%90%E6%A3%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2023-05-23T02:04:47.000Z</published>
    <updated>2023-05-23T07:17:27.993Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li><p>目标：极验五子棋验证码逆向</p></li><li><p>主页：<a href="https://gt4.geetest.com/">https://gt4.geetest.com/</a></p></li><li><p>接口：</p><ul><li><a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a></li><li><a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a></li></ul></li><li><p>逆向参数：</p><ul><li>Get Param<ul><li>captcha_id: 54088bb07d2df3c46b79f80300b0abbe</li><li>challenge: e924d75f-7817-4ecc-9387-57eeefd060ce</li><li>lot_number: 56076d56745d43489287d7465d4d0101</li><li>payload: 太长，略</li><li>process_token：太长，略</li><li>w：太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>抓包分析有2个接口，一个是获取验证码的接口<a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a>，一个是进行验证的接口<a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a>。</p><h3 id="获取验证码接口"><a href="#获取验证码接口" class="headerlink" title="获取验证码接口"></a>获取验证码接口</h3><h4 id="入参"><a href="#入参" class="headerlink" title="入参"></a>入参</h4><p>参数如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;captcha_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;54088bb07d2df3c46b79f80300b0abbe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;challenge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10cea755-08d2-4c7f-900f-d30d81301aa5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;client_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;risk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;winlinze&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geetest_1684505012579&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>入参除了risk_type与消消乐不同外，其它都一样，消消乐的risk_type为match，这里为winlinze。消消乐验证码逆向分析见<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%B6%88%E6%B6%88%E4%B9%90%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/">JS逆向案例——极验消消乐验证码逆向分析</a></p><h4 id="接口返回值"><a href="#接口返回值" class="headerlink" title="接口返回值"></a>接口返回值</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5a1ad5b0399c4a55b416f81d94e112e5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11-UPJ-Jb2g3IpmYoaJlOw5fEieqchiSh9mIS5Ifj...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;process_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;50e908f0ea51c1a16ac0f8a1af6270903d45a4c68572760378125e308c5d8727&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ques&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>接口返回与五子棋基本一致，只是ques数组第二维里面的元素个数不一样，代表的含义也不一样。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305231036728.png" alt="image-20230523103653587" style="zoom:50%;" /><p>如上图，0代表空格，1～4代表4种棋子。</p><h3 id="验证码验证接口"><a href="#验证码验证接口" class="headerlink" title="验证码验证接口"></a>验证码验证接口</h3><h4 id="入参-1"><a href="#入参-1" class="headerlink" title="入参"></a>入参</h4><p>参数如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11-UPJ-Jb2g3IpmYoaJlOw5fEieqchiSh9mIS5Ifj...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;process_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d4a636b32cee705e5314b90bce43f71ead1f2b6a0b5cb44c50b71bf28f6f9423&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;w&quot;</span><span class="punctuation">:</span> <span class="string">&quot;73bfc2bde060aac064f99128586dc53c9ee05cc25840aa1dc77445727e2e86c342b8cde...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geetest_1684505905348&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;risk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;winlinze&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload_protocol&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pt&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中入参与消消乐的都一模一样，同样只是risk_type不是match而是winlinze。</p><p>另外所有加密方法与对象都与消消乐一致，就连对象e都一模一样，对比消消乐e结构和五子棋的e结构：</p><p>五子棋的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;passtime&quot;</span><span class="punctuation">:</span><span class="number">450</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userresponse&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span><span class="string">&quot;5553a2835b7046d2abd595e82fc62703&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;1|0|md5|2023-05-23T10:41:08.568519+08:00|54088bb07d2df3c46b79f80300b0abbe|5553a2835b7046d2abd595e82fc62703||a19a8f9a8bdc0db7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span><span class="string">&quot;ab3742f987977542c73a36692fdd5a08&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span><span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span><span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e0vm&quot;</span><span class="punctuation">:</span><span class="string">&quot;2135175515&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span><span class="string">&quot;11&quot;</span><span class="punctuation">,</span><span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;si&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>消消乐的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;passtime&quot;</span><span class="punctuation">:</span> <span class="number">550</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userresponse&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1|0|md5|2023-05-22T11:10:02.686802+08:00|54088bb07d2df3c46b79f80300b0abbe|224a2186c59f470cb73897f377843df5||62b052493785e2b7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;506fe742ff81d4bb3bf34892714fa2fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e0vm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;915661778&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;si&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>两者结构虽然一致，但是userresponse的逻辑含义有区别，五子棋是将一个棋子移动到空格位置的坐标信息，而消消乐则是要交换的两个图案信息。</p><h4 id="五子棋算法"><a href="#五子棋算法" class="headerlink" title="五子棋算法"></a>五子棋算法</h4><p>由于是5x5的五子棋棋盘，并且只需要交换一对棋子就可完成五子连珠，所以直接采取暴力穷举即可。算法代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">winlinze_by_row</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="comment">// 统计每一个数字出现的次数</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="keyword">function</span> (<span class="params">arr, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] === target)</span><br><span class="line">                c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找除指定行之外相同元素的位置</span></span><br><span class="line">    <span class="keyword">let</span> checkRow = <span class="keyword">function</span> (<span class="params">arr, besides, target</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i === besides)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i][j] === target)</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找指定行的空格位置</span></span><br><span class="line">    <span class="keyword">let</span> checkEmpty = <span class="keyword">function</span> (<span class="params">arr, row</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr[row].<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[row][i] === <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> [row, i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看每一行是否存在四颗一样的棋子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ques.<span class="property">length</span>; i ++)&#123;</span><br><span class="line">        <span class="keyword">let</span> c = [];</span><br><span class="line">        <span class="keyword">let</span> emptySite = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 统计1-4号棋子以及空格的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> m = <span class="number">0</span>; m &lt; ques[i].<span class="property">length</span>; m++)</span><br><span class="line">            c[m] = <span class="title function_">count</span>(ques[i], m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> m = <span class="number">0</span>; m &lt; ques[i].<span class="property">length</span>; m++) &#123;</span><br><span class="line">            <span class="comment">// 该行上有四颗颜色一样的棋子，并且有空格</span></span><br><span class="line">            <span class="keyword">if</span> (c[m] === <span class="number">4</span> &amp;&amp; c[<span class="number">0</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 查找指定</span></span><br><span class="line">                <span class="keyword">let</span> t = <span class="title function_">checkRow</span>(ques, i, m);</span><br><span class="line">                <span class="keyword">if</span> (t.<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> [t, <span class="title function_">checkEmpty</span>(ques, i)]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">winlinze_by_diagonal</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> leftSites = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>]];</span><br><span class="line">    <span class="keyword">let</span> rightSites = [[<span class="number">0</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">let</span> checkEmpty = <span class="keyword">function</span> (<span class="params">ques, sites</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sites.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ques[sites[i][<span class="number">0</span>]][sites[i][<span class="number">1</span>]] === <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> [i, sites[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="keyword">function</span> (<span class="params">ques, sites, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; sites.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ques[sites[j][<span class="number">0</span>]][sites[j][<span class="number">1</span>]] === target)</span><br><span class="line">                c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> indexOf = <span class="keyword">function</span> (<span class="params">sites, i, j</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; sites.<span class="property">length</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sites[k][<span class="number">0</span>] === i &amp;&amp; sites[k][<span class="number">1</span>] === j)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> search = <span class="keyword">function</span> (<span class="params">ques, sites, target</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ques.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; ques[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ques[i][j] === target &amp;&amp; !<span class="title function_">indexOf</span>(sites,i, j))</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sites = [leftSites, rightSites];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sites.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> e = <span class="title function_">checkEmpty</span>(ques, sites[i]);</span><br><span class="line">        <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; sites[i].<span class="property">length</span>; j++)</span><br><span class="line">            s.<span class="title function_">add</span>(ques[sites[i][j][<span class="number">0</span>]][sites[i][j][<span class="number">1</span>]]);</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="property">size</span> === <span class="number">2</span> &amp;&amp; <span class="title function_">count</span>(ques, sites[i], ques[e[<span class="number">1</span>][<span class="number">0</span>]][e[<span class="number">1</span>][<span class="number">1</span>]]) === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> rand = (e[<span class="number">0</span>]+<span class="number">1</span>) % <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">let</span> w = <span class="title function_">search</span>(ques, sites[i], ques[sites[i][rand][<span class="number">0</span>]][sites[i][rand][<span class="number">1</span>]]);</span><br><span class="line">            <span class="keyword">if</span> (w &amp;&amp; w.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> [e[<span class="number">1</span>], w]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_userresponse</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据行去判断是否可以五子连线</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="title function_">winlinze_by_row</span>(ques);</span><br><span class="line">    <span class="keyword">if</span> (arr &amp;&amp; arr.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果按行不行，则按列</span></span><br><span class="line">    <span class="keyword">if</span> (arr === <span class="literal">undefined</span> || arr.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 行列互换</span></span><br><span class="line">        <span class="keyword">let</span> new_ques = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; ques.<span class="property">length</span>; index++)</span><br><span class="line">            new_ques[index] = [ques[<span class="number">0</span>][index], ques[<span class="number">1</span>][index], ques[<span class="number">2</span>][index], ques[<span class="number">3</span>][index], ques[<span class="number">4</span>][index]];</span><br><span class="line">        arr = <span class="title function_">winlinze_by_row</span>(new_ques);</span><br><span class="line">        <span class="comment">// 得到的结果再将列转化为行</span></span><br><span class="line">        <span class="keyword">let</span> new_arr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; arr &amp;&amp; index &lt; arr.<span class="property">length</span>; index++)</span><br><span class="line">            new_arr[index] = [arr[index][<span class="number">1</span>], arr[index][<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">if</span> (new_arr.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> new_arr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按列也不行，查找对角线是否可以五子连线</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">winlinze_by_diagonal</span>(ques)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><p>运行结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305231400262.png" alt="image-20230523140001088" style="zoom: 33%;" /><p>同样的，只要五子棋算法没问题，五子棋验证的通过率就是百分百。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222343422.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="MD5" scheme="http://example.com/tags/MD5/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验消消乐验证码逆向分析</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%B6%88%E6%B6%88%E4%B9%90%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%B6%88%E6%B6%88%E4%B9%90%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2023-05-18T08:04:33.000Z</published>
    <updated>2023-06-02T12:41:20.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li><p>目标：极验消消乐验证码逆向</p></li><li><p>主页：<a href="https://gt4.geetest.com/">https://gt4.geetest.com/</a></p></li><li><p>接口：</p><ul><li><a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a></li><li><a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a></li></ul></li><li><p>逆向参数：</p><ul><li>Get Param<ul><li>captcha_id: 54088bb07d2df3c46b79f80300b0abbe</li><li>challenge: e924d75f-7817-4ecc-9387-57eeefd060ce</li><li>lot_number: 56076d56745d43489287d7465d4d0101</li><li>payload: 太长，略</li><li>process_token：太长，略</li><li>w：太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>抓包分析有2个接口，一个是获取验证码的接口<a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a>，一个是进行验证的接口<a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a>。</p><h3 id="获取验证码接口"><a href="#获取验证码接口" class="headerlink" title="获取验证码接口"></a>获取验证码接口</h3><h4 id="入参"><a href="#入参" class="headerlink" title="入参"></a>入参</h4><p>参数如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;captcha_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;54088bb07d2df3c46b79f80300b0abbe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;challenge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10cea755-08d2-4c7f-900f-d30d81301aa5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;client_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;risk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;match&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geetest_1684505012579&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>client_type表示客户端类型为web，risk_type表示验证码类型为消消乐，lang表示语言为中文，callback为固定字符串geetest和时间戳做了一个拼接。</p><p>再看另外两个参数，captcha_id和challenge，通过浏览器内存漫游，轻松定位到challenge生成的位置：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305192152414.png" alt="image-20230518234233992" style="zoom:67%;" /><p>challenge由uuid这个方法生成，抠出相关代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uuid = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/[xy]/g</span>, <span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span> | <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> v = c === <span class="string">&#x27;x&#x27;</span> ? r : r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而另一个参数captcha_id则是固定值，为<code>54088bb07d2df3c46b79f80300b0abbe</code>。</p><h4 id="接口返回值"><a href="#接口返回值" class="headerlink" title="接口返回值"></a>接口返回值</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11-UPJ-Jb2g3IpmYoaJlOw5fEieqchiSh9mIS5Ifj...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;process_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d4a636b32cee705e5314b90bce43f71ead1f2b6a0b5cb44c50b71bf28f6f9423&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ques&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中lot_number，payload，process_token在验证接口都有用到，而ques则是消消乐对应的图案，不同的数值对应不同的图案。</p><h3 id="验证码验证接口"><a href="#验证码验证接口" class="headerlink" title="验证码验证接口"></a>验证码验证接口</h3><h4 id="入参-1"><a href="#入参-1" class="headerlink" title="入参"></a>入参</h4><p>参数如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11-UPJ-Jb2g3IpmYoaJlOw5fEieqchiSh9mIS5Ifj...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;process_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d4a636b32cee705e5314b90bce43f71ead1f2b6a0b5cb44c50b71bf28f6f9423&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;w&quot;</span><span class="punctuation">:</span> <span class="string">&quot;73bfc2bde060aac064f99128586dc53c9ee05cc25840aa1dc77445727e2e86c342b8cde...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geetest_1684505905348&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;risk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;match&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload_protocol&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pt&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中lot_number，payload和process_token三个参数由获取验证码接口返回，只有w参数需要逆向。</p><h4 id="w参数逆向"><a href="#w参数逆向" class="headerlink" title="w参数逆向"></a>w参数逆向</h4><p>将gcaptcha4.js文件反混淆之后全局搜索<code>&quot;w&quot;:</code>，定位到w参数生成位置，并且打上断点，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305212011014.png" alt="image-20230521201117842" style="zoom: 67%;" /><p>w&#x3D;d.default(JSON.stringify(e), s)。</p><h5 id="对象e"><a href="#对象e" class="headerlink" title="对象e"></a>对象e</h5><p>对象e的结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;passtime&quot;</span><span class="punctuation">:</span> <span class="number">550</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userresponse&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1|0|md5|2023-05-22T11:10:02.686802+08:00|54088bb07d2df3c46b79f80300b0abbe|224a2186c59f470cb73897f377843df5||62b052493785e2b7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;506fe742ff81d4bb3bf34892714fa2fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e0vm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;915661778&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;si&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>需要解析出passtime，userresponse，device_id，pow_msg，pow_sign。</p><ol><li>device_id</li></ol><p>搜索<code>deviceId</code>，找到如下代码片段：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221232591.png" alt="image-20230522123227473" style="zoom:67%;" /><p>可以看到device_id是由一个base64编码的图片经过md5加密形成，而这个图片是一个固定的图片，所以device_id也是一个固定的值。</p><ol start="2"><li>pow_sign和pow_msg</li></ol><p>搜索<code>powSign</code>，找到如下代码片段：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221249230.png" alt="image-20230522124939116" style="zoom:67%;" /><p>跟踪进v.default这个方法，可以看到：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221311565.png" alt="image-20230522131110429" style="zoom:50%;" /><p>pow_msg是由一些固定的值和captcha_id，lot_number，16位的随机字符串以及当前时间做的一个字符拼接，而pow_sign则是对pow_msg做了一个md5加密。</p><p>整理代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> guid = <span class="title function_">e</span>() + <span class="title function_">e</span>() + <span class="title function_">e</span>() + <span class="title function_">e</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">e</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">65536</span> * (<span class="number">1</span> + <span class="title class_">Math</span>[<span class="string">&quot;random&quot;</span>]()) | <span class="number">0</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>)[<span class="string">&quot;substring&quot;</span>](<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">s</span>(<span class="params">lot_number</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chapterId = <span class="string">&quot;54088bb07d2df3c46b79f80300b0abbe&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> hashFunc = <span class="string">&quot;md5&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> _ = version + <span class="string">&quot;|&quot;</span> + bits + <span class="string">&quot;|&quot;</span> + hashFunc + <span class="string">&quot;|&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>() + <span class="string">&quot;|&quot;</span> + chapterId + <span class="string">&quot;|&quot;</span> + lot_number + <span class="string">&quot;|&quot;</span> + <span class="string">&quot;&quot;</span> + <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> l = _ + guid;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;pow_msg&quot;</span>: l,</span><br><span class="line">        <span class="string">&quot;pow_sign&quot;</span>: md5.<span class="title function_">update</span>(l).<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>passtime</li></ol><p>passtime表示验证码验证花费的时间，整个过程包括拖动第一个图案到与第二个图案交换完成消消乐的时间。这里没有特殊的检测，所以直接随机一个1s内的时间即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passtime = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>userresponse</li></ol><p>经过分析，userresponse数组就是消消乐需要进行交换的图案的坐标。前面说过load接口返回的ques数组是消消乐的每个图案，，比如说ques &#x3D; [[0, 2, 2], [1, 0, 0], [3, 1, 2]]。</p><p>如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221535781.png" alt="image-20230522153528665" style="zoom:67%;" /><p>进行验证码验证时，userresponse正好是2个图案的坐标：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221537444.png" alt="image-20230522153723329" style="zoom:67%;" /><p>可以看到(0,  0)和(1, 0)正好是上边的金字塔和昆虫的坐标，而交换第一行的金字塔和昆虫刚好第三行消除，完成消消乐。</p><p>用穷举的方法，写了一个消消乐查找算法，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCol</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkCol</span>(<span class="params">ques, i, j</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> other = (j + <span class="number">1</span>) % <span class="number">3</span></span><br><span class="line">        <span class="comment">// 第1列出现重复元素</span></span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 看后一列</span></span><br><span class="line">            <span class="keyword">if</span> (ques[i][other] === ques[i + <span class="number">1</span>][j])</span><br><span class="line">                <span class="keyword">return</span> [[i, j], [i + <span class="number">1</span>, j]]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 第2列出现重复元素</span></span><br><span class="line">            <span class="comment">// 看后一列</span></span><br><span class="line">            <span class="keyword">if</span> (ques[i][other] === ques[i + <span class="number">1</span>][j])</span><br><span class="line">                <span class="keyword">return</span> [[i, j], [i + <span class="number">1</span>, j]]</span><br><span class="line">            <span class="comment">// 看前一列</span></span><br><span class="line">            <span class="keyword">if</span> (ques[i][other] === ques[i - <span class="number">1</span>][j])</span><br><span class="line">                <span class="keyword">return</span> [[i, j], [i - <span class="number">1</span>, j]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 第3列出现重复元素</span></span><br><span class="line">            <span class="comment">// 看前一列</span></span><br><span class="line">            <span class="keyword">if</span> (ques[i][other] === ques[i - <span class="number">1</span>][j])</span><br><span class="line">                <span class="keyword">return</span> [[i, j], [i, j - <span class="number">1</span>]]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看每一列是否经过一次交换就可消除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ques.<span class="property">length</span>; i ++)&#123;</span><br><span class="line">        <span class="comment">// 前面2个元素相同，看第三个元素是否可以经过一次交换产生相同元素</span></span><br><span class="line">        <span class="keyword">if</span> (ques[i][<span class="number">0</span>] === ques[i][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> check = <span class="title function_">checkCol</span>(ques, i, <span class="number">2</span>)</span><br><span class="line">            <span class="comment">// 第i列第三个元素可以与其隔壁交换</span></span><br><span class="line">            <span class="keyword">if</span> (check.<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> check</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第1个元素与第3个元素相同，看第2个元素是否可以与其隔壁交换</span></span><br><span class="line">        <span class="keyword">if</span> (ques[i][<span class="number">0</span>] === ques[i][<span class="number">2</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> check = <span class="title function_">checkCol</span>(ques, i, <span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 第i列第二个元素可以与其隔壁交换</span></span><br><span class="line">            <span class="keyword">if</span> (check.<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> check</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第2个元素与第3个元素相同，看第1个元素是否可以与其隔壁交换</span></span><br><span class="line">        <span class="keyword">if</span> (ques[i][<span class="number">1</span>] === ques[i][<span class="number">2</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> check = <span class="title function_">checkCol</span>(ques, i, <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 第i列第一个元素可以与其隔壁交换</span></span><br><span class="line">            <span class="keyword">if</span> (check.<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> check</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_userresponse</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据列去判断是否可以消除</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="title function_">getCol</span>(ques);</span><br><span class="line">    <span class="comment">// 如果按列不可消除，按照行去判断</span></span><br><span class="line">    <span class="keyword">if</span> (arr === <span class="literal">undefined</span> || arr.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 把按照行判断转化为按照列判断</span></span><br><span class="line">        <span class="keyword">let</span> new_ques = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; ques.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            new_ques[index] = [ques[<span class="number">0</span>][index], ques[<span class="number">1</span>][index], ques[<span class="number">2</span>][index]];</span><br><span class="line">        &#125;</span><br><span class="line">        arr = <span class="title function_">getCol</span>(new_ques);</span><br><span class="line">        <span class="comment">// 得到的结果再将列转化为行</span></span><br><span class="line">        <span class="keyword">let</span> new_arr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            new_arr[index] = [arr[index][<span class="number">1</span>], arr[index][<span class="number">0</span>]]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> new_arr</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>e0vm</li></ol><p>watch变量e，发现代码运行过此处之后，e对象才有e0vm属性，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222335555.png" alt="image-20230522233524398" style="zoom: 50%;" /><p>跟踪进去_gct方法，调试并整理代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FvBQ</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">5381</span>;</span><br><span class="line">    <span class="keyword">var</span> n = t.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        e = (e &lt;&lt; <span class="number">5</span>) + e + t.<span class="title function_">charCodeAt</span>(o++);</span><br><span class="line">    &#125;</span><br><span class="line">    e &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GRmF</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    t[<span class="string">&#x27;e0vm&#x27;</span>] = <span class="title class_">FvBQ</span>(<span class="title class_">GRmF</span>.<span class="title function_">toString</span>() + <span class="title class_">FvBQ</span>(<span class="title class_">FvBQ</span>.<span class="title function_">toString</span>())) + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FvBQ</span>(<span class="title class_">FvBQ</span>.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">GRmF</span>(&#123;<span class="string">&quot;geetest&quot;</span>: <span class="string">&quot;captcha&quot;</span>, <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;zh&quot;</span>, <span class="string">&quot;ep&quot;</span>: <span class="string">&quot;123&quot;</span>&#125;));</span><br></pre></td></tr></table></figure><h5 id="d-default"><a href="#d-default" class="headerlink" title="d.default"></a>d.default</h5><p>抠完对象e之后，看下整个得到w参数的加密算法d.default，之所以不着急去解剖s，是因为s这个对象属性太多，可以先跟踪进去d.default，看下d.default方法里面用了s对象的哪些属性，然后再反过来看下这些值是怎样生成的。</p><p>跟进去d.default方法，代码如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221747609.png" alt="image-20230522174718441" style="zoom: 50%;" /><p>参数e是前边逆向出来的e，上边红框的部分可以看到t值只是一种特殊情况，所以不必对t也就是前边说的s进行逆向。下边的红框可以看到w是由两部分组成，前半部分是由e和s经过AES算法加密得到的，整理代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_w</span>(<span class="params">ques, lotNumber, guid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="title function_">get_e</span>(ques, lotNumber, guid);</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e), guid, <span class="string">&quot;0000000000000000&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> o = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>, i = c.<span class="property">sigBytes</span>; a &lt; i; a++) &#123;</span><br><span class="line">        <span class="keyword">var</span> u = c.<span class="property">words</span>[a &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - a % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        o.<span class="title function_">push</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">arrayToHex</span>(o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayToHex</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = [], n = <span class="number">0</span>, s = <span class="number">0</span>; s &lt; <span class="number">2</span> * e[<span class="string">&quot;length&quot;</span>]; s += <span class="number">2</span>) t[s &gt;&gt;&gt; <span class="number">3</span>] |= <span class="built_in">parseInt</span>(e[n], <span class="number">10</span>) &lt;&lt; <span class="number">24</span> - s % <span class="number">8</span> * <span class="number">4</span>, n++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = [], i = <span class="number">0</span>; i &lt; e[<span class="string">&quot;length&quot;</span>]; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> o = t[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - i % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        r[<span class="string">&quot;push&quot;</span>]((o &gt;&gt;&gt; <span class="number">4</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>)), r[<span class="string">&quot;push&quot;</span>]((<span class="number">15</span> &amp; o)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后半部分则是u，跟进去可以看到是一个RSA加密，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222256104.png" alt="image-20230522225604931" style="zoom:67%;" /><p>跟进去这个对象，可以看到公钥，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222257715.png" alt="image-20230522225737557" style="zoom: 50%;" /><p>公钥与滑块验证码的公钥一致。</p><p>生成u的部分代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_encrypt</span>(<span class="params">wb</span>):</span><br><span class="line">    rsa = RSAKey()</span><br><span class="line">    rsa.setPublic(<span class="string">&quot;00C1E3934D16144...打码...66D59CEEFA5F2748EA80BAB81&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10001&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rsa.encrypt(wb)</span><br></pre></td></tr></table></figure><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><p>运行结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222342070.png" alt="image-20230522234224909" style="zoom:33%;" /><p>验证成功，不同于滑块验证码，只要交换的图案完成消消乐，成功率就是百分百。</p><p>若需要完整代码或者讨论，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222343422.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="MD5" scheme="http://example.com/tags/MD5/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——百度旋转验证码</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E6%97%8B%E8%BD%AC%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E6%97%8B%E8%BD%AC%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2023-05-16T17:17:47.000Z</published>
    <updated>2023-05-18T07:12:49.530Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li>目标：百度旋转验证码</li><li>主页：<a href="https://wappass.baidu.com/#/password_login">https://wappass.baidu.com/#/password_login</a></li><li>接口：<a href="https://passport.baidu.com/viewlog">https://passport.baidu.com/viewlog</a></li><li>逆向参数：<ul><li>Get Param<ul><li>ak: 1e3f2dd1c81f2075171a547893391274</li><li>as: 02a62d7d</li><li>fs: 太长，略</li><li>tk: 太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>四个参数中，ak是固定的，as和tk是接口返回的，所以只需要找出fs的生成方法即可。</p><p>从调用栈中进入相关代码进行调试：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172016467.png" alt="image-20230517201639331" style="zoom:50%;" /><p>然后文件中搜索<code>fs = </code>，发现fs是经过encrypt方法加密生成，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172022108.png" alt="image-20230517202259000" style="zoom:67%;" /><p>encrypt方法简单的封装了一下aes加密算法，接受一个参数i，是一个JSON字符串，进入这个方法，代码如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172029575.png" alt="image-20230517202959430" style="zoom:67%;" /><p>其中的key是t，而t则是由as和固定的字符串<code>appsapi0</code>拼接而成，i则是传入进来的JSON字符串。所以只需要解决这个JSON字符串是如何生成的，也就知道fs是如何生成的了。</p><p>全局搜索<code>rzData</code>，找到一处定义的地方，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172109764.png" alt="image-20230517210914653" style="zoom: 67%;" /><p>可以看到simu是检测到webdriver，这里默认为0就行。</p><p>看下关键的ac_c，ac_c是由i.percentage赋值。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172213779.png" alt="image-20230517221341686" style="zoom:67%;" /><p>跟进去看下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172223135.png" alt="image-20230517222303016" style="zoom:67%;" /><p>其中o是旋转的角度，a是固定值212。</p><p>rzData中还有一个backstr，来自于其它请求。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172239255.png" alt="image-20230517223901174" style="zoom:67%;" /><p>至于其它的字段，比如cl，mv等不影响旋转验证码的验证。自此，整个fs的逆向过程就完成了。</p><h2 id="旋转角度的识别"><a href="#旋转角度的识别" class="headerlink" title="旋转角度的识别"></a>旋转角度的识别</h2><p>关于旋转验证码的识别，网上找的模型，地址如下：<a href="https://github.com/chencchen/RotateCaptchaBreak">https://github.com/chencchen/RotateCaptchaBreak</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305181511235.png" alt="image-20230518151105093" style="zoom: 33%;" /><p>op为1表示验证通过，为0则表示验证失败。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305170100384.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验滑块验证码新思路</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E6%96%B0%E6%80%9D%E8%B7%AF/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E6%96%B0%E6%80%9D%E8%B7%AF/</id>
    <published>2023-05-16T17:07:47.000Z</published>
    <updated>2023-05-23T07:17:39.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li>目标：极验滑块验证码逆向</li><li>主页：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li><li>接口：<a href="https://api.geetest.com/ajax.php">https://api.geetest.com/ajax.php</a></li><li>逆向参数：<ul><li>Get Param<ul><li>gt: f5c10f395211c77e386566112c6abf21</li><li>challenge: 156aa94ea88422263a3e9653f49dea52ln</li><li>w: 太长，略</li><li>callback: geetest_1683637194585</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>把要做的事情拆分为几个步骤，分别为梳理请求关系，滑块验证码底图还原，滑块验证码w参数逆向，补环境，自动过验证码。</p><h3 id="请求关系梳理"><a href="#请求关系梳理" class="headerlink" title="请求关系梳理"></a>请求关系梳理</h3><h4 id="请求罗列"><a href="#请求罗列" class="headerlink" title="请求罗列"></a>请求罗列</h4><ul><li><p>第一个请求：<code>https://napi-huawei.tianyancha.com/validate/init?_=1683636853751</code></p><p>入参：当前时间戳；</p><p>返回值：gt和challenge。</p></li><li><p>第二个请求：<code>https://api.geevisit.com/gettype.php?</code></p><p>入参：第一个请求得到的gt和一个由时间戳拼接成的固定的参数callback；</p><p>返回值：验证码的类型及其相关的资源文件。</p></li><li><p>第三个请求：<code>https://api.geevisit.com/get.php?</code></p><p>入参：gt，challenge，callback以及第二个请求得到的资源文件信息。</p><p>返回值：新的challenge，带缺口的乱序错位验证码底图，不带缺口的乱序错位验证码底图以及滑块图</p></li><li><p>第四个请求：<code>https://api.geetest.com/ajax.php?</code></p><p>入参：gt，新的challenge，w值，callback</p><p>返回值：滑块验证码是否验证通过</p></li></ul><h4 id="关系梳理"><a href="#关系梳理" class="headerlink" title="关系梳理"></a>关系梳理</h4><p>为了描述方便分别把第一至四个请求命名为A~D。A从天眼查服务端拿到一个gt和challenge，B用拿到的gt，challenge以及当前时间戳向极验服务器请求并拿到验证码js文件，C利用B拿到的资源文件信息以及gt，challenge去请求极验服务器拿到滑块验证码带缺口和不带缺口的乱序底图，这些底图经过前段js文件渲染就呈现出我们看到的滑块验证码的样子；D请求通过传入gt，challenge，w值和callback请求极验服务器完成对滑块验证码的验证。</p><h3 id="滑块验证码底图还原与滑动距离计算"><a href="#滑块验证码底图还原与滑动距离计算" class="headerlink" title="滑块验证码底图还原与滑动距离计算"></a>滑块验证码底图还原与滑动距离计算</h3><h4 id="底图还原"><a href="#底图还原" class="headerlink" title="底图还原"></a>底图还原</h4><p>要想计算滑块需要移动的距离，就需要先将乱序的验证码图片变成有序。</p><p>先看下滑块的大小：</p><img src="https://raw.githubusercontent.com/beyond-heshipeng/blg-pic/main/pic/202204201632353.png?watermark/2/text/5YWz5rOo5b6u5L-h5YWs5LyX5Y-377ya6YCG5ZCR5LiA5q2l5q2l/font/5a6L5L2T/fontsize/300" alt="image-20220420163229256" style="zoom:50%;" /><p>图片大小 w &#x3D; 260px, h &#x3D; 116px。我们点击图片选择审查元素，可以看到底图是由52个div组成，每个div的w &#x3D; 10px，h &#x3D; 58px。分为上下两个半区，每个半区26个div。刚好组成260px * 116px的矩形验证码。如下图：</p><img src="https://raw.githubusercontent.com/beyond-heshipeng/blg-pic/main/pic/202204201636328.png?watermark/2/text/5YWz5rOo5b6u5L-h5YWs5LyX5Y-377ya6YCG5ZCR5LiA5q2l5q2l/font/5a6L5L2T/fontsize/300" alt="image-20220420163621256" style="zoom: 35%;" /><p>可以看到第一个div，即上半区左上角的第一个div，background-position &#x3D; -157px -58px。表示将background-image向左偏移157个像素，向上偏移58个像素，作为第一个div放在上半区最左边。由于前面分析过，每个div的宽是10px，高是58px。所以第一个div四个顶点在background-image上的相对坐标是(157, 58), (167, 58), (157, 116), (167, 116)。</p><p>同理，我们推测上半区第二个div的四个顶点的相对坐标分别是(145, 0), (155, 0), (145, 58), (155, 58)。</p><p>此外，background-image就是我们抓包分析的第三步获取到的乱序图。</p><p>知道了每一个个div的坐标，以及乱序的背景图，就可以通过从乱序图上裁剪出一个个div，然后再拼接到一起，这样不就构成了正确有序的图片。</p><p>知道了原理，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">div_offset = [</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">157</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    <span class="comment"># 省略若干行</span></span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">205</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restore_pic</span>(<span class="params">pic_path, new_pic_path</span>):</span><br><span class="line">    unordered_pic = Image.<span class="built_in">open</span>(pic_path)</span><br><span class="line">    ordered_pic = unordered_pic.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裁剪并拼接</span></span><br><span class="line">    <span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(div_offset):</span><br><span class="line">        im = unordered_pic.crop((math.fabs(d[<span class="string">&#x27;x&#x27;</span>]), math.fabs(d[<span class="string">&#x27;y&#x27;</span>]), math.fabs(d[<span class="string">&#x27;x&#x27;</span>]) + <span class="number">10</span>, math.fabs(d[<span class="string">&#x27;y&#x27;</span>]) + <span class="number">58</span>))</span><br><span class="line">        <span class="comment"># 上半区</span></span><br><span class="line">        <span class="keyword">if</span> d[<span class="string">&#x27;y&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">0</span>), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">58</span>), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    ordered_pic.save(new_pic_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    restore_pic(<span class="string">&quot;img.png&quot;</span>, <span class="string">&quot;new_img.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>解释一下上面用到的PIL库的几个方法：copy表示复制一张图片；crop表示以矩形区域裁剪，入参是一个四个元素的元组，分别是矩形左上角顶点的x坐标，左上角顶点的y坐标，右下角顶点的x坐标，右下角顶点的y坐标；paste表示粘贴图片。</p><p>测试效果如下：</p><p>不带缺口的乱序背景图以及还原后的图片：</p><p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121455248.jpg" alt="不带缺口的乱序背景图"><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121457563.jpg" alt="new_1"></p><p>带缺口的乱序背景图以及还原后的图片：</p><p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121507601.jpg" alt="2"><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121508668.jpg" alt="new_2"></p><p>还原图后边依然存在乱序的部分，但是这些乱序的地方已经超出260px，实际上不会展示到页面上，也即没有影响。</p><h4 id="计算滑动距离"><a href="#计算滑动距离" class="headerlink" title="计算滑动距离"></a>计算滑动距离</h4><p>既然底图已经还原了，接下来就是缺口位置的计算，从而得到滑块需要滑动的距离。缺口计算有2种方式，一种是采用深度模型识别缺口坐标，参考文章<a href="https://lyy077.github.io/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BC%BA%E5%8F%A3%E4%BD%8D%E7%BD%AE/">如何利用深度学习识别滑块验证码缺口位置</a>。</p><p>第二种是计算图片的每个像素点位置的色差去判断缺口，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">diff_rgb</span>(<span class="params">rgb1, rgb2</span>):</span><br><span class="line">    <span class="keyword">return</span> math.fabs(rgb1[<span class="number">0</span>] - rgb2[<span class="number">0</span>]) + math.fabs(rgb1[<span class="number">1</span>] - rgb2[<span class="number">1</span>]) + math.fabs(rgb1[<span class="number">2</span>] - rgb2[<span class="number">2</span>]) &gt; <span class="number">255</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_moving_dst</span>(<span class="params">complete_pic_path, incomplete_pic_path</span>):</span><br><span class="line">    complete_pic = Image.<span class="built_in">open</span>(complete_pic_path)</span><br><span class="line">    incomplete_pic = Image.<span class="built_in">open</span>(incomplete_pic_path)</span><br><span class="line"></span><br><span class="line">    w, h = complete_pic.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h):</span><br><span class="line">            complete_pic_pixel_rgb = complete_pic.getpixel((i, j))</span><br><span class="line">            incomplete_pic_pixel_rgb = incomplete_pic.getpixel((i, j))</span><br><span class="line">            <span class="keyword">if</span> diff_rgb(complete_pic_pixel_rgb, incomplete_pic_pixel_rgb):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="w参数逆向与滑块轨迹模拟"><a href="#w参数逆向与滑块轨迹模拟" class="headerlink" title="w参数逆向与滑块轨迹模拟"></a>w参数逆向与滑块轨迹模拟</h3><p>首先对geetest.6.0.9.js这个文件进行反混淆，将二进制数字转化为十进制数，将base64编码的字符串转化为ASCII码字符，最后将字面量还原。将Js文件进行反混淆处理后在浏览器中进行override，覆盖线上版本，进行本地调试。</p><h4 id="w参数逆向"><a href="#w参数逆向" class="headerlink" title="w参数逆向"></a>w参数逆向</h4><p>前面分析过，最终向极验后端提交的四个参数中，gt和challenge都是通过其它接口返回的，callback参数是当前时间戳生成的，只有w参数需要逆向。</p><p>全局搜索<code>&quot;w&quot;:</code>，发现如下代码：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305142101981.png" alt="image-20230514210118875" style="zoom: 67%;" /><p>可以看到，w是由r7z和H7z拼接而成。</p><h5 id="逆向r7z"><a href="#逆向r7z" class="headerlink" title="逆向r7z"></a>逆向r7z</h5><p>整理下代码逻辑如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r7z = p7B.<span class="title class_">Ha</span>(n0B.<span class="title function_">encrypt</span>(h7B.<span class="title function_">stringify</span>(Y7z), v7z.<span class="title function_">wb</span>()))</span><br></pre></td></tr></table></figure><p>先看最里面的，全局搜索wb，发现wb实际上调用的是C7B方法，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305142135040.png" alt="image-20230514213545968" style="zoom:67%;" /><p>再全局搜索下C7B(搜索的时候注意区分大小写，这样排除了很多干扰项)，发现C7B实际上是四次调用H1W方法，并把四次返回结果拼接在一起，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305142138981.png" alt="image-20230514213850874" style="zoom:67%;" /><p>再看下H1W方法的源码，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305142140806.png" alt="image-20230514214049697" style="zoom:67%;" /><p>不再调用其它封装的方法，综上，整理出来wb方法，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">H1W</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">65536</span> * (<span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>()) | <span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">substring</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wb = <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>();</span><br></pre></td></tr></table></figure><p>然后是h7B.stringify，经过测试，h7B.stringify这个方法的作用等同于JSON.stringify。</p><p>接着看下n0B.encrypt，定位到代码如图所示：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150131419.png" alt="image-20230515013105304" style="zoom:67%;" /><p>传入的三个参数，第一个r7W是JSON.stringify(Y7z)，第二个m7W是随机的字符串即上边的wb，第三个变量P7W未使用。简单分析下代码，不难看出这个encrypt方法实际上是对AES加密算法做了一个封装，然后自定义了一些逻辑。其中，m7W用作生成key，0000000000000000用作生成iv。</p><p>代码修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Encrypt</span>(<span class="params">word, key, iv</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(word);</span><br><span class="line">    <span class="keyword">let</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(srcs, key, &#123; <span class="attr">iv</span>: iv, <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>, <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="property">ciphertext</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">r7W, m7W, P7W</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> p2r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(m7W);</span><br><span class="line">    <span class="keyword">const</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&#x27;0000000000000000&#x27;</span>);   <span class="comment">//十六位十六进制数作为密钥偏移量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> <span class="variable constant_">W7W</span> = <span class="title class_">Encrypt</span>(r7W, key, iv), <span class="variable constant_">Z7W</span> = <span class="variable constant_">W7W</span>.<span class="property">words</span>, <span class="variable constant_">H7W</span> = <span class="variable constant_">W7W</span>.<span class="property">sigBytes</span>, d7W = [], l7W = <span class="number">0</span>; p2r * (p2r + <span class="number">1</span>) * p2r % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; l7W &lt; <span class="variable constant_">H7W</span>; l7W++) &#123;</span><br><span class="line">        <span class="keyword">var</span> q7W = <span class="variable constant_">Z7W</span>[l7W &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - l7W % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        d7W[<span class="string">&quot;push&quot;</span>](q7W);</span><br><span class="line">        p2r = p2r &gt; <span class="number">33997</span> ? p2r / <span class="number">5</span> : p2r * <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d7W;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码用到了<code>crypto-js</code>包，需要用命令<code>npm install crypto-js</code>安装。</p><p>再接着看下p7B.Ha这个方法，代码如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150146459.png" alt="image-20230515014645346" style="zoom: 67%;" /><p>Ha调用T6B.Ga方法，跟进去：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150149642.png" alt="image-20230515014959508" style="zoom:50%;" /><p>代码如图，直接抠出来整个Ga代码，只不过图中圈出的this在node环境中需要补一下，经过调试，this中包含如下的方法和值友用到：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150153931.png" alt="image-20230515015327784" style="zoom:50%;" /><p>经过流程平坦化之后，完整代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ga</span> = <span class="keyword">function</span> (<span class="params">o6B, t6B</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> D5r = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">var</span> I9z = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">X6B</span> = &#123;</span><br><span class="line">        <span class="string">&quot;wa&quot;</span>: <span class="number">7274496</span>,</span><br><span class="line">        <span class="string">&quot;xa&quot;</span>: <span class="number">9483264</span>,</span><br><span class="line">        <span class="string">&quot;ya&quot;</span>: <span class="number">19220</span>,</span><br><span class="line">        <span class="string">&quot;za&quot;</span>: <span class="number">235</span>,</span><br><span class="line">        <span class="string">&quot;Aa&quot;</span>: <span class="number">24</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable constant_">X6B</span>.<span class="property">Da</span> = <span class="keyword">function</span>(<span class="params">r0B</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> v9z = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> h0B = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789()&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (r0B &lt; <span class="number">0</span> || r0B &gt;= h0B[<span class="string">&quot;length&quot;</span>]) &amp;&amp; v9z * (v9z + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">8</span> ? <span class="string">&quot;.&quot;</span> : h0B[<span class="string">&quot;charAt&quot;</span>](r0B);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable constant_">X6B</span>.<span class="property">Fa</span> = <span class="keyword">function</span>(<span class="params">R0B, C0B</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable constant_">R0B</span> &gt;&gt; <span class="variable constant_">C0B</span> &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    t6B || (t6B = <span class="variable constant_">X6B</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">N6B</span> = <span class="keyword">function</span> (<span class="params">Q6B, x6B</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable constant_">I6B</span> = <span class="number">0</span>, v6B = t6B[<span class="string">&quot;Aa&quot;</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (v6B &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v6B &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="number">1</span> === <span class="variable constant_">X6B</span>[<span class="string">&quot;Fa&quot;</span>](x6B, v6B) &amp;&amp; (<span class="variable constant_">I6B</span> = (<span class="variable constant_">I6B</span> &lt;&lt; <span class="number">1</span>) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Fa&quot;</span>](<span class="variable constant_">Q6B</span>, v6B));</span><br><span class="line">                v6B -= <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable constant_">I6B</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable constant_">I6B</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    j6B = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="variable constant_">K6B</span> = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    c6B = o6B[<span class="string">&quot;length&quot;</span>],</span><br><span class="line">    f6B = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (f6B &lt; c6B &amp;&amp; I9z * (I9z + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable constant_">B6B</span>;</span><br><span class="line">        <span class="keyword">if</span> (f6B + <span class="number">2</span> &lt; c6B) &#123;</span><br><span class="line">            <span class="variable constant_">B6B</span> = (o6B[f6B] &lt;&lt; <span class="number">16</span>) + (o6B[f6B + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + o6B[f6B + <span class="number">2</span>], j6B += <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;wa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;xa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;ya&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;za&quot;</span>]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> n6B = c6B % <span class="number">3</span>;</span><br><span class="line">            <span class="number">2</span> === n6B ? (<span class="variable constant_">B6B</span> = (o6B[f6B] &lt;&lt; <span class="number">16</span>) + (o6B[f6B + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>), j6B += <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;wa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;xa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;ya&quot;</span>])), <span class="variable constant_">K6B</span> = t6B[<span class="string">&quot;r&quot;</span>]) : <span class="number">1</span> === n6B &amp;&amp; (<span class="variable constant_">B6B</span> = o6B[f6B] &lt;&lt; <span class="number">16</span>, j6B += <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;wa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;xa&quot;</span>])), <span class="variable constant_">K6B</span> = t6B[<span class="string">&quot;r&quot;</span>] + t6B[<span class="string">&quot;r&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        I9z = I9z &gt; <span class="number">53617</span> ? I9z - <span class="number">7</span> : I9z + <span class="number">7</span>;</span><br><span class="line">        f6B += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;res&quot;</span>: j6B,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>: <span class="variable constant_">K6B</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Ha</span> = <span class="keyword">function</span> (<span class="params">M6B</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">L6B</span> = <span class="title class_">Ga</span>(<span class="variable constant_">M6B</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">L6B</span>[<span class="string">&quot;res&quot;</span>] + <span class="variable constant_">L6B</span>[<span class="string">&quot;end&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后看下压轴部分，Y7z的代码：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150510333.png" alt="image-20230515051007195" style="zoom:67%;" /><p>可以看到Y7z的属性有userresponse, passtime, imgload, aa, ep, rp。</p><p>先看下i7B.C方法，直接将这个方法扣下来拿来用即可，在node中测试不需要补环境。</p><p>接着看下c7B[“a”]这个方法，实际上是取得c7B[“Na”]这个对象的属性，为了方便跟踪这个对象，在浏览器watch栏中添加这个对象，然后给滑块添加一个断点，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305151447578.png" alt="image-20230515144736431" style="zoom: 50%;" /><p>拖动滑块，进入单步调试，调试结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305151438513.png" alt="image-20230515143849349" style="zoom: 50%;" /><p>可以看到c7B[“Na”]对象的相关属性来自于L7z这个光标事件。其中有一个数组arr，里面每一个元素都是一个三维向量，分别代表x轴坐标，y轴坐标和经过的时间，这个数组即用来保存滑块的移动轨迹。</p><p>其中passtime是滑块滑动所需的时间，可以由轨迹数组计算出来。ep是版本号，这里写死为<code>&#123;v: &quot;6.0.9&quot;&#125;</code>即可。aa则是由轨迹数组经过加密生成的字符串。imgload是加载的图片数量，经过测试，给一个随机值即可。userresponse是调用i7B[“C”]生成的，这个方法已经扣下来了，参数g7z和challenge，challenge是由接口返回，所以只需要计算g7z即可。</p><p>经过调试，passtime和g7z的计算方法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passtime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> g7z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; X1z.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    passtime += X1z[index][<span class="number">2</span>];</span><br><span class="line">    g7z += X1z[index][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">g7z -= X1z[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>紧接着看下aa，断点进入，代码如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305151549318.png" alt="image-20230515154908221" style="zoom:67%;" /><p>整理下这个t方法，并且抠出其调用的方法，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">O6z = <span class="keyword">function</span> (<span class="params">r6z</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> d6z = <span class="string">&quot;()*,-./0123456789:?@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqr&quot;</span>,</span><br><span class="line">        m6z = d6z[<span class="string">&quot;length&quot;</span>],</span><br><span class="line">        Z6z = <span class="string">&quot;&quot;</span>,</span><br><span class="line">        H6z = <span class="title class_">Math</span>[<span class="string">&quot;abs&quot;</span>](r6z),</span><br><span class="line">        W6z = <span class="built_in">parseInt</span>(H6z / m6z);</span><br><span class="line">    W6z &gt;= m6z &amp;&amp; (W6z = m6z - <span class="number">1</span>), W6z &amp;&amp; (Z6z = d6z[<span class="string">&quot;charAt&quot;</span>](W6z)), H6z %= m6z;</span><br><span class="line">    <span class="keyword">var</span> q6z = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> r6z &lt; <span class="number">0</span> &amp;&amp; (q6z += <span class="string">&quot;!&quot;</span>), Z6z &amp;&amp; (q6z += <span class="string">&quot;$&quot;</span>), q6z + Z6z + d6z[<span class="string">&quot;charAt&quot;</span>](H6z);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u6z = <span class="keyword">function</span> (<span class="params">R6z</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t8r = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">var</span> f5r = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">var</span> z6z = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">0</span>], [<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">3</span>, <span class="number">0</span>], [<span class="number">2</span>, -<span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>]],</span><br><span class="line">        h6z = <span class="number">0</span>,</span><br><span class="line">        C6z = z6z[<span class="string">&quot;length&quot;</span>];</span><br><span class="line">    <span class="keyword">while</span> (h6z &lt; C6z &amp;&amp; f5r * (f5r + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (R6z[<span class="number">0</span>] === z6z[h6z][<span class="number">0</span>] &amp;&amp; R6z[<span class="number">1</span>] === z6z[h6z][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;stuvwxyz~&quot;</span>[h6z];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f5r = f5r &gt;= <span class="number">62252</span> ? f5r - <span class="number">6</span> : f5r + <span class="number">6</span>;</span><br><span class="line">            h6z++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">function</span> (<span class="params">X1z</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o5r = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">var</span> N1z,</span><br><span class="line">        f1z = [],</span><br><span class="line">        B1z = [],</span><br><span class="line">        o1z = [],</span><br><span class="line">        t1z = <span class="number">0</span>,</span><br><span class="line">        j1z = X1z[<span class="string">&quot;length&quot;</span>];</span><br><span class="line">    <span class="keyword">while</span> (o5r * (o5r + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">8</span> &amp;&amp; t1z &lt; j1z) &#123;</span><br><span class="line">        N1z = <span class="title function_">u6z</span>(X1z[t1z]), N1z ? B1z[<span class="string">&quot;push&quot;</span>](N1z) : (f1z[<span class="string">&quot;push&quot;</span>](<span class="title function_">O6z</span>(X1z[t1z][<span class="number">0</span>])), B1z[<span class="string">&quot;push&quot;</span>](<span class="title function_">O6z</span>(X1z[t1z][<span class="number">1</span>]))), o1z[<span class="string">&quot;push&quot;</span>](<span class="title function_">O6z</span>(X1z[t1z][<span class="number">2</span>]));</span><br><span class="line">        o5r = o5r &gt;= <span class="number">17705</span> ? o5r / <span class="number">3</span> : o5r * <span class="number">3</span>;</span><br><span class="line">        t1z++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f1z[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>) + <span class="string">&quot;!!&quot;</span> + B1z[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>) + <span class="string">&quot;!!&quot;</span> + o1z[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>t方法调用传入的X1z就是滑块滑动产生的轨迹数组。</p><p>这里调试会发现，生成的aa与页面上的不一致，实际上F7z除了由上边的t方法修改之外，还有一个地方也修改了，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305160007452.png" alt="image-20230516000744285" style="zoom:67%;" /><p>调用了e7B.u方法，接收3个参数，第一个是上面t方法生成的初步的F7z，第二个是c，第三个是s，其中c和s都是通过接口拿到。所以这里的重点工作是抠出e7B.u方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e7B = &#123;&#125;;</span><br><span class="line">e7B.<span class="property">u</span> = <span class="keyword">function</span> (<span class="params">Q1z, v1z, T1z</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> K5r = <span class="number">2</span>, j5r = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> ((!v1z || !T1z) &amp;&amp; j5r * (j5r + <span class="number">1</span>) * j5r % <span class="number">2</span> === <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> Q1z;</span><br><span class="line">    <span class="keyword">var</span> i1z, x1z = <span class="number">0</span>, c1z = Q1z, y1z = v1z[<span class="number">0</span>], k1z = v1z[<span class="number">2</span>], L1z = v1z[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">while</span> ((i1z = T1z[<span class="string">&quot;substr&quot;</span>](x1z, <span class="number">2</span>)) &amp;&amp; K5r * (K5r + <span class="number">1</span>) * K5r % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        x1z += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> n1z = <span class="built_in">parseInt</span>(i1z, <span class="number">16</span>),</span><br><span class="line">            M1z = <span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](n1z),</span><br><span class="line">            I1z = (y1z * n1z * n1z + k1z * n1z + L1z) % Q1z[<span class="string">&quot;length&quot;</span>];</span><br><span class="line">        c1z = c1z[<span class="string">&quot;substr&quot;</span>](<span class="number">0</span>, I1z) + M1z + c1z[<span class="string">&quot;substr&quot;</span>](I1z);</span><br><span class="line">        K5r = K5r &gt; <span class="number">10375</span> ? K5r / <span class="number">8</span> : K5r * <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c1z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后看下rp属性，不难看出rp是由gt，challenge的前32位，passtime经过md5加密算法生成。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> md5 = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line">Y7z[<span class="string">&quot;rp&quot;</span>] = md5.<span class="title function_">update</span>(gt + challenge.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">32</span>) + passtime).<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br></pre></td></tr></table></figure><p>至此，w参数的前半部分r7z剖析完了。</p><h5 id="逆向H7z"><a href="#逆向H7z" class="headerlink" title="逆向H7z"></a>逆向H7z</h5><p>进入断点调试，可以看到H7z是调用V7z.Ub方法生成。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305152250030.png" alt="image-20230515225024832" style="zoom:67%;" /><p>抠出V7z.Ub方法，并补全其中用到的RSA算法，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> jsbn <span class="keyword">import</span> <span class="title class_">RSAKey</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_">get_H7z</span>(wb):</span><br><span class="line">    rsa = <span class="title class_">RSAKey</span>()</span><br><span class="line">    rsa.<span class="title function_">setPublic</span>(<span class="string">&quot;00C1E3934D1614465B33053E7F48EE4EC87B14B95EF88947713D25EECBFF7E74C7977D02DC1D9451F79DD&quot;</span></span><br><span class="line">                  <span class="string">&quot;5D1C10C29ACB6A9B4D6FB7D0A0279B6719E1772565F09AF627715919221AEF91899CAE08C0D686D748B20&quot;</span></span><br><span class="line">                  <span class="string">&quot;A3603BE2318CA6BC2B59706592A9219D0BF05C9F65023A21D2330807252AE0066D59CEEFA5F2748EA80BAB81&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10001&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rsa.<span class="title function_">encrypt</span>(wb)</span><br></pre></td></tr></table></figure><p>代码说明：需要安装RSA库，用<code>pip install pyjsbn-rsa</code>命令安装即可，因为没有找到合适的Node库，所以采用Python库。其中的RSA public key相关信息单步调试的时候可以拿到，wb是一个随机生成的字符串，产生随机字符串的代码在r7z部分已经逆向完成。<strong>特别注意：r7z和H7z通过这个随机字符串关联起来，生成r7z和H7z用到的随机字符串必须是同一个，所以wb最好定义为全局变量，并且全局生成一次。</strong></p><h4 id="滑块轨迹模拟"><a href="#滑块轨迹模拟" class="headerlink" title="滑块轨迹模拟"></a>滑块轨迹模拟</h4><p>极验滑块的轨迹主要有三种方式，一种是直接用网上现有的滑动轨迹模型，另一种是自己搭建模型自己训练。这里介绍第三种，手动滑动滑块得到正确的拼图，同时保存滑块轨迹，数据结构采用key-value形式，key是滑块需要的滑动的距离，value是轨迹数组，通过上百次的滑动，预先建立一个轨迹字典，下次滑动时通过距离从这个字典中直接拿到轨迹数组。</p><p>具体实现如下：</p><ol><li>用Flask搭建一个轨迹收集服务</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> cross_origin</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/track&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@cross_origin(<span class="params">supports_credentials=<span class="literal">True</span>, methods=<span class="string">&quot;*&quot;</span>, allow_headers=<span class="string">&quot;*&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@cross_origin()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">track</span>():</span><br><span class="line">    tracks = pickle.load(<span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line">    d = json.loads(request.data.decode())</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载乱序的缺口图和完整图</span></span><br><span class="line">    download_image(d[<span class="string">&#x27;bg&#x27;</span>], <span class="string">&quot;bg.png&quot;</span>)</span><br><span class="line">    download_image(d[<span class="string">&#x27;fullbg&#x27;</span>], <span class="string">&quot;fullbg.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 还原乱序的缺口图和完整图</span></span><br><span class="line">    restore_pic(<span class="string">&quot;bg.png&quot;</span>, <span class="string">&quot;new_bg.png&quot;</span>)</span><br><span class="line">    restore_pic(<span class="string">&quot;fullbg.png&quot;</span>, <span class="string">&quot;new_fullbg.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取缺口的位置</span></span><br><span class="line">    x = get_moving_dst(<span class="string">&quot;new_bg.png&quot;</span>, <span class="string">&quot;new_fullbg.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tracks.get(x):</span><br><span class="line">        tracks[x].append(&#123;<span class="string">&#x27;track&#x27;</span>: d[<span class="string">&#x27;track&#x27;</span>], <span class="string">&#x27;g7z&#x27;</span>: d[<span class="string">&#x27;g7z&#x27;</span>]&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tracks[x] = [&#123;<span class="string">&#x27;track&#x27;</span>: d[<span class="string">&#x27;track&#x27;</span>], <span class="string">&#x27;g7z&#x27;</span>: d[<span class="string">&#x27;g7z&#x27;</span>]&#125;]</span><br><span class="line">    pickle.dump(tracks, <span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;wb&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">url, image_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(requests.get(url).content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    track_data = &#123;&#125;</span><br><span class="line">    pickle.dump(track_data, <span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;wb&quot;</span>))</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8088</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>注入Js代码</li></ol><p>注入Js代码，每次滑动时向收集服务发送请求，将轨迹数组传递过去。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Http</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="keyword">const</span> url=<span class="string">&#x27;http://127.0.0.1:8088/track&#x27;</span>;</span><br><span class="line"><span class="title class_">Http</span>.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, url);</span><br><span class="line"><span class="title class_">Http</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求成功, track: &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(X1z));</span><br><span class="line"><span class="comment">// 请求结束后,在此处写处理代码</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Http</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line"><span class="attr">track</span>: X1z,</span><br><span class="line">    <span class="attr">bg</span>: <span class="regexp">/\&quot;(.*?)\&quot;/g</span>.<span class="title function_">exec</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;gt_cut_bg_slice&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundImage</span>)[<span class="number">1</span>],</span><br><span class="line"><span class="attr">fullbg</span>: <span class="regexp">/\&quot;(.*?)\&quot;/g</span>.<span class="title function_">exec</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;gt_cut_fullbg_slice&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundImage</span>)[<span class="number">1</span>],</span><br><span class="line">    g7z</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>代码插入位置如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204281558130.png" alt="image-20220428155854981" style="zoom: 50%;" /><p>通过手动过滑块就可以把轨迹数组收集到tracks.pkl文件了。</p><h3 id="完整代码测试及总结"><a href="#完整代码测试及总结" class="headerlink" title="完整代码测试及总结"></a>完整代码测试及总结</h3><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305170053416.png" alt="image-20230517005330218" style="zoom: 33%;" /><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>极验滑块之前发过相关的文章了，当时用到的方法是将整个Js文件抠下来然后补环境，整个代码有大几千行，这次换了个思路，只是抠调用到的代码，整个下来也就300行左右。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305170100384.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>如何利用深度学习识别滑块验证码缺口位置</title>
    <link href="http://example.com/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BC%BA%E5%8F%A3%E4%BD%8D%E7%BD%AE/"/>
    <id>http://example.com/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BC%BA%E5%8F%A3%E4%BD%8D%E7%BD%AE/</id>
    <published>2023-05-12T09:15:57.000Z</published>
    <updated>2023-05-24T13:44:40.422Z</updated>
    
    <content type="html"><![CDATA[<p>极验滑块验证码缺口位置的计算有2种方式，第一种通过计算像素点差值来定位缺口位置，在<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%A4%A9%E7%9C%BC%E6%9F%A5%E8%BF%87%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81/">JS逆向案例——天眼查过极验滑块验证码</a>一文中介绍过，今天这篇文章介绍第二种方式，如何利用深度学习识别缺口的位置。这里采用华为云<strong>ModelArts</strong>云服务去训练缺口识别模型。</p><h3 id="数据集的准备"><a href="#数据集的准备" class="headerlink" title="数据集的准备"></a>数据集的准备</h3><h4 id="收集验证码图片"><a href="#收集验证码图片" class="headerlink" title="收集验证码图片"></a>收集验证码图片</h4><p>先上代码，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">div_offset = [</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">157</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">145</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">265</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">277</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">181</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">169</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">241</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">253</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">109</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">97</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">289</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">301</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">85</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">73</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">25</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">37</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">13</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">121</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">133</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">61</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">49</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">217</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">229</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">205</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">193</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">145</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">157</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">277</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">265</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">169</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">181</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">253</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">241</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">97</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">109</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">301</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">289</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">73</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">85</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">37</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">25</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">13</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">133</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">121</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">49</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">61</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">229</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">217</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">193</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">205</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_pic</span>(<span class="params">pic_path, new_pic_path</span>):</span><br><span class="line">    unordered_pic = Image.<span class="built_in">open</span>(pic_path)</span><br><span class="line">    ordered_pic = unordered_pic.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裁剪并拼接</span></span><br><span class="line">    <span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(div_offset):</span><br><span class="line">        im = unordered_pic.crop((math.fabs(d[<span class="string">&#x27;x&#x27;</span>]), math.fabs(d[<span class="string">&#x27;y&#x27;</span>]), math.fabs(d[<span class="string">&#x27;x&#x27;</span>]) + <span class="number">10</span>, math.fabs(d[<span class="string">&#x27;y&#x27;</span>]) + <span class="number">58</span>))</span><br><span class="line">        <span class="comment"># 上半区</span></span><br><span class="line">        <span class="keyword">if</span> d[<span class="string">&#x27;y&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">0</span>), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">58</span>), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    ordered_pic.save(new_pic_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_pic</span>(<span class="params">store_name</span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://www.tianyancha.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.tianyancha.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-site&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;(KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-TYCID&#x27;</span>: <span class="string">&#x27;70c68810ddbd11eda0a455532f9618b6&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;112&quot;, &quot;Google Chrome&quot;;v=&quot;112&quot;, &quot;Not:A-Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;_&#x27;</span>: <span class="string">&#x27;1683799958183&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://napi-huawei.tianyancha.com/validate/init&#x27;</span>, params=params, headers=headers)</span><br><span class="line">    resp = json.loads(response.text)</span><br><span class="line">    data = json.loads(resp[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    gt = data[<span class="string">&#x27;gt&#x27;</span>]</span><br><span class="line">    challenge = data[<span class="string">&#x27;challenge&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.tianyancha.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;cross-site&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;Chrome/112.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;112&quot;, &quot;Gostiogle Chrome&quot;;v=&quot;112&quot;, &quot;Not:A-Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(</span><br><span class="line">        <span class="string">f&#x27;https://api.geevisit.com/get.php?gt=<span class="subst">&#123;gt&#125;</span>&amp;challenge=<span class="subst">&#123;challenge&#125;</span>&amp;product=popup&amp;offline=false&amp;&#x27;</span></span><br><span class="line">        <span class="string">f&#x27;api_server=api.geevisit.com&amp;protocol=https://&amp;type=slide&amp;path=/static/js/geetest.6.0.9.js&#x27;</span></span><br><span class="line">        <span class="string">f&#x27;&amp;callback=geetest_<span class="subst">&#123;<span class="built_in">str</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))&#125;</span>&#x27;</span>,</span><br><span class="line">        headers=headers,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    bg_url = urljoin(<span class="string">&quot;https://static.geetest.com/&quot;</span>, re.findall(<span class="string">&quot;\&quot;bg\&quot;: \&quot;(.*?)\&quot;&quot;</span>, response.text)[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;下载验证码图片，地址：&quot;</span> + bg_url)</span><br><span class="line">    resp = requests.get(bg_url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(store_name, <span class="string">&quot;wb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(resp.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        name = <span class="string">&quot;input/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        download_pic(name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;保存乱序验证码图片，保存位置：&quot;</span> + name)</span><br><span class="line">        new_name = <span class="string">&quot;output/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        recover_pic(name, new_name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;还原乱序验证码图片，保存位置：&quot;</span> + new_name)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>解释主要用到的2个方法，<code>download_pic</code>下载乱序的验证码图片，<code>recover_pic</code>还原乱序的验证码图片。关于下载验证码的请求逻辑，参考<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E5%BA%95%E5%9B%BE%E8%BF%98%E5%8E%9F/">JS逆向案例——极验滑块验证码底图还原</a>。</p><p>运行效果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121752382.png" alt="image-20230512175231221" style="zoom:50%;" /><p>下载好图片后，将图片上传到华为云对象存储，具体方法可以自行网上查阅。这里下载并上传了100张图片。</p><h4 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h4><p>通过网址<code>https://console.huaweicloud.com/modelarts/?region=cn-north-4#/dashboard</code>打开<strong>ModelArts</strong>主界面，然后点击主动学习：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121808453.png" alt="image-20230512180852319" style="zoom: 33%;" /><p>可以看到ModelArts支持的全部功能，这里选择第二个物体检测，点击创建项目：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121810001.png" alt="image-20230512181042875" style="zoom:33%;" /><p>项目名称和数据集名称可以采用自动生成的，数据集输入位置填刚才上传验证码的那个bucket的目录，数据集输出位置就在此bucket下新建一个空目录即可。最后点击创建项目。</p><p>然后点击未标注：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121815728.png" alt="image-20230512181548602" style="zoom:33%;" /><p>接着随意点击一张未标注的图片，对图片进行标注：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121816523.png" alt="标注1" style="zoom:33%;" /><p>标注完成之后，后边会显示缺口相对于背景图的坐标：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121817355.png" alt="标注2" style="zoom:33%;" /><p>标注完成之后点击选择下一张标注，数据集一共100张，大概10多分钟标注完。</p><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>数据集标注完之后，点击开始训练：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121820363.png" alt="开始训练" style="zoom:33%;" /><p>然后会提示模型训练中：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121821223.png" alt="训练中" style="zoom:33%;" /><p>数据集样本比较少，训练大概5-10分钟，完成后界面如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121823354.png" alt="训练完成" style="zoom:33%;" /><p>注意：之所以准确率只有94%，有2个原因，一是样本数量少；二是数据标注为了节约时间没有太细致。改善这2点原因让准确率接近100%不是不可能。</p><h3 id="模型部署"><a href="#模型部署" class="headerlink" title="模型部署"></a>模型部署</h3><p>点击部署按钮：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121825554.png" alt="部署" style="zoom:33%;" /><p>直接点击下一步即可。</p><h3 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h3><p>上传一张图片测试：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121828023.png" alt="预测测试" style="zoom:33%;" /><p>可以看到缺口位置基本识别正确。</p><p>再上传一张带干扰的图片测试：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121829716.png" alt="带干扰的预测" style="zoom:33%;" /><p>也正确识别。</p><p>至此，完结撒花。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;极验滑块验证码缺口位置的计算有2种方式，第一种通过计算像素点差值来定位缺口位置，在&lt;a href=&quot;https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%A4</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="云服务" scheme="http://example.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向之浏览器内存漫游解决方案</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2023-04-12T14:40:21.000Z</published>
    <updated>2023-05-19T13:53:10.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器内存漫游"><a href="#浏览器内存漫游" class="headerlink" title="浏览器内存漫游"></a>浏览器内存漫游</h3><p>所谓浏览器内存漫游就是通过内存中变量级别的抓包监控，把浏览器中js加载过程中的变量值全部存储下来，从而达到可以随意检索浏览器内存中的数据。</p><p>有了浏览器内存漫游，就可以通过某个接口的变量的值反查变量生成的地方，从而快速定位接口参数，这在JS逆向这一块非常方便。</p><p>在<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E4%B9%8BFiddler%E7%BC%96%E7%A8%8B%E7%8C%AB%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/">JS逆向之Fiddler编程猫插件使用</a>一文中提到过一种浏览器内存漫游的方案，那就是使用Fiddler+编程猫插件，然而编程猫插件只支持windows平台，而且两个软件配置起来有点麻烦。这里介绍一个新的库：<a href="https://github.com/JSREI/ast-hook-for-js-RE%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%E8%B7%A8%E5%B9%B3%E5%8F%B0%EF%BC%8C%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%AE%80%E5%8D%95%E3%80%82">https://github.com/JSREI/ast-hook-for-js-RE，这个工具跨平台，并且配置简单。</a></p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>以mac环境为例，其它环境大同小异。</p><ol><li>克隆项目到本地文件夹</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/CC11001100/ast-hook-for-js-RE.git</span><br></pre></td></tr></table></figure><ol start="2"><li>安装依赖</li></ol><p>进入项目文件夹，并安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ast-hook-for-js-RE</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><ol start="3"><li>安装anyproxy并安装证书</li></ol><p>由于ast-hook-for-js是依赖于anyproxy抓包的，所以需要先安装anyproxy：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g anyproxy</span><br></pre></td></tr></table></figure><p>通过命令安装anyproxy。</p><p>要代理https，还需生成CA证书并添加信任，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anyproxy-ca</span><br></pre></td></tr></table></figure><p>会在当前目录下生成一个rootCA.crt文件，双击这个文件，然后选择系统，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182321395.png" style="zoom: 33%;" /><p>进入到系统，刚才添加的证书默认是不信任，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182324900.png" alt="image-20230518232430790" style="zoom:33%;" /><p>双击这个文件，展开信任栏，选择始终信任，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182327693.png" style="zoom:33%;" /><p>然后退出保存修改即可。</p><ol start="4"><li>启动项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src/proxy-server</span><br><span class="line">node proxy-server.js</span><br></pre></td></tr></table></figure><p>注：<strong>一定要进入到proxy-server.js所在的目录后再运行proxy-server.js，否则会出现莫名的错误</strong>。</p><ol start="5"><li>配置系统代理</li></ol><p>打开设置，搜索代理：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182331135.png" alt="image-20230518233138014" style="zoom:33%;" /><p>点击代理，配置如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182332762.png" alt="image-20230518233258653" style="zoom:33%;" /><p>至此，安装配置完成。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>以极验为例，浏览器中打开<a href="https://gt4.geetest.com/%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%89%93%E5%BC%80%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E8%BF%9B%E5%85%A5network%E6%A0%8F%E3%80%82%E6%89%BE%E5%88%B0%E5%8A%A0%E8%BD%BD%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%B9%B6%E9%9A%8F%E4%BE%BF%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%EF%BC%8C%E6%AF%94%E5%A6%82challenge%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A">https://gt4.geetest.com/，并且打开控制台，进入network栏。找到加载验证码的请求，并随便复制一个请求参数，比如challenge，如下图：</a></p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182337106.png" alt="image-20230518233753024" style="zoom: 50%;" /><p>然后切换到console控制台，输入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hook.<span class="title function_">search</span>(<span class="string">&quot;e7116cce-9779-4cad-be71-f0117681e781&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182340970.png" alt="image-20230518234009822" style="zoom: 39%;" /><p>这样就根据值查找到了需要逆向的入参，点击最后的一个代码位置，进入到相关代码位置，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305192152414.png" alt="image-20230518234233992" style="zoom:67%;" /><p>可以看到challenge是由uuid方法生成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;浏览器内存漫游&quot;&gt;&lt;a href=&quot;#浏览器内存漫游&quot; class=&quot;headerlink&quot; title=&quot;浏览器内存漫游&quot;&gt;&lt;/a&gt;浏览器内存漫游&lt;/h3&gt;&lt;p&gt;所谓浏览器内存漫游就是通过内存中变量级别的抓包监控，把浏览器中js加载过程中的变量值全部存储下来，从</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="浏览器" scheme="http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="内存漫游" scheme="http://example.com/tags/%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Python工程师常用面试题五</title>
    <link href="http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%94/"/>
    <id>http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%94/</id>
    <published>2022-06-08T10:26:56.000Z</published>
    <updated>2023-06-08T10:27:38.352Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Python工程师常用面试题四</title>
    <link href="http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9B%9B/"/>
    <id>http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9B%9B/</id>
    <published>2022-06-08T10:26:49.000Z</published>
    <updated>2023-06-08T10:27:34.757Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Python工程师常用面试题三</title>
    <link href="http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%89/"/>
    <id>http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%89/</id>
    <published>2022-06-08T10:26:46.000Z</published>
    <updated>2023-06-14T02:09:30.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机网络面试题若干"><a href="#计算机网络面试题若干" class="headerlink" title="计算机网络面试题若干"></a>计算机网络面试题若干</h3><ol><li>简述 OSI七层模型和TCP&#x2F;IP五层模型 各层的作用</li></ol><ul><li>应用层：<strong>为应用程序提供网络服务</strong>，常见的协议有HTTPS&#x2F;HTTP&#x2F;FTP&#x2F;SMTP&#x2F;DNS&#x2F;SSH&#x2F;TELNET。</li><li>表示层：主要<strong>负责数据格式的转换，如加密解密、转换翻译、压缩解压缩</strong>等。</li><li>会话层：<strong>建立、断开和维护通信链接</strong>，如服务器验证用户登录便是由会话层完成的。</li><li>传输层：<strong>为上层协议提供端到端的可靠传输</strong>。该层主要有以下两种协议：<ul><li>TCP：提供面向连接的、可靠的数据传输服务；</li><li>UDP：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性。</li></ul></li><li>网络层：<strong>选择合适的路由和交换结点</strong>，确保数据及时传送。主要的协议有IP&#x2F;ARP&#x2F;RARP。</li><li>数据链路层：数据链路层通常简称为链路层。<strong>定义通过通信媒介互连的设备之间传输的规范</strong>，常见协议PPP。</li><li>物理层：<strong>利用物理传输介质为数据链路层提供物理连接</strong>。</li></ul><p>TCP&#x2F;IP五层模型：</p><ul><li><p>应用层：将OSI的应用层，表示层，会话层合并。常见协议：HTTPS&#x2F;HTTP&#x2F;FTP&#x2F;SMTP&#x2F;DNS&#x2F;SSH&#x2F;TELNET。</p></li><li><p>传输层：常见协议：TCP&#x2F;IP</p></li><li><p>网络层：常见协议：IP&#x2F;ARP&#x2F;RARP</p></li><li><p>数据链路层：PPP</p></li><li><p>物理层</p></li></ul><ol start="2"><li>TCP与UDP的区别？</li></ol><table><thead><tr><th></th><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td>是否连接</td><td>无连接</td><td>面向连接</td></tr><tr><td>是否可靠</td><td>不可靠传输，不使用流量控制和拥塞控制</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>是否有序</td><td>无序</td><td>有序，消息在传输过程中可能会乱序，TCP 会重新排序</td></tr><tr><td>传输速度</td><td>快</td><td>慢</td></tr><tr><td>连接对象个数</td><td>支持一对一，一对多，多对一和多对多交互通信</td><td>只能是一对一通信</td></tr><tr><td>传输方式</td><td>面向报文</td><td>面向字节流</td></tr><tr><td>首部开销</td><td>首部开销小，仅8字节</td><td>首部最小20字节，最大60字节</td></tr><tr><td>适用场景</td><td>适用于实时应用（IP电话、视频会议、直播等）</td><td>适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table><p>总结：<strong>TCP在数据传输之前必须建立连接，面向有连接，TCP是可靠传输，使用流量控制和拥塞控制，TCP保证了数据的正确有序性；UDP是面向无连接的，不可靠传输，不使用流量控制和拥塞控制，UDP可能会丢包，并且不保证数据的有序性</strong>。</p><ol start="3"><li>TCP与UDP对应的场景？</li></ol><p>TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：</p><ul><li>FTP文件传输</li><li>HTTP &#x2F; HTTPS</li></ul><p>UDP 面向无连接，它可以随时发送数据，再加上UDP本身的处理既简单又高效，因此经常用于：</p><ul><li>包总量较少的通信，如 DNS 、SNMP等</li><li>视频、音频等多媒体通信</li><li>广播通信</li></ul><ol start="4"><li>简述TCP三次握手过程</li></ol><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306131715382.png" alt="image-20230613171500317" style="zoom: 33%;" /><ul><li>第一次握手：客户端请求建立连接，向服务端发送一个同步报文(SYN&#x3D;1)，同时选择一个随机数seq&#x3D;x作为初始序列号，客户端进入SYN_SENT状态，等待服务器确认。</li><li>第二次握手：服务端同意建立连接，向客户端发送同步确认报文(SYN&#x3D;1, ACK&#x3D;1)，确认号为ack&#x3D;x+1，同时选择一个随机数seq&#x3D;y作为初始序列号，此时服务器进入SYN_RECV状态。</li><li>第三次握手：客户端收到服务器的确认，向服务器发送一个确认报文(ACK&#x3D;1)，确认号ack&#x3D;y+1，序列号seq&#x3D;x+1，客户端和服务端进入ESTABLISHED状态。完成三次握手。</li></ul><p>注意：<strong>如果每次建立连接客户端和服务端的初始化序列号都「一样」，就有大概率遇到历史报文的序列号刚「好在」对方的接收窗口内，从而导致历史报文被新连接成功接收</strong>。</p><ol start="5"><li>为什么TCP需要三次而不是两次或者四次握手建立连接？</li></ol><p>为什么不是2次握手：</p><ul><li>防止已过期的连接请求报文突然又传送到服务器，因而产生错误和资源浪费。</li></ul><p>比如客户端建立连接，向服务端发送一个同步报文，由于网络延迟导致服务端没有接收到，这个时候客户端会重新发送一个同步报文，假设第二次成功建立连接并传输数据，此时连接断开客户端是CLOSED状态，而服务端接收到之前由于延迟导致的同步报文进入SYNC_RECV状态，会导致服务器长时间单方面等待，造成资源浪费。</p><ul><li><p>告知对方自己的初始序号值，并确认收到对方的初始序号值。告知对方自己的初始序号值，并确认收到对方的初始序号值。</p><ul><li>第一次握手：客户端告知服务端自己的信息序号。</li><li>第二次握手：服务端确认客户端的信息序号，同时告知客户端自己的信息序号。</li><li>第三次握手：客户端确认服务端的信息序号。</li></ul>  <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306131800742.png" alt="在这里插入图片描述" style="zoom:66%;" /></li></ul><ol start="6"><li>三次握手连接阶段，最后一次ACK包丢失，会发生什么？</li></ol><ul><li>服务端</li></ul><p>第三次的ACK在网络中丢失，那么服务端该TCP连接的状态为SYN_RECV，并且会根据 TCP的超时重传机制，会等待3秒、6秒、12秒后重新发送SYN+ACK包，以便客户端重新发送ACK包。如果重发指定次数之后，仍然未收到 客户端的ACK应答，那么一段时间后，服务端自动关闭这个连接。</p><ul><li>客户端</li></ul><p>客户端认为这个连接已经建立，如果客户端向服务端发送数据，服务端将以RST包（Reset，标示复位，用于异常的关闭连接）响应。此时，客户端知道第三次握手失败。</p><ol start="7"><li>TCP如何处理丢包问题和乱序问题？</li></ol><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306131814152.png" alt="image-20230613181402063" style="zoom:33%;" /><p>tcp协议为每一个连接建立了一个发送缓冲区，从建立连接后的第一个字节的序列号为0，后边每个字节的序列号会增加1，发送数据时，从发送缓冲区取一部分数据组成发送报文，在其tcp协议头中会附带序列号和长度，接收端在收到序列号后需要回复确认报文，确认报文中的ACK&#x3D;序列号+长度，也就是下一包的起始序列号，这样一问一答的方式能够使发送端确认发送的数据已经被对方收到。发送端也可以发送连续的多包数据，接收端只需要回复一次ACK就可以了。假设其中丢失了某些数据包，接收端可以要求发送端重传，比如丢失了100-199这100个字节，接收端向发送端发送ACK&#x3D;100的报文，发送端会进行重传。</p><ol start="8"><li>简述TCP四次挥手过程</li></ol><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306131927855.png" alt="img" style="zoom: 50%;" /><ul><li>第一次挥手：客户端向服务端发送连接释放报文(FIN&#x3D;1, ACK&#x3D;1)，主动关闭连接，同时等待服务端的确认。<ul><li>序列号 seq&#x3D;u，即客户端上次发送报文的最后一个字节的序号+1；</li><li>确认号ack&#x3D;k，即服务端上次发送的报文的最后一个字节的序号+1；</li></ul></li><li>第二次挥手：服务端收到连接释放报文后，立即发出<strong>确认报文</strong>(ACK&#x3D;1)，序列号seq&#x3D;k，确认号ack&#x3D;u+1。</li></ul><p>这时TCP连接处于半关闭状态，即客户端到服务端的连接已经释放了，但是服务端到客户端的连接还未释放。这表示客户端已经没有数据发送了，但是服务端可能还要给客户端发送数据。</p><ul><li>第三次挥手：服务端向客户端发送连接释放报文（FIN&#x3D;1，ACK&#x3D;1），主动关闭连接，同时等待 A 的确认。<ul><li>序列号 seq &#x3D; w，即服务端上次发送的报文的最后一个字节的序号 + 1。</li><li>确认号 ack &#x3D; u + 1，与第二次挥手相同，因为这段时间客户端没有发送数据。</li></ul></li><li>第四次挥手：客户端收到服务端的连接释放报文后，立即发出<strong>确认报文</strong>（ACK&#x3D;1），序列号 seq &#x3D; u + 1，确认号为 ack &#x3D; w + 1。</li></ul><p>此时，客户端就进入了 <code>TIME-WAIT</code> 状态。注意此时客户端到 TCP 连接还没有释放，必须经过 2*MSL（最长报文段寿命）的时间后，才进入 <code>CLOSED</code> 状态。而服务端只要收到客户端发出的确认，就立即进入 <code>CLOSED</code> 状态。可以看到，服务端结束 TCP 连接的时间要比客户端早一些。</p><ol start="9"><li>为什么在第四次挥手时，客户端TCP要进入<code>TIME-WAIT</code>状态，而服务端TCP立即释放连接？</li></ol><p>确保 ACK 报文能够到达服务端，从而使服务端正常关闭连接。第四次挥手时，客户端第四次挥手的 ACK 报文不一定会到达服务端。服务端会超时重传 FIN&#x2F;ACK 报文，此时如果客户端已经断开了连接，那么就无法响应服务端的二次请求，这样服务端迟迟收不到 FIN&#x2F;ACK 报文的确认，就无法正常断开连接。</p><ol start="10"><li>为什么连接的时候是三次握手，关闭的时候是四次握手？</li></ol><p>因为握手的时候并没有数据传输，所以服务端的 SYN 和 ACK 报文可以一起发送，但是挥手的时候有数据在传输，所以 ACK 和 FIN 报文不能同时发送，需要分两步，所以会比握手多一步。</p><ol start="11"><li>HTTP常见的状态码？</li></ol><p>以1-5开头的状态码含义：</p><ul><li>1xx：服务器收到请求，需要请求者继续执行操作。</li><li>2xx：请求正常处理完毕。如200</li><li>3xx：重定向，需要进一步操作已完成请求。</li><li>4xx：客户端错误，服务器无法处理请求。</li><li>5xx：服务器处理请求错误。</li></ul><p>常见的状态码含义：</p><ul><li>200：服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</li><li>301 ： (永久移动) 请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。</li><li>302：(临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li><li>400 ：客户端请求有语法错误，不能被服务器所理解。</li><li>403 ：服务器收到请求，但是拒绝提供服务。</li><li>404 ：(未找到) 服务器找不到请求的网页。</li><li>500： (服务器内部错误) 服务器遇到错误，无法完成请求。</li></ul><ol start="12"><li>301和302的区别？</li></ol><p>301表示旧地址的资源已经被永久地移除了(这个资源不可访问了)，搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；302表示旧地址的资源还在（仍然可以访问），这个重定向只是临时地从旧地址跳转到新地址，搜索引擎会抓取新的内容而保存旧的网址。</p><ol start="13"><li>GET请求与POST请求的区别？</li></ol><ul><li>GET 请求参数通过 URL 传递，POST 的参数放在请求体中。</li><li>GET 请求会被浏览器主动缓存，而 POST 不会，除非手动设置。</li><li>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。</li><li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li></ul><ol start="14"><li>HTTP请求报文与响应报文的格式？</li></ol><p><strong>请求报文</strong>：</p><ul><li><p>请求行（请求方法+URI协议+版本）</p></li><li><p>请求头部</p></li><li><p>空行</p></li><li><p>请求主体</p></li></ul><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET/sample.jspHTTP/1.1        // 请求行</span><br><span class="line">Accept:image/gif.image/jpeg,  // 请求头部</span><br><span class="line">Accept-Language:zh-cn</span><br><span class="line">Connection:Keep-Alive</span><br><span class="line">Host:localhost</span><br><span class="line">User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)</span><br><span class="line">Accept-Encoding:gzip,deflate</span><br><span class="line"></span><br><span class="line">username=jinqiao&amp;password=1234 // 请求主体</span><br></pre></td></tr></table></figure><p><strong>响应报文</strong>：</p><ul><li><p>状态行（版本+状态码+原因短语）</p></li><li><p>响应首部</p></li><li><p>空行</p></li><li><p>响应主体</p></li></ul><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server:Apache Tomcat/5.0.12</span><br><span class="line">Date:Mon,6Oct2003 13:23:42 GMT</span><br><span class="line">Content-Length:112</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;HTTP响应示例&lt;title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        Hello HTTP!</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="15"><li>HTTP 1.0，HTTP 1.1和HTTP 2.0的区别？</li></ol><p>HTTP 2.0 与 HTTP 1.1的区别：</p><ul><li><strong>新的二进制格式</strong>。HTTP1.1的解析是基于文本，HTTP2.0采用二进制格式。</li><li><strong>多路复用</strong>：<strong>HTTP&#x2F;2.0实现了真正的并行传输，它能够在一个TCP上进行任意数量HTTP请求。而这个强大的功能则是基于“二进制分帧”的特性。</strong>。</li><li><strong>服务器推送</strong>：服务器除了对最初请求的响应外，服务器还可以额外的向客户端推送资源，而无需客户端明确的请求。</li><li><strong>头部压缩</strong>：HTTP&#x2F;2.0使用<code>encoder</code>来减少需要传输的<code>header</code>大小，通讯双方各自<code>cache</code>一份<code>header fields</code>表，既避免了重复<code>header</code>的传输，又减小了需要传输的大小。高效的压缩算法可以很大的压缩<code>header</code>，减少发送包的数量从而降低延迟。</li></ul><p>HTTP 1.1 与 HTTP 1.0的区别：</p><ul><li><strong>长连接</strong>。HTTP 1.1支持长连接和请求的流水线处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启<code>Connection： keep-alive</code>，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</li><li><strong>缓存处理</strong>：在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略，可供选择的缓存头来控制缓存策略。</li><li><strong>带宽优化及网络连接的使用</strong>：HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li><strong>错误通知的管理</strong>：在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</li><li><strong>Host头处理</strong>：在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</li></ul><ol start="16"><li>HTTP常见的请求头和响应头？</li></ol><p>常见的请求头：</p><ul><li>Accept</li><li>Accept-Encoding</li><li>Accept-Language</li><li>Connection</li><li>Host</li><li>Referer</li><li>User-Agent</li><li>Cookie</li></ul><p>常见的响应头：</p><ul><li>Content-Type</li><li>Content-Encoding</li><li>Date</li><li>Server</li></ul><ol start="17"><li>HTTP 与 HTTPS的区别？</li></ol><ul><li><p>HTTP 明文传输，安全性较差，HTTPS 使用TLS (SSL) 来加密普通的HTTP 请求和响应，并对这些请求和响应进行数字签名；</p></li><li><p>HTTPS 协议需要到 CA申请证书，一般免费证书较少，因而需要一定费用。</p></li><li><p>HTTP 和 HTTP 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</p></li></ul><ol start="18"><li>HTTPS的优缺点？</li></ol><p><strong>优点</strong>：</p><ul><li>安全性：<ul><li>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</li><li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</li><li>HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</li></ul></li></ul><p><strong>缺点</strong>：</p><ul><li>在相同网络环境中，HTTPS 相比 HTTP 无论是响应时间还是耗电量都有大幅度上升。</li><li>HTTPS 的安全是有范围的，在黑客攻击、服务器劫持等情况下几乎起不到作用。</li><li>在现有的证书机制下，中间人攻击依然有可能发生。</li><li>HTTPS 需要更多的服务器资源，也会导致成本的升高。</li></ul><ol start="19"><li>简述HTTPS的原理？</li></ol><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306132241724.png" alt="img" style="zoom:80%;" /><ul><li><p>客户端请求 HTTPS 网址，然后连接到 server 的 443 端口 (HTTPS 默认端口，类似于 HTTP 的80端口)。</p></li><li><p>采用 HTTPS 协议的服务器必须要有一套数字 CA (Certification Authority)证书。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。</p></li><li><p>服务器响应客户端请求，将证书传递给客户端，证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。</p></li><li><p>客户端解析证书并对其进行验证。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。</p><p>  如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥A。然后客户端还会生成一个随机码 KEY，并使用公钥A将其加密。</p></li><li><p>客户端把加密后的随机码 KEY 发送给服务器，作为后面对称加密的密钥。</p></li><li><p>服务器在收到随机码 KEY 之后会使用私钥B将其解密。经过以上这些步骤，客户端和服务器终于建立了安全连接，完美解决了对称加密的密钥泄露问题，接下来就可以用对称加密愉快地进行通信了。</p></li><li><p>服务器使用密钥 (随机码 KEY)对数据进行对称加密并发送给客户端，客户端使用相同的密钥 (随机码 KEY)解密数据。</p></li><li><p>双方使用对称加密愉快地传输所有数据。</p></li></ul><ol start="20"><li>在浏览器中输入一个网址后执行的全部过程</li></ol><ul><li>浏览器构建请求行，向服务器发送一个请求。GET URL&#x2F; HTTP 1.1。HTTP的所有版本：0.9&#x2F;1.0&#x2F;1.1&#x2F;2.0。</li><li>查找强缓存(若命中则直接使用)。 HTTP&#x2F;1.1 中使用的Cache-Control。</li><li>浏览器向DNS服务器请求解析该URL中的域名对应的IP地址。</li><li>解析出IP地址后，根据该IP地址和默认端口80，和服务器建立TCP连接。</li><li>浏览器发出读取文件的HTTP请求。</li><li>服务器对浏览器请求作出响应，并把对应的HTML文本发送给浏览器。</li><li>服务器释放TCP连接。（如果keep-alive为关闭状态）</li><li>浏览器将该html文本并显示内容。</li></ul><ol start="21"><li>抓包软件抓取Https包的工作原理</li></ol><ul><li>首先客户端发起一个建立连接的请求，中间人获取到这个信息，伪装成客户端，将消息发给服务端。</li><li>服务器下发服务器证书，中间人保存这个证书，同时将自己伪造的数字证书发给客户端，由于客户端已经安装了中间人的根证书并且将其设置成可信任，因此会通过根证书的公钥验证伪造的数字签名，确认伪造的公钥的合法性，从而能够认证通过。</li><li>客户端使用证书中的公钥加密，向服务端上传对称密钥，中间人用自己的私钥解密对称密钥，然后用保存的服务器证书加密这个对称密钥然后向服务器上传对称密钥。</li><li>接着服务端开始用传输加密数据，中间人用私钥解密数据然后呈现在抓包工具客户端，用伪造的证书加密后传输给客户端。</li><li>客户端使用对称密钥解密。</li></ul><ol start="22"><li>什么是Cookie？</li></ol><ul><li>Cookie 实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就在Response的响应头中带上一个Set-Cookie的键值对，客户端会把 Cookie 保存起来。</li><li>当浏览器再请求该网站时，浏览器把请求的网址连同该 Cookie 一同提交给服务器。服务器检查该 Cookie，以此来辨认用户状态。服务器还可以根据需要修改 Cookie 的内容。</li><li>Cookie的有效期可以根据需要设置。如果没有设置 Cookie 失效日期,它们仅保存到关闭浏览器程序为止。</li></ul><ol start="23"><li>什么是Session？</li></ol><ul><li>Session 是另一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而 Session 保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是 Session。客户端浏览器再次访问时只需要从该 Session 中查找该客户的状态就可以了。</li><li>每个用户访问服务器都会建立一个 session。</li></ul><ol start="24"><li>Cookie和Session的区别？</li></ol><ul><li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li><li>cookie 不是很安全，别人可以分析存放在本地的 cookie 并进行 cookie 欺骗，考虑到安全应当使用 session。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;计算机网络面试题若干&quot;&gt;&lt;a href=&quot;#计算机网络面试题若干&quot; class=&quot;headerlink&quot; title=&quot;计算机网络面试题若干&quot;&gt;&lt;/a&gt;计算机网络面试题若干&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;简述 OSI七层模型和TCP&amp;#x2F;IP五层模型 各层的作用</summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python工程师常用面试题——数据结构算法篇</title>
    <link href="http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C/"/>
    <id>http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C/</id>
    <published>2022-06-08T10:21:47.000Z</published>
    <updated>2023-06-14T07:40:55.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol><li>冒泡排序</li></ol><p>前一个元素跟后边一个元素比较，如果前一个元素大则交换两个元素，每一轮确定一个元素的位置。</p><p>时间复杂度：O(n^2)，空间复杂度：O(1)，稳定性：稳定。</p><ol start="2"><li>选择排序</li></ol><p>第一趟从n个元素中选择最小的元素放在第一个位置，第二趟从剩下的n-1个元素中选择第二小的元素放在第二个位置…</p><p>时间复杂度：O(n^2)，空间复杂度：O(1)，稳定性：不稳定。</p><ol start="3"><li>插入排序</li></ol><p>每一趟拿当前元素和前面的元素一个个比较，将元素插入到合适的位置。</p><p>时间复杂度：O(n^2)，空间复杂度：O(1)，稳定性：稳定。</p><ol start="4"><li>希尔排序</li></ol><p>第一轮按照gap分组，每一组组内进行插入排序；第二轮，gap减半，然后分组，每一组组内进行插入排序…不停的将gap减半直到gap唯一再做插入排序。</p><p>时间复杂度：O(n^3&#x2F;2)，最坏时间复杂度：O(n^2)，空间复杂度：O(1)，稳定性：不稳定。</p><ol start="5"><li>归并排序</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组常用的方法：</p><ol><li>无序数组找中位数</li></ol><ul><li>用快排。排序之后取中间，快排时间O(nlogn)。优化：左侧集合长度恰为 (n-1)&#x2F;2，那么支点恰为中位数。如果左侧长度&lt;(n-1)&#x2F;2, 那么中位点在右侧，反之，中位数在左侧。</li><li>用小根堆。<ul><li><strong>将前(n+1)&#x2F;2个元素调整为一个小顶堆</strong></li><li>对后续的每一个元素，和堆顶比较，如果小于等于堆顶，丢弃之，取下一个元素。 如果大于堆顶，用该元素取代堆顶，调整堆，取下一元素。</li><li>当遍历完所有元素之后，堆顶即是中位数。</li></ul></li></ul><p>2. </p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表的常用解法：</p><ul><li><strong>快慢指针&#x2F;双指针</strong></li></ul><p><a href="https://leetcode.cn/problems/reverse-linked-list-ii/">链表反转</a>：两个指针一前一后，每次实现局部反转。</p><p><a href="https://leetcode.cn/problems/linked-list-cycle/">单链表判断是否有环</a>：快慢指针是否相遇。</p><p>环形链表求环的长度：快慢指针第二次相遇即为环的长度。</p><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">相交链表</a>：</p><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">删除链表指定的元素</a></p><p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">链表的中间节点</a>：快指针到达链表尾部，慢指针所指即为中间节点。</p><p><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">链表中倒数第k个节点</a>：第一个指针先走k步，然后第二个指针和第一个指针一起走，每走一步判断第一个指针是否跳出链表，跳出则第二个链表所指即是倒数第k个节点。</p><ul><li><strong>递归</strong></li></ul><p><a href="https://leetcode.cn/problems/reverse-linked-list-ii/">链表反转</a></p><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">删除链表指定的元素</a></p><p><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">反向打印链表</a></p><ul><li><strong>迭代</strong></li></ul><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并有序链表</a>：归并排序的思想。</p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a>：遍历即可。</p><p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">链表的中间节点</a>：两次遍历</p><p><a href="https://leetcode.cn/problems/convert-binary-number-in-a-linked-list-to-integer/">二进制链表转整数</a>：直接迭代即可。</p><p><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">反向打印链表</a>：迭代并复制到数组。</p><p><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">链表中倒数第k个节点</a>：两次遍历，第一次求长度，第二次找出length-k。</p><ul><li><strong>设置虚拟头节点(哨兵)</strong></li></ul><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并有序链表</a>：设置一个哨兵，防止头节点丢失。</p><ul><li><strong>链表转数组</strong></li></ul><p><a href="https://leetcode.cn/problems/palindrome-linked-list/">回文链表</a>：复制到数组之后判读是否对称</p><p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">链表的中间节点</a>：复制到数组之后取中间值</p><ul><li><strong>借助栈</strong></li></ul><p><a href="https://leetcode.cn/problems/reverse-linked-list-ii/">链表反转</a>：顺序进栈，逆序出栈。</p><p><a href="https://leetcode.cn/problems/palindrome-linked-list/">回文链表</a>：先遍历一遍链表把节点压栈，接着再次遍历，每遍历一个节点并出栈一个元素，比较是否相等。</p><ul><li><strong>借助hash表</strong></li></ul><p><a href="https://leetcode.cn/problems/linked-list-cycle/">单链表判断是否有环</a>：用hash表存已经遍历过的节点，若后边又遇到则有环。</p><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">相交链表</a>：用hash表存链表1的节点，若链表2的节点在hash中找到则相交。</p><p><a href="https://leetcode.cn/problems/remove-duplicate-node-lcci/">乱序链表去重</a>：用hash表存已经存在的元素，然后遍历并作去重。</p><ul><li><strong>复制节点元素</strong></li></ul><p><a href="https://leetcode.cn/problems/delete-middle-node-lcci/">删除指定的节点</a>：把下一个节点的元素复制到当前节点，然后删除下一个节点即可。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>常用方法：</p><ol><li>找出字符串中第K次出现的字符</li></ol><ul><li>遍历字符串</li><li>用hash表<ul><li>先创建一个数组然后这个数组存放256个元素。</li><li>把这个字符串转化成ASCLL码进行查找。</li><li>当我们发现字符串中出现a（a的ASCLL为97）的时候，我们可以把刚才256个元素中下标为97的元素的值加一。</li></ul></li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h2 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h2><h2 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h2><h2 id="分治与剪枝"><a href="#分治与剪枝" class="headerlink" title="分治与剪枝"></a>分治与剪枝</h2><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h2&gt;&lt;h3 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h</summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python工程师常用面试题——MySQL篇</title>
    <link href="http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80/"/>
    <id>http://example.com/Python%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80/</id>
    <published>2022-06-07T08:00:55.000Z</published>
    <updated>2023-06-14T02:10:02.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL部分"><a href="#MySQL部分" class="headerlink" title="MySQL部分"></a>MySQL部分</h3><h4 id="为什么MySQL使用B-树实现索引？"><a href="#为什么MySQL使用B-树实现索引？" class="headerlink" title="为什么MySQL使用B+树实现索引？"></a>为什么MySQL使用B+树实现索引？</h4><p>看下索引的备选数据结构：顺序数组，哈希表，二叉搜索树，B树，B+树。</p><ol><li>首先顺序数组。</li></ol><p>顺序数组做查找操作很方便，使用二分查找，时间效率可以达到<code>logN</code>，但是如果做更新和删除操作，都需要移动大量元素，成本比较大。所以顺序数组更适合用于查询的领域，适合存储一些改动较小的静态存储引擎。</p><ol start="2"><li>哈希表</li></ol><p>哈希表的结构示意图如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306071756484.png" alt="img" style="zoom:50%;" /><p>哈希索引虽然查找效率可以达到常数级别，但是仍然存在一些缺点：</p><ul><li>Hash索引只能满足相等，不等，IN查询，不能够做范围查询。因为有序的键值经过Hash算法之后可能变为不连续的了，这个时候就无法用索引完成范围查询。</li><li>Hash索引无法利用索引排序。因为索引数据并不是按照索引值顺序存储的。</li><li>联合索引中，Hash索引不能利用部分索引键查询。Hash索引在计算Hash值的时候，是联合索引合并后一起计算的Hash值，所以通过前面一个或几个索引键进行查询的时候，Hash索引也无法被利用。</li><li>Hash索引在任何时候都不能避免表扫描。哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。</li><li>在有大量重复键值情况下，哈希索引的效率也是极低的，因为存在所谓的哈希碰撞问题。当出现哈希冲突的时候，存储引擎必须遍历链表中所有的行指针，逐行进行比较，直到找到所有符合条件的行。</li></ul><ol start="3"><li>二叉搜索树</li></ol><p>二叉搜索树的结构如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306071856059.webp" alt="img" style="zoom:67%;" /><p>二叉搜索树的每个节点都只存储一个键值，并且左子树所有节点的值都要小于根节点的值，右子树所有节点的值都要大于根节点的值。当二叉搜索树的所有非叶子节点的左右子树的节点数目均保持差不多时，搜索性能接近二分查找。并且相对于有序数组，二叉搜索树插入与删除操作不需要移动大量数据。</p><p>但是数据库存储大多不使用二叉树，因为数据量较大时，树高会过高，这样子会增加磁盘IO的开销。</p><ol start="4"><li>B树</li></ol><p>B树的结构如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306071954875.png" alt="img" style="zoom:30%;" /><p>B树的特点是：</p><ul><li>所有键值分布在整颗树中。</li><li>搜索有可能在非叶子结点结束，在关键字全集内做一次查找，性能接近二分查找。</li><li>每个节点最多拥有m个子树，最多有m-1个键值。</li><li>根节点至少有2个子树。</li><li>分支节点至少拥有m&#x2F;2颗子树。</li><li>所有叶子节点都在同一层、每个节点最多可以有m-1个key，并且以升序排列。</li></ul><p>B树相比于二叉搜索树，性能都可以接近二分查找，但是B树是多叉树，可以降低树的高度。但是B树也有缺点：</p><ul><li>每个节点都有key，同时也包含data，而每个页存储空间是有限的，如果data比较大的话会导致每个节点存储的key数量变小。</li><li>当存储的数据量很大的时候会导致深度较大，增大查询时磁盘io次数，进而影响查询性能。</li></ul><ol start="5"><li>B+树</li></ol><p>B+树的结构如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306072220057.png" alt="img" style="zoom: 50%;" /><p>B+树在B树的基础上做了一些优化：</p><ul><li>B+树每个节点可以包含更多的节点。</li><li>非叶子节点存储key，叶子节点存储key和数据。</li><li>叶子节点两两指针相互连接。</li></ul><p>B+树相对于B树更加适合用于索引的原因：</p><ul><li>降低了树的高度，减少了磁盘IO次数，将数据范围变为多个区间，区间越多，数据检索越快。</li><li>支持区间查询。</li></ul><p>综上，B+树更加适用于用于创建索引。</p><h4 id="索引的分类？"><a href="#索引的分类？" class="headerlink" title="索引的分类？"></a>索引的分类？</h4><ol><li>按照数据结构分</li></ol><ul><li>B+树索引</li><li>Hash索引</li><li>Full-text索引。</li></ul><ol start="2"><li>按照物理存储分</li></ol><ul><li><p>聚簇索引</p><ul><li><p>每个叶子节点存储了一行完整的表数据，叶子节点间按id列递增连接，可以方便地进行顺序检索。</p></li><li><p><strong>以InnoDB为引擎的表要求必须有聚簇索引</strong>，默认在主键字段上建立聚簇索引，在没有主键字段的情况下，表的第一个非空的唯一索引将被建立为聚簇索引，在前两者都没有的情况下，InnoDB将自动生成一个隐式的自增id列，并在此列上建立聚簇索引。</p></li><li><p>数据页只能按照一颗B+树进行排序，因此<strong>每张表只能拥有一个聚集索引</strong>。</p></li><li><p><strong>以MyISAM为引擎的表不存在聚簇索引</strong>。</p></li></ul></li><li><p>二级索引</p><ul><li>在<strong>聚集索引之上创建的索引叫做二级索引&#x2F;辅助索引</strong>。</li><li>当通过二级索引查询到聚簇索引列值后，还需要回到聚簇索引也就是表数据本身进一步获取数据（回表查询）。</li><li><strong>通过二级索引查询时，回表不是必须的过程</strong>，当<strong>SELECT的所有字段在单个二级索引中都能够找到</strong>时，就不需要回表，MySQL称此时的二级索引为<strong>覆盖索引</strong>或触发了<strong>索引覆盖</strong>。（<strong>会问到回表过程是否是必须的</strong>）</li></ul></li></ul><ol start="3"><li>按功能特性分</li></ol><ul><li>主键索引：一张数据表只能有一个主键索引，<strong>索引列值不允许有空值</strong>。（<strong>会问到主键与唯一索引的区别</strong>）</li><li>唯一索引：一张表可以有多个唯一索引，<strong>索引列值允许为空，列值中出现多个空值不会发生重复冲突</strong>。</li><li>普通索引</li><li>前缀索引<ul><li>前缀索引可以建立在类型为char、varchar、binary、varbinary的列上，可以大大减少索引占用的存储空间。</li><li>对于INNODB存储引擎而言，默认前缀长度最大能支持767字节；而在开启<strong>innodb_large_prefix</strong>属性值的情况下，最大能支持3072字节。</li><li>对于MyISAM存储引擎而言，前缀长度限制为1000字节。</li></ul></li></ul><ol start="4"><li>按照索引字段个数分</li></ol><ul><li>单列索引</li><li>联合索引</li></ul><h4 id="什么情况下MySQL索引会失效？（使用索引需要注意的地方）"><a href="#什么情况下MySQL索引会失效？（使用索引需要注意的地方）" class="headerlink" title="什么情况下MySQL索引会失效？（使用索引需要注意的地方）"></a>什么情况下MySQL索引会失效？（使用索引需要注意的地方）</h4><ol><li>联合索引不满足最左匹配原则</li></ol><p>最左匹配原则：在联合索引中，最左侧的字段优先匹配（最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符）。因此，在创建联合索引时，where子句中使用最频繁的字段放在联合索引的最左侧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 索引为 id_no-username-age</span><br><span class="line">-- 索引有效</span><br><span class="line">explain select * from t_user where id_no = &#x27;1002&#x27;;</span><br><span class="line">explain select * from t_user where id_no = &#x27;1002&#x27; and username = &#x27;Tom2&#x27;;</span><br><span class="line">explain select * from t_user where id_no = &#x27;1002&#x27; and age = 12;</span><br><span class="line">explain select * from t_user where id_no like &quot;1001%&quot;;</span><br><span class="line">-- 索引失效</span><br><span class="line">explain select * from t_user where username = &#x27;Tom2&#x27; and age = 12;</span><br><span class="line">explain select * from t_user where age = 12;</span><br><span class="line">explain select * from t_user where username = &#x27;Tom2&#x27;;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用了select *</li></ol><p>禁止使用select * 语句可能会带来的附带好处就是：某些情况下可以走覆盖索引。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select id_no, username, age from t_user where username = &#x27;Tom2&#x27;;</span><br><span class="line">explain select id_no, username, age from t_user where age = 12;</span><br></pre></td></tr></table></figure><p>不需要做回表查询。</p><ol start="3"><li>索引列参与运算</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id + 1 = 2 ;</span><br></pre></td></tr></table></figure><p>上述SQL语句为例，数据库需要全表扫描出所有的id字段值，然后对其计算，计算之后再与参数值进行比较。</p><p>优化：先在内存中进行计算好预期的值，或者在SQL语句条件的右侧进行参数值的计算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 内存计算，得知要查询的id为1</span><br><span class="line">explain select * from t_user where id = 1 ;</span><br><span class="line">-- 参数侧计算</span><br><span class="line">explain select * from t_user where id = 2 - 1 ;</span><br></pre></td></tr></table></figure><ol start="4"><li>索引列作为函数的参数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where SUBSTR(id_no,1,3) = &#x27;100&#x27;;</span><br></pre></td></tr></table></figure><p>数据库要先进行全表扫描，获得数据之后再进行截取、计算，导致索引索引失效。</p><ol start="5"><li>错误的使用like</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id_no like &#x27;%00%&#x27;;</span><br></pre></td></tr></table></figure><p>占位符出现在首部，导致无法走索引。引本身就相当于目录，从左到右逐个排序。而条件的左侧使用了占位符，导致无法按照正常的目录进行匹配，导致失效。</p><ol start="6"><li>类型隐式转换</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id_no = 1002;</span><br></pre></td></tr></table></figure><p>类型不一致，导致全表扫描。</p><p><strong>注意一个特殊情况：如果字段类型为int类型，而查询条件添加了单引号或双引号，则Mysql会参数转化为int类型，虽然使用了单引号或双引号。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id = &#x27;2&#x27;;</span><br></pre></td></tr></table></figure><ol start="7"><li>使用OR操作</li></ol><ul><li>使用or操作的左右两边的字段都必须要有索引，否则会全表扫描，索引失效。</li><li>or两边为范围查询时，索引会失效。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id = 2 or username = &#x27;Tom2&#x27;;</span><br><span class="line">explain select * from t_user where id  &gt; 1 or id  &lt; 80;</span><br></pre></td></tr></table></figure><ol start="8"><li>两列做比较</li></ol><p>带索引的两列如果做比较，也会导致索引失效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id &gt; age;</span><br></pre></td></tr></table></figure><ol start="9"><li>不等于比较可能导致索引失效。</li></ol><p>使用不等条件查询时，当查询结果集占比比较小时，会走索引，占比比较大时不会走索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 有效</span><br><span class="line">explain select * from t_user where id != 2;</span><br><span class="line">-- 失效</span><br><span class="line">explain select * from t_user where create_time != &#x27;2022-02-26 09:04:23&#x27;;</span><br></pre></td></tr></table></figure><ol start="10"><li>使用<code>is not null</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id_no is not null;</span><br></pre></td></tr></table></figure><p>查询条件使用<code>is null</code>时正常走索引，使用<code>is not null</code>时，不走索引。</p><ol start="11"><li>使用<code>not in</code>和<code>not exists</code></li></ol><p>范围查询中有2个特例：<code>not in</code>和<code>not exists</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 有效</span><br><span class="line">explain select * from t_user where id not in (2,3);</span><br><span class="line">-- 失效</span><br><span class="line">explain select * from t_user where create_time not in (&#x27;2022-02-26 09:04:23&#x27;);</span><br><span class="line">explain select * from t_user u1 where not exists (select 1 from t_user u2 where u2.id  = 2 and u2.id = u1.id);</span><br></pre></td></tr></table></figure><p>如果是主键则走索引，如果是普通索引，则索引失效。</p><ol start="12"><li>order by导致索引失效</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user order by id_no ;</span><br></pre></td></tr></table></figure><p>对全表数据进行排序处理，导致索引失效。</p><p>使用<code>limit</code>索引依然失效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user order by id_no limit 60;</span><br></pre></td></tr></table></figure><p><strong>也看结果集占总数据的占比，如果占比比较大，索引不会失效</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 有效</span><br><span class="line">explain select * from t_user order by id_no limit 60;</span><br></pre></td></tr></table></figure><p><strong>对主键使用order by索引不会失效</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user order by id desc;</span><br></pre></td></tr></table></figure><ol start="13"><li>参数不同导致索引失效</li></ol><p>DBMS发现全表扫描比走索引效率更高，因此就放弃了走索引。如上边的<code>order by limit</code>，不等于比较。</p><h4 id="索引的优缺点？"><a href="#索引的优缺点？" class="headerlink" title="索引的优缺点？"></a>索引的优缺点？</h4><ol><li>优点</li></ol><ul><li>建立索引的列可以保证行的唯一性，生成唯一的rowId。</li><li>建立索引可以有效缩短数据的检索时间。</li><li>建立索引可以加快表与表之间的连接。</li></ul><ol start="2"><li>缺点</li></ol><ul><li>创建索引和维护索引需要时间成本和空间成本。</li><li>会降低表的增删改的效率，因为每次增删改索引需要进行动态维护，导致时间变长。</li></ul><h4 id="什么时候不使用索引"><a href="#什么时候不使用索引" class="headerlink" title="什么时候不使用索引"></a>什么时候不使用索引</h4><ul><li>经常增删改的列不要建立索引</li><li>有大量重复数据&#x2F;数据区分度低的列不要建立索引</li><li>表记录太少不要建立索引</li></ul><h4 id="索引创建的原则？"><a href="#索引创建的原则？" class="headerlink" title="索引创建的原则？"></a>索引创建的原则？</h4><ol><li>选择区分度高&#x2F;离散度高&#x2F;重复值少的字段创建索引。</li></ol><p>比如性别不适合做索引，手机号适合做索引。</p><ol start="2"><li>只为用于搜索，排序，分组的列创建索引。</li><li>不要为联合索引的第一个索引列单独创建索引；建立联合索引时，一定要把最常用的列放在最左边。</li><li>对过长的字段，建立前缀索引。可以节省磁盘空间。</li><li>频繁更新的值，不要作为主键或者索引。索引会降低增删改的效率，频繁更新的值会导致性能问题。</li></ol><h4 id="谈谈前缀索引？"><a href="#谈谈前缀索引？" class="headerlink" title="谈谈前缀索引？"></a>谈谈前缀索引？</h4><ol><li>什么是前缀索引</li></ol><p>前缀索引也叫局部索引，比如给身份证的前 10 位添加索引，类似这种给某列部分信息添加索引的方式叫做前缀索引。</p><ol start="2"><li>前缀索引的优缺点</li></ol><p>优点：前缀索引能有效减小索引文件的大小，让每个索引页可以保存更多的索引值，从而提高了索引查询的速度。</p><p>缺点：不能在 order by 或者 group by 中触发前缀索引，也不能把它们用于覆盖索引。</p><ol start="3"><li>什么情况下使用前缀索引</li></ol><p>当字符串本身可能比较长，而且前几个字符就开始不相同，适合使用前缀索引；相反情况下不适合使用前缀索引。</p><h4 id="如何创建索引？"><a href="#如何创建索引？" class="headerlink" title="如何创建索引？"></a>如何创建索引？</h4><ol><li>使用<code>create table</code>语句创建</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user_index2 (</span><br><span class="line">    id INT auto_increment PRIMARY KEY,</span><br><span class="line">    first_name VARCHAR (16),</span><br><span class="line">    last_name VARCHAR (16),</span><br><span class="line">    id_card VARCHAR (18),</span><br><span class="line">    information text,</span><br><span class="line">    KEY name (first_name, last_name),</span><br><span class="line">    FULLTEXT KEY (information),</span><br><span class="line">    UNIQUE KEY (id_card)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>alter table</code>语句创建</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD INDEX index_name (column_list);</span><br><span class="line">ALTER TABLE table_name ADD UNIQUE INDEX index_name (column_list);</span><br><span class="line">ALTER TABLE table_name ADD PRIMARY KEY index_name (column_list);</span><br></pre></td></tr></table></figure><ol start="3"><li>使用<code>create index</code>语句创建</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table_name (column_list);</span><br></pre></td></tr></table></figure><h4 id="什么是索引下推？"><a href="#什么是索引下推？" class="headerlink" title="什么是索引下推？"></a>什么是索引下推？</h4><p>索引下推指的是可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from t_user where id_no = &#x27;1002&#x27; and age = 12;</span><br></pre></td></tr></table></figure><p>联合索引为<code>id_no-age</code>，如果没有索引下推，在B+树搜索的时候InnoDB并不会看age字段的值，只是按顺序把id_no为12的记录一条条取出来回表。引入索引下推之后，InnoDB 在 <code>id_no-age</code> 索引内部就判断了 age 是否等于 12，对于不等于 12 的记录，直接判断并跳过，这样有效的减少了回表的次数。</p><h4 id="MySQL为什么建议使用自增主键？"><a href="#MySQL为什么建议使用自增主键？" class="headerlink" title="MySQL为什么建议使用自增主键？"></a>MySQL为什么建议使用自增主键？</h4><p>使用自增id可以避免页分裂。mysql在底层是以数据页为单位来存储数据的，一个数据页大小默认为16k（这个大小可以自定义）。如果主键为自增id的话，mysql在写满一个数据页的时候，直接申请另一个新数据页接着写就可以了。如果主键是非自增 id，为了把数据放到合适的节点上(保证插入数据后依然维持B+树的特性)，可能会对已存在的节点造成分裂在组合的影响，分裂在组合就是不必要的性能消耗，而且当往一个快满或已满的数据页中插入数据时，新插入的数据会将数据页写满，mysql 就需要申请新的数据页，并且把上个数据页中的部分数据挪到新的数据页上，这就造成了页分裂，移动数据的过程是会严重影响插入效率的。</p><h4 id="谈谈Change-Buffer？"><a href="#谈谈Change-Buffer？" class="headerlink" title="谈谈Change Buffer？"></a>谈谈Change Buffer？</h4><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InnoDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。（change buffer好比黑板，磁盘上的数据页好比账本）</p><p><strong>change buffer也可以持久化到磁盘上</strong>。</p><p>将change buffer与原始页数据进行合并的操作称为merge。merge的时机：</p><ul><li>访问数据页。</li><li>系统有后台线程会定期 merge。</li><li>在数据库正常关闭的过程中。</li></ul><h4 id="普通索引与唯一索引如何选择？"><a href="#普通索引与唯一索引如何选择？" class="headerlink" title="普通索引与唯一索引如何选择？"></a>普通索引与唯一索引如何选择？</h4><p>通常情况下尽量使用普通索引。理由如下：</p><ol><li>查询过程</li></ol><p><strong>普通索引和唯一索引性能相差无几</strong>。对于唯一索引，在查找过程中，找到第一个满足条件的记录就会停止继续检索；对于普通索引，查找到第一个满足条件的记录之后，会继续查找直到碰到第一个不满足条件的。</p><p>InnoDB 的数据是按数据页为单位来读写的，也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。所以，对于普通索引无非是继续在内存中做一次指针寻找和计算。</p><ol start="2"><li>更新过程</li></ol><p><strong>普通索引在更新时可以使用change buffer，唯一索引不使用change buffer，通常情况下前者更新效率更高</strong>。当要更新的数据页在内存，唯一索引相比于普通索引无非是多一次比较操作，性能相差无几；当要更新的数据页不在内存中时，唯一索引做更新时要判断记录是否存在时，需要把数据页读入内存，不会去使用change buffer；而普通索引做更新时不需要判断记录是否存在，直接把数据更新到change buffer，而不会把数据页读入到内存，降低了磁盘IO。</p><p><strong>写多读少使用 change buffer 可以加快执行速度，减少数据页磁盘IO。 但是，如果业务模型是写后立马会做查询，则会触发change buffer立即merge 到磁盘，这样的场景磁盘io次数不会减少，反而会增加change buffer的维护代价。</strong></p><h4 id="谈谈MySQL为啥会选错索引？"><a href="#谈谈MySQL为啥会选错索引？" class="headerlink" title="谈谈MySQL为啥会选错索引？"></a>谈谈MySQL为啥会选错索引？</h4><p>选择索引是优化器的工作。优化器是根据扫描行数，否使用临时表、是否排序等因素进行综合判断。在某些情况下优化器没有准确的判断出扫描行数，导致MySQL选错索引。</p><ol><li>mysql如何判断一个查询的扫描行数?</li></ol><p>通过索引的区分度即基数（一个索引上不同的值的个数）来估算记录数。</p><ol start="2"><li>索引基数如何计算?</li></ol><p>InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。</p><ol start="3"><li>可以重新统计索引信息的命令是什么?</li></ol><p><code>analyze table t</code>命令。</p><ol start="4"><li>索引选择异常如何解决?</li></ol><ul><li>采用 force index 强行选择一个索引。MySQL 会根据词法解析的结果分析出可能可以使用的索引作为候选项，然后在候选列表中依次判断每个索引需要扫描多少行。如果 force index 指定的索引在候选索引列表中，就直接选择这个索引，不再评估其他索引的执行代价。</li><li>可以修改语句，引导 MySQL 使用我们期望的索引。</li><li>可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。</li></ul><h4 id="Explain命令查看哪些属性？"><a href="#Explain命令查看哪些属性？" class="headerlink" title="Explain命令查看哪些属性？"></a>Explain命令查看哪些属性？</h4><ul><li><p><strong>select_type</strong>：查询的类型，主要是区别普通查询和联合查询、子查询之类的复杂查询。</p><ul><li><code>SIMPLE</code>：查询中不包含子查询或者<code>UNION</code></li><li>查询中若包含任何复杂的子部分，最外层查询则被标记为：<code>PRIMARY</code></li><li>在<code>SELECT</code>或<code>WHERE</code>列表中包含了子查询，该子查询被标记为：<code>SUBQUERY</code></li></ul></li><li><p><strong>type</strong>：访问类型。</p><ul><li>ALL：全表扫描</li><li>index：扫描全部索引树</li><li>range：扫描部分索引，索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行，常见于between、&lt;、&gt;等的查询。</li><li>ref：使用非唯一索引或非唯一索引前缀进行的查找</li><li>fulltext：全文索引检索，要注意，全文索引的优先级很高，若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引。</li><li>eq_ref：查找唯一性索引，返回的数据至多一条。属于精确查找。</li><li>const：查找主键索引，返回的数据至多一条（0或者1条）。属于精确查找。</li><li>system：表中只有一行数据或者是空表，且只能用于myisam和memory表。</li></ul></li><li><p><strong>possible_keys</strong>：显示可能应用在这张表中的索引，一个或多个。</p></li><li><p><strong>key</strong>：优化器实际使用的索引，必然包含在possible_keys中，如果没有索引被选择，是NULL。</p></li><li><p><strong>key_len</strong>：使用到索引字段的长度。</p></li><li><p><strong>rows</strong>：MySQL根据表统计信息及索引选用情况，估算mysql查询过程中遍历的行数，不是准确值。</p></li></ul><h4 id="varchar与char的区别？"><a href="#varchar与char的区别？" class="headerlink" title="varchar与char的区别？"></a>varchar与char的区别？</h4><ul><li>char是一个定长字段，比如申请了<code>char(10)</code>的空间,那么无论实际存储多少内容，该字段都占用 10 个字符；而varchar是变长的，申请的只是最大长度，占用的空间为实际字符长度+1，最后一个字符存储使用了多长的空间。</li><li>检索效率上char的效率高于varchar，如果某个字段既可以使用char又可以使用varchar，应该尽量使用varchar，比如md5码。</li></ul><h4 id="MySQL执行查询的过程？"><a href="#MySQL执行查询的过程？" class="headerlink" title="MySQL执行查询的过程？"></a>MySQL执行查询的过程？</h4><p>mysql的逻辑架构图如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202306091755542.png" alt="img" style="zoom: 20%;" /><ol><li>与MySQL连接器进行连接。客户端通过 TCP 连接发送连接请求到 MySQL 连接器，连接器会对该请求进行权限验证及连接资源分配。</li><li>查询缓存。MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句，如果缓存命中，直接返回查询结果。</li><li>SQL语法分析。若没命中，分析器对SQL语句进行词法分析，语法分析，检查SQL语法是否正确。</li><li>优化。优化器对SQL进行优化，比如使用哪个索引，多表关联的时候，决定各个表的连接顺序。</li><li>执行。执行器会判断对查询的表是否有执行查询的权限，如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</li></ol><h4 id="什么是数据库事务？"><a href="#什么是数据库事务？" class="headerlink" title="什么是数据库事务？"></a>什么是数据库事务？</h4><p>事务就是要保证一组数据库操作，要么全部成功，要么全部失败。事务具备四个特点：</p><ul><li>原子性。事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做。</li><li>一致性。在事务开始之前和事务结束以后，数据库的完整性没有被破坏。</li><li>隔离性。一个事务的执行不能其它事务干扰，一个事务内部的操作及使用的数据对其它并发事务是隔离的。</li><li>持续性。指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。</li></ul><h4 id="MySQL的四种隔离级别？"><a href="#MySQL的四种隔离级别？" class="headerlink" title="MySQL的四种隔离级别？"></a>MySQL的四种隔离级别？</h4><ul><li>读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交：一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。</li><li>串行化：当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>四种隔离级别：并行性能依次降低，安全性依次提高。</p><h4 id="事务的实现原理"><a href="#事务的实现原理" class="headerlink" title="事务的实现原理"></a>事务的实现原理</h4><ul><li>事务的原子性是通过 undo log 来实现的。</li><li>事务的持久性性是通过 redo log 来实现的。</li><li>事务的隔离性是通过 (读写锁+MVCC)来实现的。</li></ul><ol><li>原子性的实现</li></ol><ul><li>每条数据变更(insert&#x2F;update&#x2F;delete)操作都伴随一条undo log的生成，并且回滚日志必须先于数据持久化到磁盘上；</li><li>所谓的回滚就是根据回滚日志做逆向操作，比如delete的逆向操作为insert，insert的逆向操作为delete，update的逆向为update等。</li></ul><ol start="2"><li>持久化的实现</li></ol><p>每提交一个事务必须先将该事务的所有日志写入到redo log文件进行持久化，数据库就可以通过重做日志来保证事务的持久性。</p><ol start="3"><li>隔离性的实现</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;MySQL部分&quot;&gt;&lt;a href=&quot;#MySQL部分&quot; class=&quot;headerlink&quot; title=&quot;MySQL部分&quot;&gt;&lt;/a&gt;MySQL部分&lt;/h3&gt;&lt;h4 id=&quot;为什么MySQL使用B-树实现索引？&quot;&gt;&lt;a href=&quot;#为什么MySQL使用B-树实现</summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之去掉未被调用的函数</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/</id>
    <published>2022-05-28T13:44:53.000Z</published>
    <updated>2023-05-12T17:10:13.762Z</updated>
    
    <content type="html"><![CDATA[<p>本文接上一篇 <a href="AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F">AST解JS混淆之去掉未被使用的变量</a>，去掉未被调用的函数，其思路与去掉未被使用的变量思路区别不大，在某些情况下，二者是通用的。如下：</p><p>需要清洗的代码依旧是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m, n;</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">a</span>() + <span class="number">1</span>; </span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&quot;Wow&quot;</span>;</span><br></pre></td></tr></table></figure><p>跟前面去掉未使用变量的代码基本一致，略作修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="string">&quot;VariableDeclarator|FunctionDeclaration&quot;</span>(path) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id&#125; = path.<span class="property">node</span>;</span><br><span class="line">        <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(id.<span class="property">name</span>);</span><br><span class="line">        <span class="comment">// 如果变量被修改过，不去掉</span></span><br><span class="line">        <span class="keyword">if</span> (!binding || binding.<span class="property">constantViolations</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果变量未被引用，去掉</span></span><br><span class="line">        <span class="keyword">if</span> (binding.<span class="property">referencePaths</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          path.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意”VariableDeclarator|FunctionDeclaration”这种写法，如果是想匹配多个节点，用|分割即可，但是得用双引号括起来。这样子就会对变量和函数同时应用下面的规则，即看变量或函数是否被修改过，是否存在引用。</p><p>结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> m, k;</span><br><span class="line">  m++;</span><br><span class="line">  k++;</span><br><span class="line">  <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到多余的变量以及未被调用的函数被去掉了。</p><p>但是有一种特殊情况需要考虑到，那就是当遇到函数体里面定义的变量与函数名同名时，就会存在作用域的问题，这种情况下，运用上面的代码去清晰函数和变量时，就不会起作用了。</p><p>比如说如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;Hello,AST&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然函数a未被调用，但是变量a存在引用关系。我们使用<code>Scope.dump()</code>输出一下作用域与变量信息，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-143413.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-143413.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-143413.png</div>            </figure><p>可以看到有2个不同作用域的a，一个a是存在于作用域Program，另一个a是存在于作用域FunctionDeclaration。由于是同样的名字，所以我们在使用代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;id&#125; = path.<span class="property">node</span>;</span><br><span class="line"><span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(id.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>它应该会使用哪个a呢？我们来看看getBinding的源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getBinding</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> scope = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">const</span> binding = scope.<span class="title function_">getOwnBinding</span>(name);</span><br><span class="line"><span class="keyword">if</span> (binding) &#123;</span><br><span class="line"><span class="keyword">return</span> binding;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (scope = scope.<span class="property">parent</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，不停的在遍历父级作用域，直到获取 binding 为止，由于是 do-while循环，所以会先从当前的作用域开始遍历。而对于上面的特例来说，会优先遍历FunctionDeclaration的作用域，因为这里函数作用域本身就是Program。</p><p>所以只需要对之前的代码略加修改即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="string">&quot;VariableDeclarator|FunctionDeclaration&quot;</span>(path) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id&#125; = path.<span class="property">node</span>;</span><br><span class="line">        <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="property">parent</span>.<span class="title function_">getBinding</span>(id.<span class="property">name</span>);</span><br><span class="line">        <span class="comment">// 如果变量被修改过，不去掉</span></span><br><span class="line">        <span class="keyword">if</span> (!binding || binding.<span class="property">constantViolations</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果变量未被引用，去掉</span></span><br><span class="line">        <span class="keyword">if</span> (binding.<span class="property">referencePaths</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          path.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>const binding = path.scope.parent.getBinding(id.name);</code> 这个就是修改的地方，即直接从父作用域开始遍历，这样避免了同名导致的遍历错误作用域的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文接上一篇 &lt;a href=&quot;AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之AST基础</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8BAST%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8BAST%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-28T12:32:08.000Z</published>
    <updated>2023-05-12T17:09:46.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识AST"><a href="#认识AST" class="headerlink" title="认识AST"></a>认识AST</h1><p>打开 <a href="https://astexplorer.net/">https://astexplorer.net/</a> ，选择语言Javascript，选择解析库@babel&#x2F;parser。如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220630230656018.png" alt="image-20220630230656018" title="">                </div>                <div class="image-caption">image-20220630230656018</div>            </figure><p>并在左侧输入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">somewhat</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;Hello,AST&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><p>折叠右边展示的Tree的所有子节点，可以看到主要结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220630231236304.png" alt="image-20220630231236304" title="">                </div>                <div class="image-caption">image-20220630231236304</div>            </figure><p>其中<strong>File是整个树的根节点</strong>。然后基本上每一个子节点都包含type, start, end, loc。给出一个表格列出这几个字段的含义：</p><table><thead><tr><th>节点属性</th><th>记录的信息</th></tr></thead><tbody><tr><td>type</td><td>当前节点的类型</td></tr><tr><td>start</td><td>当前节点的起始位</td></tr><tr><td>end</td><td>当前节点的末尾</td></tr><tr><td>loc</td><td>当前节点所在的行列位置 起始于结束的行列信息</td></tr><tr><td>errors</td><td>File节点所持有的特有属性，可以不用理会</td></tr><tr><td>program</td><td>包含整个源代码，不包含注释节点</td></tr><tr><td>comments</td><td>源代码中所有的注释会显示在这里</td></tr></tbody></table><p>我们通常关注的节点是program，因为源码对应的AST语法子树结构都在program节点中。我们展开program节点，然后对照着JS源码逐步分析：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656603410051.jpg" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656603410051.jpg" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656603410051.jpg</div>            </figure><p>可以看到程序主要由三部分组成，一个是函数定义，一个是变量定义，一个是表达式语句。</p><p>我们接着展开FunctionDeclaration：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220630234230480.png" alt="image-20220630234230480" title="">                </div>                <div class="image-caption">image-20220630234230480</div>            </figure><p>可以看到somewhat这个函数，主要由2部分组成，一个是变量定义，一个是for语句。</p><h1 id="Code-gt-AST"><a href="#Code-gt-AST" class="headerlink" title="Code-&gt;AST"></a>Code-&gt;AST</h1><p><code>@babel/parser</code>能将<code>javascript</code>代码解析成AST，具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">var a = 123;</span></span><br><span class="line"><span class="string">function somewhat() &#123;</span></span><br><span class="line"><span class="string">console.log(&quot;Hello, AST&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(code);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(ast, <span class="literal">null</span>, <span class="string">&#x27;\t&#x27;</span>));</span><br></pre></td></tr></table></figure><h1 id="travel-AST"><a href="#travel-AST" class="headerlink" title="travel AST"></a>travel AST</h1><h2 id="使用path进行遍历"><a href="#使用path进行遍历" class="headerlink" title="使用path进行遍历"></a>使用path进行遍历</h2><p>在使用 <code>enter</code> 遍历所有节点的时候，参数 <code>path</code> 会传入当前的路径，可以根据<code>path</code>进行各种判断，继而进行各类操作。</p><p>编写如下的遍历代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//babel库及文件模块导入</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//babel库相关，解析，转换，构建，生产</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">argv</span>.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Usage: node $&#123;file&#125;.js $&#123;encode&#125;.js $&#123;decode&#125;.js&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input_file = process.<span class="property">argv</span>[<span class="number">2</span>], output_file = process.<span class="property">argv</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = fs.<span class="title function_">readFileSync</span>(input_file, &#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路径类型&#x27;</span>, path.<span class="property">type</span>); <span class="comment">// 打印当前路径类型</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路径源码：&#x27;</span>, path.<span class="title function_">toString</span>()); <span class="comment">// 打印当前路径所对应的源代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure><p>深度遍历的过程中，输出每一个节点的类型与其对应的源码。结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656605283688.jpg" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656605283688.jpg" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656605283688.jpg</div>            </figure><p>可以看到，使用path方式对AST遍历时，是从Program节点开始的，并不是File根节点开始。事实上，不止是采用path方式，下面介绍的采用节点方式对AST进行遍历，都是通过travel模块来进行的。而<strong>采用travel对AST进行遍历都是从Program节点开始</strong>。</p><h2 id="使用节点进行遍历"><a href="#使用节点进行遍历" class="headerlink" title="使用节点进行遍历"></a>使用节点进行遍历</h2><p>与使用path遍历不同，我们不用关心每个节点，只需要关注自己想要处理的那些节点。与path相同的是，path同样会作为参数传入。</p><p>修改之前遍历的代码，修改visitor如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">ForStatement</span>(path) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路径 源码:\n&#x27;</span>, path.<span class="title function_">toString</span>());</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路径 节点:\n&#x27;</span>, path.<span class="property">node</span>.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只处理for-statement，输出其源码以及下面的节点。输出结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220701003649630.png" alt="image-20220701003649630" title="">                </div>                <div class="image-caption">image-20220701003649630</div>            </figure><h1 id="AST-gt-Code"><a href="#AST-gt-Code" class="headerlink" title="AST-&gt;Code"></a>AST-&gt;Code</h1><p>在对AST进行遍历处理之后，需要把AST转化成我们需要的JS代码，用到的模块是<code>@babel/generator</code>。</p><p>以一段代码作为演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//babel库及文件模块导入</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//babel库相关，解析，转换，构建，生产</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">argv</span>.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Usage: node $&#123;file&#125;.js $&#123;encode&#125;.js $&#123;decode&#125;.js&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input_file = process.<span class="property">argv</span>[<span class="number">2</span>], output_file = process.<span class="property">argv</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = fs.<span class="title function_">readFileSync</span>(input_file, &#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">BinaryExpression</span>(path) &#123;            <span class="comment">// 寻找所有 二元表达式节点</span></span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">operator</span> == <span class="string">&#x27;*&#x27;</span>) &#123;  <span class="comment">// 并且这个表达式节点的操作是做 乘法 </span></span><br><span class="line">        path.<span class="property">node</span>.<span class="property">operator</span> = <span class="string">&#x27;+&#x27;</span>;       <span class="comment">// 将操作改为 加</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">Identifier</span>(path) &#123;                  </span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;squire&#x27;</span>) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">name</span> = <span class="string">&#x27;plus&#x27;</span>;        <span class="comment">// 将函数名改为plus</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(output_file, code, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>这段代码的作用是修改方法squire，将其从平方变为加法，主要做2步，第一步是将乘法变为加法，第二步是将squire重命名为plus。可以看到generator的用法很简单，接受的第一个参数是一个AST语法树，返回一个字符串，这个字符串就是全部的JS代码。</p><h1 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h1><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>给出一张图，列出节点的类型，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1403732-20200713201324374-2129914519.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1403732-20200713201324374-2129914519.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1403732-20200713201324374-2129914519.png</div>            </figure><p>这些类型，都在@babel&#x2F;types中定义。</p><p>当前节点的类型，通过<code>path.type</code>来获取。而判断当前节点的类型，有2种方式，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="property">type</span> === <span class="string">&#x27;ForStatement&#x27;</span></span><br><span class="line">path.<span class="title function_">isForStatement</span>()</span><br></pre></td></tr></table></figure><p>第一种方式是比较节点的type属性与节点类型是否一致。第二种方式则是调用每个属性对应的判断类型的方法，规则是在每个节点类型加上前缀<code>is</code>，然后按照驼峰式命名即可。比如<code>NumericLiteral</code>对应的是<code>isNumericLiteral</code>，<code>SwitchCase</code>对应的是<code>isSwitchCase</code>。</p><h2 id="对Node进行增删改"><a href="#对Node进行增删改" class="headerlink" title="对Node进行增删改"></a>对Node进行增删改</h2><h3 id="创建node"><a href="#创建node" class="headerlink" title="创建node"></a>创建node</h3><p><code>@babel/types</code>包含了各个节点的定义，可以通过使用<code>@babel/types</code>的类型名，查阅<a href="https://babeljs.io/docs/en/babel-types"><code>@babel/types</code>官方文档</a>，获取对应类型的构造函数，创建对应类型的节点。</p><p>我们这里来做一个示范，比如创建一条语法<code>console.log(&quot;Hello,AST&quot;)</code>。我们先把这条语句放在 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 中看下这条语句应该对应的AST结构。这里说个小的Tips，在做反混淆的过程中，经常需要反复对照 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 这个网站去分析AST结构。分析结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220701020813706.png" alt="image-20220701020813706" title="">                </div>                <div class="image-caption">image-20220701020813706</div>            </figure><p>可以看到，这条JS语句主要包含4个主要的部分，整个JS代码是一条表达式，所以最外层是一个<code>ExpressStatement</code>，然后具体是什么表达式呢？是一个<code>CallExpress</code>即一个方法调用。然后这个方法调用包含2部分：<code>MemberExpression</code>和<code>Arguments</code>，<code>console.log</code>显然是一个成员表达式，而<code>Hello,AST</code>则是这个方法调用传入的参数。</p><p>分析完之后，编写代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> args = [type.<span class="title class_">StringLiteral</span>(<span class="string">&quot;Hello,AST&quot;</span>)]; <span class="comment">// 方法调用参数</span></span><br><span class="line"><span class="keyword">var</span> callee = type.<span class="title function_">memberExpression</span>(type.<span class="title function_">identifier</span>(<span class="string">&quot;console&quot;</span>), type.<span class="title function_">identifier</span>(<span class="string">&quot;log&quot;</span>)); <span class="comment">// 成员表达式分2个部分</span></span><br><span class="line"><span class="keyword">var</span> call_exp = type.<span class="title function_">callExpression</span>(callee, args); <span class="comment">// 方法调用，第一个参数是方法名，第二个参数是方法调用参数</span></span><br><span class="line"><span class="keyword">var</span> exp_statement = type.<span class="title class_">ExpressionStatement</span>(call_exp); <span class="comment">// 表达式</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">generator</span>(exp_statement)[<span class="string">&#x27;code&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-022717.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-022717.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-022717.png</div>            </figure><h3 id="插入node"><a href="#插入node" class="headerlink" title="插入node"></a>插入node</h3><p><code>NodePath.insertAfter()</code>方法用于在当前<code>path</code>前面插入节点，<code>NodePath.insertBefore()</code>方法用于在当前<code>path</code>后面插入节点。下面用一个实例来演示这2个方法的使用。</p><p>假设有一行代码为<code>var a = 1;</code>，我们的任务是在这行代码之前插入<code>let b = &quot;Hello,AST&quot;</code>，在其之后插入<code>const c = 2;</code>。方法一样，首先把这三行代码放到  <a href="https://astexplorer.net/">https://astexplorer.net/</a>  上面分析，具体的分析过程不过多描述了，直接给出代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = <span class="string">&quot;var a = 1;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">VariableDeclaration</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 定位到a节点</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">kind</span> == <span class="string">&#x27;var&#x27;</span> &amp;&amp; path.<span class="property">node</span>.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">id</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> variableDeclarator = types.<span class="title function_">variableDeclarator</span>(id=types.<span class="title class_">Identifier</span>(<span class="string">&quot;b&quot;</span>), init=types.<span class="title class_">StringLiteral</span>(<span class="string">&quot;Hello,AST&quot;</span>));</span><br><span class="line">    <span class="keyword">var</span> nodeBefore = types.<span class="title class_">VariableDeclaration</span>(kind=<span class="string">&#x27;let&#x27;</span>, declarations=[variableDeclarator]);</span><br><span class="line">    path.<span class="title function_">insertBefore</span>(nodeBefore);</span><br><span class="line">            </span><br><span class="line">    variableDeclarator = types.<span class="title function_">variableDeclarator</span>(id=types.<span class="title class_">Identifier</span>(<span class="string">&quot;c&quot;</span>), init=types.<span class="title class_">NumericLiteral</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">var</span> nodeAfter = types.<span class="title class_">VariableDeclaration</span>(kind=<span class="string">&#x27;const&#x27;</span>, declarations=[variableDeclarator]);</span><br><span class="line">    path.<span class="title function_">insertAfter</span>(nodeAfter);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-030118.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-030118.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-030118.png</div>            </figure><h3 id="替换node"><a href="#替换node" class="headerlink" title="替换node"></a>替换node</h3><p><code>NodePath.replaceInline</code> 方法用于替换对应path的节点。我们依旧给出一个例子。比如有一条JS语句<code>let a = 1</code>，想把它变为<code>let  a = 2</code>。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = <span class="string">&quot;var a = 1;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">NumericLiteral</span>(path) &#123;</span><br><span class="line">    path.<span class="title function_">replaceInline</span>(types.<span class="title class_">NumericLiteral</span>(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 防止递归插入</span></span><br><span class="line">    path.<span class="title function_">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-105013.png" alt="image-20220701104832811" title="">                </div>                <div class="image-caption">image-20220701104832811</div>            </figure><h3 id="删除node"><a href="#删除node" class="headerlink" title="删除node"></a>删除node</h3><p><code>NodePath.remove()</code>用于删除路径对应的节点，由于是对<code>path</code>操作，所以务必注意不要误删。同样地，以一案例来讲解下删除节点，话不多说，直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = <span class="string">`</span></span><br><span class="line"><span class="string">function sum(a, b) &#123;</span></span><br><span class="line"><span class="string">var c = 1;</span></span><br><span class="line"><span class="string">return a + b;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">VariableDeclaration</span>(path) &#123;</span><br><span class="line">    path.<span class="title function_">remove</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br></pre></td></tr></table></figure><p>逻辑比较简单，遍历到变量定义的节点，然后调用path.remove删除即可。</p><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-112346.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-112346.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-112346.png</div>            </figure><h1 id="作用域Scope-与-被绑定量Binding"><a href="#作用域Scope-与-被绑定量Binding" class="headerlink" title="作用域Scope 与 被绑定量Binding"></a>作用域Scope 与 被绑定量Binding</h1><h2 id="作用域Scope"><a href="#作用域Scope" class="headerlink" title="作用域Scope"></a>作用域Scope</h2><p><code>@Babel</code>解析出来的语法树节点对象会包含作用域信息，这个信息会作为节点<code>Node</code>对象的一个属性保存，这个属性本身是一个<code>Scope</code>对象，其定义位于<code>node_modules/@babel/traverse/lib/scope/index.js</code>中。</p><p>查看基本作用域与绑定信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jscode = <span class="string">`</span></span><br><span class="line"><span class="string">function a() &#123;</span></span><br><span class="line"><span class="string">return &quot;Hello,AST&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">function b() &#123;</span></span><br><span class="line"><span class="string">return 1 + 2;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var c = &quot;Wow&quot;;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="string">&quot;FunctionDeclaration&quot;</span>(path)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n\n这里是函数 &quot;</span>, path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span> + <span class="string">&#x27;()&#x27;</span>)</span><br><span class="line">        path.<span class="property">scope</span>.<span class="title function_">dump</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure><p>执行 <code>Scope.dump()</code>，会得到自底向上的 作用域与变量信息，得到结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-113832.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-113832.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-113832.png</div>            </figure><p>输出查看方法：</p><ul><li>每一个作用域都以<code>#</code>标识输出</li><li>每一个绑定都以<code>-</code>标识输出</li><li>对于单次输出，都是自底向上的先输出当前作用域，再输出父级作用域，再输出父级的父级作用域……</li><li>对于单个绑定<code>Binding</code>，会输出4种信息<ul><li>constant 表示声明后，是否会被修改</li><li>references 指被引用次数</li><li>violations 则是被重新定义的次数</li><li>kind 是指函数声明类型。param 参数, hoisted 提升，var 变量， local 内部。</li></ul></li></ul><h2 id="绑定-Binding"><a href="#绑定-Binding" class="headerlink" title="绑定 Binding"></a>绑定 Binding</h2><p><code>Binding</code> 对象用于存储绑定的信息，这个对象会作为<code>Scope</code>对象的一个属性存在，同一个作用域可以包含多个 <code>Binding</code>。你可以在 <code>@babel/traverse/lib/scope/binding.js</code> 中查看到它的定义。</p><p>查看<code>Binding</code>信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jscode = <span class="string">`</span></span><br><span class="line"><span class="string">function a() &#123;</span></span><br><span class="line"><span class="string">var m;</span></span><br><span class="line"><span class="string">m++;</span></span><br><span class="line"><span class="string">return m;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">function b() &#123;</span></span><br><span class="line"><span class="string">let c = a() + 1; </span></span><br><span class="line"><span class="string">return c;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var c = &quot;Wow&quot;;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">BlockStatement</span>(path) &#123;</span><br><span class="line">    <span class="keyword">var</span> bindings = path.<span class="property">scope</span>.<span class="property">bindings</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> binding <span class="keyword">in</span> bindings) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding name: &quot;</span> + binding);</span><br><span class="line">    binding = bindings[binding];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding type: &quot;</span> + binding.<span class="property">kind</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding constant: &quot;</span> + binding.<span class="property">constant</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding constantViolations: &quot;</span> + binding.<span class="property">constantViolations</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding referenced: &quot;</span> + binding.<span class="property">referenced</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding references: &quot;</span> + binding.<span class="property">references</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure><p>输出信息如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-115258.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-115258.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-115258.png</div>            </figure><p>可以看到，变量m类型是var，有被引用，且被引用次数是2；变量c则是let类型，也有被引用，被引用次数是1。</p><blockquote><p>关于作用域与绑定的关系？一个代码块(比如函数，循环，逻辑判断分支等)就是一个作用域，而定义在作用域里面的变量就是一个绑定，绑定是依附在作用域上。</p></blockquote><h1 id="关于学习AST相关的资源整理"><a href="#关于学习AST相关的资源整理" class="headerlink" title="关于学习AST相关的资源整理"></a>关于学习AST相关的资源整理</h1><table><thead><tr><th>信息</th><th>地址</th></tr></thead><tbody><tr><td>AST在线解析</td><td><a href="https://astexplorer.net/">https://astexplorer.net/</a></td></tr><tr><td>babel中文文档</td><td><a href="https://www.babeljs.cn/docs/">https://www.babeljs.cn/docs/</a></td></tr><tr><td>babel英文文档</td><td><a href="https://babeljs.io/docs/en/">https://babeljs.io/docs/en/</a></td></tr><tr><td>Github</td><td><a href="https://github.com/babel/babel">https://github.com/babel/babel</a></td></tr><tr><td>插件手册</td><td><a href="https://blog.csdn.net/weixin_33826609/article/details/93164633#toc-visitors">https://blog.csdn.net/weixin_33826609/article/details/93164633#toc-visitors</a></td></tr><tr><td>babel各节点解释</td><td><a href="https://github.com/babel/babylon/blob/master/ast/spec.md">https://github.com/babel/babylon/blob/master/ast/spec.md</a></td></tr><tr><td>babel简单剖析</td><td><a href="http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/">http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/</a></td></tr><tr><td>淘宝前端团队写的babel相关</td><td><a href="https://fed.taobao.org/blog/taofed/do71ct/babel-plugins/">https://fed.taobao.org/blog/taofed/do71ct/babel-plugins/</a></td></tr><tr><td>babel到底将代码转换成什么</td><td><a href="http://www.alloyteam.com/2016/05/babel-code-into-a-bird-like/">http://www.alloyteam.com/2016/05/babel-code-into-a-bird-like/</a></td></tr><tr><td>babel在线源码</td><td><a href="https://doc.esdoc.org/github.com/mason-lang/esast/class/src/ast.js~VariableDeclarator.html">https://doc.esdoc.org/github.com/mason-lang/esast/class/src/ast.js~VariableDeclarator.html</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识AST&quot;&gt;&lt;a href=&quot;#认识AST&quot; class=&quot;headerlink&quot; title=&quot;认识AST&quot;&gt;&lt;/a&gt;认识AST&lt;/h1&gt;&lt;p&gt;打开 &lt;a href=&quot;https://astexplorer.net/&quot;&gt;https://astexplorer.</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之去掉未被使用的变量</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F/</id>
    <published>2022-05-28T12:32:08.000Z</published>
    <updated>2023-05-12T16:22:53.381Z</updated>
    
    <content type="html"><![CDATA[<p>在JS混淆的过程中，加入很多无辜的变量，从头到尾都没有使用过，这样子可以冗余一部分代码，达到混淆视听的目的，这也是JS混淆的一种常见手段。那么如何去除这些“无辜”的变量呢？这就是本篇文章需要讨论的主题。</p><p>比如下面一段代码，显然变量n和全局变量c是可以删除的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m, n;</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">a</span>() + <span class="number">1</span>; </span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&quot;Wow&quot;</span>;</span><br></pre></td></tr></table></figure><p>删除没有使用的变量，核心代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">VariableDeclarator</span>(path) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id&#125; = path.<span class="property">node</span>;</span><br><span class="line">        <span class="comment">// 获取binding信息</span></span><br><span class="line">        <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(id.<span class="property">name</span>);</span><br><span class="line">        <span class="comment">// 如果变量被修改，则不能删除</span></span><br><span class="line">        <span class="keyword">if</span> (!binding || binding.<span class="property">constantViolations</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果变量没有被引用，则可以删除</span></span><br><span class="line">        <span class="keyword">if</span> (binding.<span class="property">referencePaths</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          path.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有阅读前面写过的一篇文章 <a href="https://lyy077.github.io/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8BAST%E5%9F%BA%E7%A1%80/">AST解JS混淆之AST基础</a>，了解了作用域与Binding，则上面的代码并不难理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在JS混淆的过程中，加入很多无辜的变量，从头到尾都没有使用过，这样子可以冗余一部分代码，达到混淆视听的目的，这也是JS混淆的一种常见手段。那么如何去除这些“无辜”的变量呢？这就是本篇文章需要讨论的主题。&lt;/p&gt;
&lt;p&gt;比如下面一段代码，显然变量n和全局变量c是可以删除的。&lt;</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之删除所有注释</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%B3%A8%E9%87%8A/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%B3%A8%E9%87%8A/</id>
    <published>2022-05-27T15:20:29.000Z</published>
    <updated>2022-07-04T11:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>当代码中有成段成段的注释，但是我们又不需要的时候，可以采用如下代码去删除JS源代码中的注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> output = <span class="title function_">generator</span>(ast, opts=&#123;<span class="string">&quot;comments&quot;</span>: <span class="literal">false</span>&#125;, code);</span><br></pre></td></tr></table></figure><p>测试如下：</p><p>例如源代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行测试，第一行</span></span><br><span class="line"><span class="comment">这是多行测试，第二行</span></span><br><span class="line"><span class="comment">这是多行测试，第三行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;你好AST&quot;</span>; <span class="comment">// 这也是单行测试</span></span><br><span class="line"><span class="comment">// 这是单行测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = a + <span class="number">1</span>; <span class="comment">/*这也是单行测试*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="comment">/*这是代码之间的测试*/</span>b);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这也是多行测试，第一行</span></span><br><span class="line"><span class="comment">这也是多行测试，第二行</span></span><br><span class="line"><span class="comment">这也是多行测试，第三行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面是输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;你好AST&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = a + <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当代码中有成段成段的注释，但是我们又不需要的时候，可以采用如下代码去删除JS源代码中的注释：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之还原中文的Unicode编码</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E8%BF%98%E5%8E%9F%E4%B8%AD%E6%96%87%E7%9A%84Unicode%E7%BC%96%E7%A0%81/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E8%BF%98%E5%8E%9F%E4%B8%AD%E6%96%87%E7%9A%84Unicode%E7%BC%96%E7%A0%81/</id>
    <published>2022-05-27T14:56:32.000Z</published>
    <updated>2023-05-12T17:10:06.339Z</updated>
    
    <content type="html"><![CDATA[<p>前面一篇文章 <a href="https://lyy077.github.io/AST%E8%A7%A3%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6,%20%E4%B8%AD%E8%8B%B1%E6%96%87Unicode%E5%AD%97%E7%AC%A6%E4%B8%B2/">AST解混淆之处理数值与字符串</a> 介绍过unicode或者utf8编码的字符串还原的方法，但是如果这个字符串是中文，这个方法并不会奏效，比如有下面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;\u4f60\u597d\u0041\u0053\u0054&quot;</span>;</span><br></pre></td></tr></table></figure><p>经过前面的插件处理之后，结果为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;\u4F60\u597DAST&quot;</span>;</span><br></pre></td></tr></table></figure><p>可以看到unicode编码的中文并没有还原。</p><p>要想还原unicode编码的中文，必须用到generate函数有个 <code>options选项</code>，下面是这个选项能完成的功能：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/111.png" alt="图片" title="">                </div>                <div class="image-caption">图片</div>            </figure><p>所以修改我们的插件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//babel库及文件模块导入</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//babel库相关，解析，转换，构建，生产</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">argv</span>.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Usage: node $&#123;file&#125;.js $&#123;encode&#125;.js $&#123;decode&#125;.js&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input_file = process.<span class="property">argv</span>[<span class="number">2</span>], output_file = process.<span class="property">argv</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = fs.<span class="title function_">readFileSync</span>(input_file, &#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">StringLiteral</span>(&#123;node&#125;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">extra</span> &amp;&amp; <span class="regexp">/\\[ux]/gi</span>.<span class="title function_">test</span>(node.<span class="property">extra</span>.<span class="property">raw</span>)) &#123;</span><br><span class="line">            node.<span class="property">extra</span> = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast, opts = &#123;<span class="attr">jsescOption</span>:&#123;<span class="string">&quot;minimal&quot;</span>:<span class="literal">true</span>&#125;&#125;);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(output_file, code, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220630-201530.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220630-201530.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220630-201530.png</div>            </figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面一篇文章 &lt;a href=&quot;https://lyy077.github.io/AST%E8%A7%A3%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC%E5%8D%81%E5%85%AD%E8</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
</feed>
