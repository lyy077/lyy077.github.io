<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何仕鹏的个人博客</title>
  
  <subtitle>healthy,weathy,freedom,lucky,happy</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-24T14:34:45.216Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>拾光的碎羽</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS逆向案例——极验无感验证逆向分析</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%97%A0%E6%84%9F%E9%AA%8C%E8%AF%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%97%A0%E6%84%9F%E9%AA%8C%E8%AF%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2023-05-24T14:25:50.000Z</published>
    <updated>2023-05-24T14:34:45.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li><p>目标：极验五子棋验证码逆向</p></li><li><p>主页：<a href="https://gt4.geetest.com/">https://gt4.geetest.com/</a></p></li><li><p>接口：</p><ul><li><a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a></li><li><a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a></li></ul></li><li><p>逆向参数：</p><ul><li>Get Param<ul><li>captcha_id: 54088bb07d2df3c46b79f80300b0abbe</li><li>challenge: e924d75f-7817-4ecc-9387-57eeefd060ce</li><li>lot_number: 56076d56745d43489287d7465d4d0101</li><li>payload: 太长，略</li><li>process_token：太长，略</li><li>w：太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>无感验证属于极验验证码中最简单的了，w参数生成过程基本跟滑块，消消乐，五子棋，文字点选一致。如果看了前面的滑块，消消乐，文字点选等逆向过程，这个无感基本就是小儿科，并且之前生成w的代码只需稍加修改就可以直接拿来用。</p><p>看下e结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span><span class="string">&quot;89b5360c20ea4820b7c098bea3f291bf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;1|0|md5|2023-05-24T22:14:37.410573+08:00|54088bb07d2df3c46b79f80300b0abbe|89b5360c20ea4820b7c098bea3f291bf||f62dd1e38c706b4d&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span><span class="string">&quot;6b5ebf3f4fd0e1223a5f93d80196715a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span><span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span><span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;biht&quot;</span><span class="punctuation">:</span><span class="string">&quot;1426265548&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span><span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;si&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>与前面不同的是，没了userresponse和pastime，这点不难理解，既然是无感验证，自然不需要人工操作，而之前userresponse保存的要么是滑块的轨迹，要么是坐标，要么是位置比例。在无感验证里userresponse自然没有意义，没有人工操作的话，passtime也不需要。</p><p>直接贴一下全部的w生成的代码吧。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deviceId = <span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">s</span>(<span class="params">lot_number, guid</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chapterId = <span class="string">&quot;54088bb07d2df3c46b79f80300b0abbe&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> hashFunc = <span class="string">&quot;md5&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> _ = version + <span class="string">&quot;|&quot;</span> + bits + <span class="string">&quot;|&quot;</span> + hashFunc + <span class="string">&quot;|&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>() + <span class="string">&quot;|&quot;</span> + chapterId + <span class="string">&quot;|&quot;</span> + lot_number + <span class="string">&quot;|&quot;</span> + <span class="string">&quot;&quot;</span> + <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> l = _ + guid;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;pow_msg&quot;</span>: l,</span><br><span class="line">        <span class="string">&quot;pow_sign&quot;</span>: md5.<span class="title function_">update</span>(l).<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uuid</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/[xy]/g</span>, <span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span> | <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> v = c === <span class="string">&#x27;x&#x27;</span> ? r : r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">word, key, iv</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> src = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(word);</span><br><span class="line">    <span class="keyword">let</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(src, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key), &#123; <span class="attr">iv</span>: <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(iv), <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>, <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="property">ciphertext</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FvBQ</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">5381</span>;</span><br><span class="line">    <span class="keyword">var</span> n = t.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        e = (e &lt;&lt; <span class="number">5</span>) + e + t.<span class="title function_">charCodeAt</span>(o++);</span><br><span class="line">    &#125;</span><br><span class="line">    e &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GRmF</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    t[<span class="string">&#x27;e0vm&#x27;</span>] = <span class="title class_">FvBQ</span>(<span class="title class_">GRmF</span>.<span class="title function_">toString</span>() + <span class="title class_">FvBQ</span>(<span class="title class_">FvBQ</span>.<span class="title function_">toString</span>())) + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FvBQ</span>(<span class="title class_">FvBQ</span>.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_e</span>(<span class="params">lotNumber, guid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = &#123;&#125;;</span><br><span class="line">    e[<span class="string">&quot;device_id&quot;</span>] = deviceId;</span><br><span class="line">    e[<span class="string">&quot;lot_number&quot;</span>] = lotNumber;</span><br><span class="line">    <span class="keyword">const</span> pow = <span class="title function_">s</span>(lotNumber, guid);</span><br><span class="line">    e[<span class="string">&quot;pow_msg&quot;</span>] = pow[<span class="string">&#x27;pow_msg&#x27;</span>];</span><br><span class="line">    e[<span class="string">&quot;pow_sign&quot;</span>] = pow[<span class="string">&#x27;pow_sign&#x27;</span>];</span><br><span class="line">    e[<span class="string">&quot;geetest&quot;</span>] = <span class="string">&quot;captcha&quot;</span>;</span><br><span class="line">    e[<span class="string">&quot;lang&quot;</span>] =  <span class="string">&quot;zh&quot;</span>;</span><br><span class="line">    e[<span class="string">&quot;ep&quot;</span>] =  <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    e[<span class="string">&quot;e0vm&quot;</span>] = <span class="title class_">GRmF</span>(&#123;</span><br><span class="line">        <span class="string">&quot;geetest&quot;</span>: <span class="string">&quot;captcha&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;zh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ep&quot;</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    e[<span class="string">&quot;em&quot;</span>] = &#123;</span><br><span class="line">        <span class="string">&quot;ph&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;cp&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;ek&quot;</span>: <span class="string">&quot;11&quot;</span>,</span><br><span class="line">            <span class="string">&quot;wd&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;nt&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;si&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;sc&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_w</span>(<span class="params">lotNumber, guid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="title function_">get_e</span>(lotNumber, guid);</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e), guid, <span class="string">&quot;0000000000000000&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> o = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>, i = c.<span class="property">sigBytes</span>; a &lt; i; a++) &#123;</span><br><span class="line">        <span class="keyword">var</span> u = c.<span class="property">words</span>[a &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - a % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        o.<span class="title function_">push</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">arrayToHex</span>(o)<span class="comment">//, JSON.stringify(e);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayToHex</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = [], n = <span class="number">0</span>, s = <span class="number">0</span>; s &lt; <span class="number">2</span> * e[<span class="string">&quot;length&quot;</span>]; s += <span class="number">2</span>) t[s &gt;&gt;&gt; <span class="number">3</span>] |= <span class="built_in">parseInt</span>(e[n], <span class="number">10</span>) &lt;&lt; <span class="number">24</span> - s % <span class="number">8</span> * <span class="number">4</span>, n++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = [], i = <span class="number">0</span>; i &lt; e[<span class="string">&quot;length&quot;</span>]; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> o = t[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - i % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        r[<span class="string">&quot;push&quot;</span>]((o &gt;&gt;&gt; <span class="number">4</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>)), r[<span class="string">&quot;push&quot;</span>]((<span class="number">15</span> &amp; o)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305242233935.png" alt="image-20230524223353798" style="zoom:33%;" /><p>运行结果如上，无感验证通过率一定位100%。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305242234736.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="MD5" scheme="http://example.com/tags/MD5/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验文字点选验证码逆向分析</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%96%87%E5%AD%97%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%96%87%E5%AD%97%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2023-05-23T16:05:07.000Z</published>
    <updated>2023-05-24T11:10:28.007Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li><p>目标：极验五子棋验证码逆向</p></li><li><p>主页：<a href="https://gt4.geetest.com/">https://gt4.geetest.com/</a></p></li><li><p>接口：</p><ul><li><a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a></li><li><a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a></li></ul></li><li><p>逆向参数：</p><ul><li>Get Param<ul><li>captcha_id: 54088bb07d2df3c46b79f80300b0abbe</li><li>challenge: e924d75f-7817-4ecc-9387-57eeefd060ce</li><li>lot_number: 56076d56745d43489287d7465d4d0101</li><li>payload: 太长，略</li><li>process_token：太长，略</li><li>w：太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>逆向过程基本上与消消乐与五子棋一致。说说不同的几点。</p><ol><li>关于验证码加载接口</li></ol><p>入参只有risk_type不一样，其余都一致。文字点选的risk_type为word，消消乐的为match，五子棋的是winlinze。接口返回的数据也基本一致，不同的是imgs对应的是点选验证码的底图，即要点击的图片，而ques这是要点击的文字的图片。如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305240016948.png" style="zoom:30%;" /><p>可以看到，ques中图片的顺序与要点击的文字的顺序一一对应。</p><ol start="2"><li>关于验证码验证接口</li></ol><p>入参完全一致，生成w参数的e对象结构也一致，如下图：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;passtime&quot;</span><span class="punctuation">:</span><span class="number">2617</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userresponse&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">993</span><span class="punctuation">,</span> <span class="number">1025</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1793</span><span class="punctuation">,</span> <span class="number">5472</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">3793</span><span class="punctuation">,</span> <span class="number">1874</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span><span class="string">&quot;dac26749dcc54f758675ffa7280d52b3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;1|0|md5|2023-05-24T00:19:56.722398+08:00|54088bb07d2df3c46b79f80300b0abbe|dac26749dcc54f758675ffa7280d52b3||f1c8f88b905d4249&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span><span class="string">&quot;57c50f085e4c13fe6d23c870b96d5b1b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span><span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span><span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mrc5&quot;</span><span class="punctuation">:</span><span class="string">&quot;103342051&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span><span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;si&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>userresponse正是点击背景图上三个文字产生的坐标，但是这个坐标数值比较大，而实际的背景图大小是宽为300px，高为200px的，所以这个坐标肯定是经过处理的。</p><p>扒一扒userresponse的生成过程：</p><p>添加如下断点：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305240128754.png" alt="image-20230524012849614" style="zoom: 35%;" /><p>一路跟踪到这里：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305240137613.png" alt="image-20230524013702426" style="zoom: 67%;" /><p>其中，t[left]，t[top]，t[width]，t[height]都是固定值，分别为：103，320，300， 200。简单分析一下知，r和i分别是点击的位置坐标在整个背景图上的横纵坐标所占百分比，也即是某个汉字在整个背景图上横纵坐标的占比。最后，把这个百分比扩大100倍取整即可。</p><p>分析出来了userresponse坐标的生成过程，接下来就是文字点选最关键的目标检测与识别。</p><ol start="3"><li>文字位置的检测与识别</li></ol><p>首先是底图文字位置的检测，使用ddddocr库，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">det = ddddocr.DdddOcr(det=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;4138cab002ce453696bd84d92cc5322f.jpg&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = f.read()</span><br><span class="line"></span><br><span class="line">poses = det.detection(image)</span><br><span class="line"><span class="built_in">print</span>(poses)</span><br><span class="line"></span><br><span class="line">im = cv2.imread(<span class="string">&quot;4138cab002ce453696bd84d92cc5322f.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> box <span class="keyword">in</span> poses:</span><br><span class="line">    x1, y1, x2, y2 = box</span><br><span class="line">    im = cv2.rectangle(im, (x1, y1), (x2, y2), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">&quot;result.jpg&quot;</span>, im)</span><br></pre></td></tr></table></figure><p>输出三个坐标，同时标记了验证码图片上文字的位置。</p><p>举例几张图片如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241012360.png" alt="image-20230524101252194" title="">                </div>                <div class="image-caption">image-20230524101252194</div>            </figure><p>并输出坐标为：[[78, 18, 131, 71], [122, 102, 174, 152], [175, 89, 227, 139]]。</p><p>接下来就是文字识别，根据每个文字的四个顶点坐标把文字依次裁剪下来，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;4138cab002ce453696bd84d92cc5322f.jpg&quot;</span>)</span><br><span class="line">cropped = img[<span class="number">18</span>:<span class="number">71</span>, <span class="number">78</span>:<span class="number">131</span>]  <span class="comment"># 裁剪坐标为[y0:y1, x0:x1]</span></span><br></pre></td></tr></table></figure><p>得到的图片依次为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241746294.jpg" alt="result1](https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241745081.jpg)![result2](https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241746166.jpg)![result3" title="">                </div>                <div class="image-caption">result1](https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241745081.jpg)![result2](https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241746166.jpg)![result3</div>            </figure><p>然后再用ddddocr依次对其做文字识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"></span><br><span class="line">ocr = ddddocr.DdddOcr()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.png&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    image = f.read()</span><br><span class="line"></span><br><span class="line">res = ocr.classification(image)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>识别结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241748483.png" alt="image-20230524174831372" style="zoom: 33%;" /><p>识别还是挺准确的。</p><p>除了底图的文字位置检测与识别，还有上边的标题需要识别，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241750899.png" alt="image-20230524175041775" style="zoom: 33%;" /><p>这些文字都是比较规整，并且同一个汉子的图片的md5的文件名基本上是不变的，大约只有400多个汉字，所以提前跑一个脚本，把它们收集起来即可。如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241757270.png" alt="image-20230524175703147" style="zoom: 33%;" /><p>承载汉字的md5码名称的图片文件与汉字一一对应，并保存到data.pickle文件中。</p><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><p>运行与测试结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241908173.png" alt="image-20230524190803029" style="zoom: 33%;" /><p>识别2个或者3个汉字，才能验证成功。通过测试可知，汉字的识别率还是挺低的，还是需要自己收集数据训练。后边会专门出一篇文章介绍自己训练这一块。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305241910130.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="MD5" scheme="http://example.com/tags/MD5/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验五子棋验证码逆向分析</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E4%BA%94%E5%AD%90%E6%A3%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E4%BA%94%E5%AD%90%E6%A3%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2023-05-23T02:04:47.000Z</published>
    <updated>2023-05-23T07:17:27.993Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li><p>目标：极验五子棋验证码逆向</p></li><li><p>主页：<a href="https://gt4.geetest.com/">https://gt4.geetest.com/</a></p></li><li><p>接口：</p><ul><li><a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a></li><li><a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a></li></ul></li><li><p>逆向参数：</p><ul><li>Get Param<ul><li>captcha_id: 54088bb07d2df3c46b79f80300b0abbe</li><li>challenge: e924d75f-7817-4ecc-9387-57eeefd060ce</li><li>lot_number: 56076d56745d43489287d7465d4d0101</li><li>payload: 太长，略</li><li>process_token：太长，略</li><li>w：太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>抓包分析有2个接口，一个是获取验证码的接口<a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a>，一个是进行验证的接口<a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a>。</p><h3 id="获取验证码接口"><a href="#获取验证码接口" class="headerlink" title="获取验证码接口"></a>获取验证码接口</h3><h4 id="入参"><a href="#入参" class="headerlink" title="入参"></a>入参</h4><p>参数如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;captcha_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;54088bb07d2df3c46b79f80300b0abbe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;challenge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10cea755-08d2-4c7f-900f-d30d81301aa5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;client_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;risk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;winlinze&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geetest_1684505012579&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>入参除了risk_type与消消乐不同外，其它都一样，消消乐的risk_type为match，这里为winlinze。消消乐验证码逆向分析见<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%B6%88%E6%B6%88%E4%B9%90%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/">JS逆向案例——极验消消乐验证码逆向分析</a></p><h4 id="接口返回值"><a href="#接口返回值" class="headerlink" title="接口返回值"></a>接口返回值</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5a1ad5b0399c4a55b416f81d94e112e5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11-UPJ-Jb2g3IpmYoaJlOw5fEieqchiSh9mIS5Ifj...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;process_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;50e908f0ea51c1a16ac0f8a1af6270903d45a4c68572760378125e308c5d8727&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ques&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">4</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>接口返回与五子棋基本一致，只是ques数组第二维里面的元素个数不一样，代表的含义也不一样。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305231036728.png" alt="image-20230523103653587" style="zoom:50%;" /><p>如上图，0代表空格，1～4代表4种棋子。</p><h3 id="验证码验证接口"><a href="#验证码验证接口" class="headerlink" title="验证码验证接口"></a>验证码验证接口</h3><h4 id="入参-1"><a href="#入参-1" class="headerlink" title="入参"></a>入参</h4><p>参数如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11-UPJ-Jb2g3IpmYoaJlOw5fEieqchiSh9mIS5Ifj...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;process_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d4a636b32cee705e5314b90bce43f71ead1f2b6a0b5cb44c50b71bf28f6f9423&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;w&quot;</span><span class="punctuation">:</span> <span class="string">&quot;73bfc2bde060aac064f99128586dc53c9ee05cc25840aa1dc77445727e2e86c342b8cde...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geetest_1684505905348&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;risk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;winlinze&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload_protocol&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pt&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中入参与消消乐的都一模一样，同样只是risk_type不是match而是winlinze。</p><p>另外所有加密方法与对象都与消消乐一致，就连对象e都一模一样，对比消消乐e结构和五子棋的e结构：</p><p>五子棋的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;passtime&quot;</span><span class="punctuation">:</span><span class="number">450</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userresponse&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span><span class="string">&quot;5553a2835b7046d2abd595e82fc62703&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;1|0|md5|2023-05-23T10:41:08.568519+08:00|54088bb07d2df3c46b79f80300b0abbe|5553a2835b7046d2abd595e82fc62703||a19a8f9a8bdc0db7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span><span class="string">&quot;ab3742f987977542c73a36692fdd5a08&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span><span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span><span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e0vm&quot;</span><span class="punctuation">:</span><span class="string">&quot;2135175515&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span><span class="string">&quot;11&quot;</span><span class="punctuation">,</span><span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;si&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>消消乐的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;passtime&quot;</span><span class="punctuation">:</span> <span class="number">550</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userresponse&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1|0|md5|2023-05-22T11:10:02.686802+08:00|54088bb07d2df3c46b79f80300b0abbe|224a2186c59f470cb73897f377843df5||62b052493785e2b7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;506fe742ff81d4bb3bf34892714fa2fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e0vm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;915661778&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;si&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>两者结构虽然一致，但是userresponse的逻辑含义有区别，五子棋是将一个棋子移动到空格位置的坐标信息，而消消乐则是要交换的两个图案信息。</p><h4 id="五子棋算法"><a href="#五子棋算法" class="headerlink" title="五子棋算法"></a>五子棋算法</h4><p>由于是5x5的五子棋棋盘，并且只需要交换一对棋子就可完成五子连珠，所以直接采取暴力穷举即可。算法代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">winlinze_by_row</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="comment">// 统计每一个数字出现的次数</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="keyword">function</span> (<span class="params">arr, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] === target)</span><br><span class="line">                c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找除指定行之外相同元素的位置</span></span><br><span class="line">    <span class="keyword">let</span> checkRow = <span class="keyword">function</span> (<span class="params">arr, besides, target</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i === besides)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i][j] === target)</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找指定行的空格位置</span></span><br><span class="line">    <span class="keyword">let</span> checkEmpty = <span class="keyword">function</span> (<span class="params">arr, row</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr[row].<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[row][i] === <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> [row, i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看每一行是否存在四颗一样的棋子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ques.<span class="property">length</span>; i ++)&#123;</span><br><span class="line">        <span class="keyword">let</span> c = [];</span><br><span class="line">        <span class="keyword">let</span> emptySite = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 统计1-4号棋子以及空格的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> m = <span class="number">0</span>; m &lt; ques[i].<span class="property">length</span>; m++)</span><br><span class="line">            c[m] = <span class="title function_">count</span>(ques[i], m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> m = <span class="number">0</span>; m &lt; ques[i].<span class="property">length</span>; m++) &#123;</span><br><span class="line">            <span class="comment">// 该行上有四颗颜色一样的棋子，并且有空格</span></span><br><span class="line">            <span class="keyword">if</span> (c[m] === <span class="number">4</span> &amp;&amp; c[<span class="number">0</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 查找指定</span></span><br><span class="line">                <span class="keyword">let</span> t = <span class="title function_">checkRow</span>(ques, i, m);</span><br><span class="line">                <span class="keyword">if</span> (t.<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> [t, <span class="title function_">checkEmpty</span>(ques, i)]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">winlinze_by_diagonal</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> leftSites = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>]];</span><br><span class="line">    <span class="keyword">let</span> rightSites = [[<span class="number">0</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">let</span> checkEmpty = <span class="keyword">function</span> (<span class="params">ques, sites</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sites.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ques[sites[i][<span class="number">0</span>]][sites[i][<span class="number">1</span>]] === <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> [i, sites[i]]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = <span class="keyword">function</span> (<span class="params">ques, sites, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; sites.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ques[sites[j][<span class="number">0</span>]][sites[j][<span class="number">1</span>]] === target)</span><br><span class="line">                c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> indexOf = <span class="keyword">function</span> (<span class="params">sites, i, j</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; sites.<span class="property">length</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sites[k][<span class="number">0</span>] === i &amp;&amp; sites[k][<span class="number">1</span>] === j)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> search = <span class="keyword">function</span> (<span class="params">ques, sites, target</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ques.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; ques[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ques[i][j] === target &amp;&amp; !<span class="title function_">indexOf</span>(sites,i, j))</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sites = [leftSites, rightSites];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sites.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> e = <span class="title function_">checkEmpty</span>(ques, sites[i]);</span><br><span class="line">        <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; sites[i].<span class="property">length</span>; j++)</span><br><span class="line">            s.<span class="title function_">add</span>(ques[sites[i][j][<span class="number">0</span>]][sites[i][j][<span class="number">1</span>]]);</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="property">size</span> === <span class="number">2</span> &amp;&amp; <span class="title function_">count</span>(ques, sites[i], ques[e[<span class="number">1</span>][<span class="number">0</span>]][e[<span class="number">1</span>][<span class="number">1</span>]]) === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> rand = (e[<span class="number">0</span>]+<span class="number">1</span>) % <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">let</span> w = <span class="title function_">search</span>(ques, sites[i], ques[sites[i][rand][<span class="number">0</span>]][sites[i][rand][<span class="number">1</span>]]);</span><br><span class="line">            <span class="keyword">if</span> (w &amp;&amp; w.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> [e[<span class="number">1</span>], w]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_userresponse</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据行去判断是否可以五子连线</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="title function_">winlinze_by_row</span>(ques);</span><br><span class="line">    <span class="keyword">if</span> (arr &amp;&amp; arr.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果按行不行，则按列</span></span><br><span class="line">    <span class="keyword">if</span> (arr === <span class="literal">undefined</span> || arr.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 行列互换</span></span><br><span class="line">        <span class="keyword">let</span> new_ques = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; ques.<span class="property">length</span>; index++)</span><br><span class="line">            new_ques[index] = [ques[<span class="number">0</span>][index], ques[<span class="number">1</span>][index], ques[<span class="number">2</span>][index], ques[<span class="number">3</span>][index], ques[<span class="number">4</span>][index]];</span><br><span class="line">        arr = <span class="title function_">winlinze_by_row</span>(new_ques);</span><br><span class="line">        <span class="comment">// 得到的结果再将列转化为行</span></span><br><span class="line">        <span class="keyword">let</span> new_arr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; arr &amp;&amp; index &lt; arr.<span class="property">length</span>; index++)</span><br><span class="line">            new_arr[index] = [arr[index][<span class="number">1</span>], arr[index][<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">if</span> (new_arr.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> new_arr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按列也不行，查找对角线是否可以五子连线</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">winlinze_by_diagonal</span>(ques)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><p>运行结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305231400262.png" alt="image-20230523140001088" style="zoom: 33%;" /><p>同样的，只要五子棋算法没问题，五子棋验证的通过率就是百分百。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222343422.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="MD5" scheme="http://example.com/tags/MD5/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验消消乐验证码逆向分析</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%B6%88%E6%B6%88%E4%B9%90%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%B6%88%E6%B6%88%E4%B9%90%E9%AA%8C%E8%AF%81%E7%A0%81%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2023-05-18T08:04:33.000Z</published>
    <updated>2023-05-23T07:17:50.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li><p>目标：极验消消乐验证码逆向</p></li><li><p>主页：<a href="https://gt4.geetest.com/">https://gt4.geetest.com/</a></p></li><li><p>接口：</p><ul><li><a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a></li><li><a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a></li></ul></li><li><p>逆向参数：</p><ul><li>Get Param<ul><li>captcha_id: 54088bb07d2df3c46b79f80300b0abbe</li><li>challenge: e924d75f-7817-4ecc-9387-57eeefd060ce</li><li>lot_number: 56076d56745d43489287d7465d4d0101</li><li>payload: 太长，略</li><li>process_token：太长，略</li><li>w：太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>抓包分析有2个接口，一个是获取验证码的接口<a href="https://gcaptcha4.geetest.com/load">https://gcaptcha4.geetest.com/load</a>，一个是进行验证的接口<a href="https://gcaptcha4.geetest.com/verify">https://gcaptcha4.geetest.com/verify</a>。</p><h3 id="获取验证码接口"><a href="#获取验证码接口" class="headerlink" title="获取验证码接口"></a>获取验证码接口</h3><h4 id="入参"><a href="#入参" class="headerlink" title="入参"></a>入参</h4><p>参数如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;captcha_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;54088bb07d2df3c46b79f80300b0abbe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;challenge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10cea755-08d2-4c7f-900f-d30d81301aa5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;client_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;risk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;match&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geetest_1684505012579&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>client_type表示客户端类型为web，risk_type表示验证码类型为消消乐，lang表示语言为中文，callback为固定字符串geetest和时间戳做了一个拼接。</p><p>再看另外两个参数，captcha_id和challenge，通过浏览器内存漫游，轻松定位到challenge生成的位置：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305192152414.png" alt="image-20230518234233992" style="zoom:67%;" /><p>challenge由uuid这个方法生成，抠出相关代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uuid = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/[xy]/g</span>, <span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span> | <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> v = c === <span class="string">&#x27;x&#x27;</span> ? r : r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>;</span><br><span class="line">        <span class="keyword">return</span> v.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而另一个参数captcha_id则是固定值，为<code>54088bb07d2df3c46b79f80300b0abbe</code>。</p><h4 id="接口返回值"><a href="#接口返回值" class="headerlink" title="接口返回值"></a>接口返回值</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11-UPJ-Jb2g3IpmYoaJlOw5fEieqchiSh9mIS5Ifj...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;process_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d4a636b32cee705e5314b90bce43f71ead1f2b6a0b5cb44c50b71bf28f6f9423&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ques&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">3</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中lot_number，payload，process_token在验证接口都有用到，而ques则是消消乐对应的图案，不同的数值对应不同的图案。</p><h3 id="验证码验证接口"><a href="#验证码验证接口" class="headerlink" title="验证码验证接口"></a>验证码验证接口</h3><h4 id="入参-1"><a href="#入参-1" class="headerlink" title="入参"></a>入参</h4><p>参数如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11-UPJ-Jb2g3IpmYoaJlOw5fEieqchiSh9mIS5Ifj...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;process_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d4a636b32cee705e5314b90bce43f71ead1f2b6a0b5cb44c50b71bf28f6f9423&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;w&quot;</span><span class="punctuation">:</span> <span class="string">&quot;73bfc2bde060aac064f99128586dc53c9ee05cc25840aa1dc77445727e2e86c342b8cde...&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;callback&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geetest_1684505905348&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;risk_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;match&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payload_protocol&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pt&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中lot_number，payload和process_token三个参数由获取验证码接口返回，只有w参数需要逆向。</p><h4 id="w参数逆向"><a href="#w参数逆向" class="headerlink" title="w参数逆向"></a>w参数逆向</h4><p>将gcaptcha4.js文件反混淆之后全局搜索<code>&quot;w&quot;:</code>，定位到w参数生成位置，并且打上断点，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305212011014.png" alt="image-20230521201117842" style="zoom: 67%;" /><p>w&#x3D;d.default(JSON.stringify(e), s)。</p><h5 id="对象e"><a href="#对象e" class="headerlink" title="对象e"></a>对象e</h5><p>对象e的结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;passtime&quot;</span><span class="punctuation">:</span> <span class="number">550</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userresponse&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;device_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9f5faf6dc7a77e1d394c8634f0893812&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lot_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;224a2186c59f470cb73897f377843df5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1|0|md5|2023-05-22T11:10:02.686802+08:00|54088bb07d2df3c46b79f80300b0abbe|224a2186c59f470cb73897f377843df5||62b052493785e2b7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pow_sign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;506fe742ff81d4bb3bf34892714fa2fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;geetest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;captcha&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ep&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;e0vm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;915661778&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;em&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cp&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ek&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wd&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nt&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;si&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sc&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>需要解析出passtime，userresponse，device_id，pow_msg，pow_sign。</p><ol><li>device_id</li></ol><p>搜索<code>deviceId</code>，找到如下代码片段：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221232591.png" alt="image-20230522123227473" style="zoom:67%;" /><p>可以看到device_id是由一个base64编码的图片经过md5加密形成，而这个图片是一个固定的图片，所以device_id也是一个固定的值。</p><ol start="2"><li>pow_sign和pow_msg</li></ol><p>搜索<code>powSign</code>，找到如下代码片段：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221249230.png" alt="image-20230522124939116" style="zoom:67%;" /><p>跟踪进v.default这个方法，可以看到：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221311565.png" alt="image-20230522131110429" style="zoom:50%;" /><p>pow_msg是由一些固定的值和captcha_id，lot_number，16位的随机字符串以及当前时间做的一个字符拼接，而pow_sign则是对pow_msg做了一个md5加密。</p><p>整理代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> md5 = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> guid = <span class="title function_">e</span>() + <span class="title function_">e</span>() + <span class="title function_">e</span>() + <span class="title function_">e</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">e</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">65536</span> * (<span class="number">1</span> + <span class="title class_">Math</span>[<span class="string">&quot;random&quot;</span>]()) | <span class="number">0</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>)[<span class="string">&quot;substring&quot;</span>](<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">s</span>(<span class="params">lot_number</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chapterId = <span class="string">&quot;54088bb07d2df3c46b79f80300b0abbe&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> hashFunc = <span class="string">&quot;md5&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> version = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> _ = version + <span class="string">&quot;|&quot;</span> + bits + <span class="string">&quot;|&quot;</span> + hashFunc + <span class="string">&quot;|&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>() + <span class="string">&quot;|&quot;</span> + chapterId + <span class="string">&quot;|&quot;</span> + lot_number + <span class="string">&quot;|&quot;</span> + <span class="string">&quot;&quot;</span> + <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> l = _ + guid;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;pow_msg&quot;</span>: l,</span><br><span class="line">        <span class="string">&quot;pow_sign&quot;</span>: md5.<span class="title function_">update</span>(l).<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>passtime</li></ol><p>passtime表示验证码验证花费的时间，整个过程包括拖动第一个图案到与第二个图案交换完成消消乐的时间。这里没有特殊的检测，所以直接随机一个1s内的时间即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passtime = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>userresponse</li></ol><p>经过分析，userresponse数组就是消消乐需要进行交换的图案的坐标。前面说过load接口返回的ques数组是消消乐的每个图案，，比如说ques &#x3D; [[0, 2, 2], [1, 0, 0], [3, 1, 2]]。</p><p>如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221535781.png" alt="image-20230522153528665" style="zoom:67%;" /><p>进行验证码验证时，userresponse正好是2个图案的坐标：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221537444.png" alt="image-20230522153723329" style="zoom:67%;" /><p>可以看到(0,  0)和(1, 0)正好是上边的金字塔和昆虫的坐标，而交换第一行的金字塔和昆虫刚好第三行消除，完成消消乐。</p><p>用穷举的方法，写了一个消消乐查找算法，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCol</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkCol</span>(<span class="params">ques, i, j</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> other = (j + <span class="number">1</span>) % <span class="number">3</span></span><br><span class="line">        <span class="comment">// 第1列出现重复元素</span></span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 看后一列</span></span><br><span class="line">            <span class="keyword">if</span> (ques[i][other] === ques[i + <span class="number">1</span>][j])</span><br><span class="line">                <span class="keyword">return</span> [[i, j], [i + <span class="number">1</span>, j]]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 第2列出现重复元素</span></span><br><span class="line">            <span class="comment">// 看后一列</span></span><br><span class="line">            <span class="keyword">if</span> (ques[i][other] === ques[i + <span class="number">1</span>][j])</span><br><span class="line">                <span class="keyword">return</span> [[i, j], [i + <span class="number">1</span>, j]]</span><br><span class="line">            <span class="comment">// 看前一列</span></span><br><span class="line">            <span class="keyword">if</span> (ques[i][other] === ques[i - <span class="number">1</span>][j])</span><br><span class="line">                <span class="keyword">return</span> [[i, j], [i - <span class="number">1</span>, j]]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 第3列出现重复元素</span></span><br><span class="line">            <span class="comment">// 看前一列</span></span><br><span class="line">            <span class="keyword">if</span> (ques[i][other] === ques[i - <span class="number">1</span>][j])</span><br><span class="line">                <span class="keyword">return</span> [[i, j], [i, j - <span class="number">1</span>]]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看每一列是否经过一次交换就可消除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ques.<span class="property">length</span>; i ++)&#123;</span><br><span class="line">        <span class="comment">// 前面2个元素相同，看第三个元素是否可以经过一次交换产生相同元素</span></span><br><span class="line">        <span class="keyword">if</span> (ques[i][<span class="number">0</span>] === ques[i][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> check = <span class="title function_">checkCol</span>(ques, i, <span class="number">2</span>)</span><br><span class="line">            <span class="comment">// 第i列第三个元素可以与其隔壁交换</span></span><br><span class="line">            <span class="keyword">if</span> (check.<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> check</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第1个元素与第3个元素相同，看第2个元素是否可以与其隔壁交换</span></span><br><span class="line">        <span class="keyword">if</span> (ques[i][<span class="number">0</span>] === ques[i][<span class="number">2</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> check = <span class="title function_">checkCol</span>(ques, i, <span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 第i列第二个元素可以与其隔壁交换</span></span><br><span class="line">            <span class="keyword">if</span> (check.<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> check</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第2个元素与第3个元素相同，看第1个元素是否可以与其隔壁交换</span></span><br><span class="line">        <span class="keyword">if</span> (ques[i][<span class="number">1</span>] === ques[i][<span class="number">2</span>]) &#123;</span><br><span class="line">            <span class="keyword">let</span> check = <span class="title function_">checkCol</span>(ques, i, <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 第i列第一个元素可以与其隔壁交换</span></span><br><span class="line">            <span class="keyword">if</span> (check.<span class="property">length</span> !== <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> check</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_userresponse</span>(<span class="params">ques</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据列去判断是否可以消除</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="title function_">getCol</span>(ques);</span><br><span class="line">    <span class="comment">// 如果按列不可消除，按照行去判断</span></span><br><span class="line">    <span class="keyword">if</span> (arr === <span class="literal">undefined</span> || arr.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 把按照行判断转化为按照列判断</span></span><br><span class="line">        <span class="keyword">let</span> new_ques = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; ques.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            new_ques[index] = [ques[<span class="number">0</span>][index], ques[<span class="number">1</span>][index], ques[<span class="number">2</span>][index]];</span><br><span class="line">        &#125;</span><br><span class="line">        arr = <span class="title function_">getCol</span>(new_ques);</span><br><span class="line">        <span class="comment">// 得到的结果再将列转化为行</span></span><br><span class="line">        <span class="keyword">let</span> new_arr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; arr.<span class="property">length</span>; index++) &#123;</span><br><span class="line">            new_arr[index] = [arr[index][<span class="number">1</span>], arr[index][<span class="number">0</span>]]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> new_arr</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>e0vm</li></ol><p>watch变量e，发现代码运行过此处之后，e对象才有e0vm属性，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222335555.png" alt="image-20230522233524398" style="zoom: 50%;" /><p>跟踪进去_gct方法，调试并整理代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FvBQ</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">5381</span>;</span><br><span class="line">    <span class="keyword">var</span> n = t.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        e = (e &lt;&lt; <span class="number">5</span>) + e + t.<span class="title function_">charCodeAt</span>(o++);</span><br><span class="line">    &#125;</span><br><span class="line">    e &amp;= ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GRmF</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    t[<span class="string">&#x27;e0vm&#x27;</span>] = <span class="title class_">FvBQ</span>(<span class="title class_">GRmF</span>.<span class="title function_">toString</span>() + <span class="title class_">FvBQ</span>(<span class="title class_">FvBQ</span>.<span class="title function_">toString</span>())) + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">FvBQ</span>(<span class="title class_">FvBQ</span>.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">GRmF</span>(&#123;<span class="string">&quot;geetest&quot;</span>: <span class="string">&quot;captcha&quot;</span>, <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;zh&quot;</span>, <span class="string">&quot;ep&quot;</span>: <span class="string">&quot;123&quot;</span>&#125;));</span><br></pre></td></tr></table></figure><h5 id="d-default"><a href="#d-default" class="headerlink" title="d.default"></a>d.default</h5><p>抠完对象e之后，看下整个得到w参数的加密算法d.default，之所以不着急去解剖s，是因为s这个对象属性太多，可以先跟踪进去d.default，看下d.default方法里面用了s对象的哪些属性，然后再反过来看下这些值是怎样生成的。</p><p>跟进去d.default方法，代码如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305221747609.png" alt="image-20230522174718441" style="zoom: 50%;" /><p>参数e是前边逆向出来的e，上边红框的部分可以看到t值只是一种特殊情况，所以不必对t也就是前边说的s进行逆向。下边的红框可以看到w是由两部分组成，前半部分是由e和s经过AES算法加密得到的，整理代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_w</span>(<span class="params">ques, lotNumber, guid</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="title function_">get_e</span>(ques, lotNumber, guid);</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e), guid, <span class="string">&quot;0000000000000000&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> o = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">0</span>, i = c.<span class="property">sigBytes</span>; a &lt; i; a++) &#123;</span><br><span class="line">        <span class="keyword">var</span> u = c.<span class="property">words</span>[a &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - a % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        o.<span class="title function_">push</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">arrayToHex</span>(o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayToHex</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = [], n = <span class="number">0</span>, s = <span class="number">0</span>; s &lt; <span class="number">2</span> * e[<span class="string">&quot;length&quot;</span>]; s += <span class="number">2</span>) t[s &gt;&gt;&gt; <span class="number">3</span>] |= <span class="built_in">parseInt</span>(e[n], <span class="number">10</span>) &lt;&lt; <span class="number">24</span> - s % <span class="number">8</span> * <span class="number">4</span>, n++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> r = [], i = <span class="number">0</span>; i &lt; e[<span class="string">&quot;length&quot;</span>]; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> o = t[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - i % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        r[<span class="string">&quot;push&quot;</span>]((o &gt;&gt;&gt; <span class="number">4</span>)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>)), r[<span class="string">&quot;push&quot;</span>]((<span class="number">15</span> &amp; o)[<span class="string">&quot;toString&quot;</span>](<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后半部分则是u，跟进去可以看到是一个RSA加密，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222256104.png" alt="image-20230522225604931" style="zoom:67%;" /><p>跟进去这个对象，可以看到公钥，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222257715.png" alt="image-20230522225737557" style="zoom: 50%;" /><p>公钥与滑块验证码的公钥一致。</p><p>生成u的部分代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_encrypt</span>(<span class="params">wb</span>):</span><br><span class="line">    rsa = RSAKey()</span><br><span class="line">    rsa.setPublic(<span class="string">&quot;00C1E3934D16144...打码...66D59CEEFA5F2748EA80BAB81&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10001&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rsa.encrypt(wb)</span><br></pre></td></tr></table></figure><h2 id="运行与测试"><a href="#运行与测试" class="headerlink" title="运行与测试"></a>运行与测试</h2><p>运行结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222342070.png" alt="image-20230522234224909" style="zoom:33%;" /><p>验证成功，不同于滑块验证码，只要交换的图案完成消消乐，成功率就是百分百。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305222343422.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="MD5" scheme="http://example.com/tags/MD5/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——百度旋转验证码</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E6%97%8B%E8%BD%AC%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E6%97%8B%E8%BD%AC%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2023-05-16T17:17:47.000Z</published>
    <updated>2023-05-18T07:12:49.530Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li>目标：百度旋转验证码</li><li>主页：<a href="https://wappass.baidu.com/#/password_login">https://wappass.baidu.com/#/password_login</a></li><li>接口：<a href="https://passport.baidu.com/viewlog">https://passport.baidu.com/viewlog</a></li><li>逆向参数：<ul><li>Get Param<ul><li>ak: 1e3f2dd1c81f2075171a547893391274</li><li>as: 02a62d7d</li><li>fs: 太长，略</li><li>tk: 太长，略</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>四个参数中，ak是固定的，as和tk是接口返回的，所以只需要找出fs的生成方法即可。</p><p>从调用栈中进入相关代码进行调试：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172016467.png" alt="image-20230517201639331" style="zoom:50%;" /><p>然后文件中搜索<code>fs = </code>，发现fs是经过encrypt方法加密生成，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172022108.png" alt="image-20230517202259000" style="zoom:67%;" /><p>encrypt方法简单的封装了一下aes加密算法，接受一个参数i，是一个JSON字符串，进入这个方法，代码如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172029575.png" alt="image-20230517202959430" style="zoom:67%;" /><p>其中的key是t，而t则是由as和固定的字符串<code>appsapi0</code>拼接而成，i则是传入进来的JSON字符串。所以只需要解决这个JSON字符串是如何生成的，也就知道fs是如何生成的了。</p><p>全局搜索<code>rzData</code>，找到一处定义的地方，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172109764.png" alt="image-20230517210914653" style="zoom: 67%;" /><p>可以看到simu是检测到webdriver，这里默认为0就行。</p><p>看下关键的ac_c，ac_c是由i.percentage赋值。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172213779.png" alt="image-20230517221341686" style="zoom:67%;" /><p>跟进去看下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172223135.png" alt="image-20230517222303016" style="zoom:67%;" /><p>其中o是旋转的角度，a是固定值212。</p><p>rzData中还有一个backstr，来自于其它请求。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305172239255.png" alt="image-20230517223901174" style="zoom:67%;" /><p>至于其它的字段，比如cl，mv等不影响旋转验证码的验证。自此，整个fs的逆向过程就完成了。</p><h2 id="旋转角度的识别"><a href="#旋转角度的识别" class="headerlink" title="旋转角度的识别"></a>旋转角度的识别</h2><p>关于旋转验证码的识别，网上找的模型，地址如下：<a href="https://github.com/chencchen/RotateCaptchaBreak">https://github.com/chencchen/RotateCaptchaBreak</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305181511235.png" alt="image-20230518151105093" style="zoom: 33%;" /><p>op为1表示验证通过，为0则表示验证失败。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305170100384.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验滑块验证码新思路</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E6%96%B0%E6%80%9D%E8%B7%AF/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E6%96%B0%E6%80%9D%E8%B7%AF/</id>
    <published>2023-05-16T17:07:47.000Z</published>
    <updated>2023-05-23T07:17:39.532Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><ul><li>目标：极验滑块验证码逆向</li><li>主页：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li><li>接口：<a href="https://api.geetest.com/ajax.php">https://api.geetest.com/ajax.php</a></li><li>逆向参数：<ul><li>Get Param<ul><li>gt: f5c10f395211c77e386566112c6abf21</li><li>challenge: 156aa94ea88422263a3e9653f49dea52ln</li><li>w: 太长，略</li><li>callback: geetest_1683637194585</li></ul></li></ul></li></ul><h2 id="逆向过程"><a href="#逆向过程" class="headerlink" title="逆向过程"></a>逆向过程</h2><p>把要做的事情拆分为几个步骤，分别为梳理请求关系，滑块验证码底图还原，滑块验证码w参数逆向，补环境，自动过验证码。</p><h3 id="请求关系梳理"><a href="#请求关系梳理" class="headerlink" title="请求关系梳理"></a>请求关系梳理</h3><h4 id="请求罗列"><a href="#请求罗列" class="headerlink" title="请求罗列"></a>请求罗列</h4><ul><li><p>第一个请求：<code>https://napi-huawei.tianyancha.com/validate/init?_=1683636853751</code></p><p>入参：当前时间戳；</p><p>返回值：gt和challenge。</p></li><li><p>第二个请求：<code>https://api.geevisit.com/gettype.php?</code></p><p>入参：第一个请求得到的gt和一个由时间戳拼接成的固定的参数callback；</p><p>返回值：验证码的类型及其相关的资源文件。</p></li><li><p>第三个请求：<code>https://api.geevisit.com/get.php?</code></p><p>入参：gt，challenge，callback以及第二个请求得到的资源文件信息。</p><p>返回值：新的challenge，带缺口的乱序错位验证码底图，不带缺口的乱序错位验证码底图以及滑块图</p></li><li><p>第四个请求：<code>https://api.geetest.com/ajax.php?</code></p><p>入参：gt，新的challenge，w值，callback</p><p>返回值：滑块验证码是否验证通过</p></li></ul><h4 id="关系梳理"><a href="#关系梳理" class="headerlink" title="关系梳理"></a>关系梳理</h4><p>为了描述方便分别把第一至四个请求命名为A~D。A从天眼查服务端拿到一个gt和challenge，B用拿到的gt，challenge以及当前时间戳向极验服务器请求并拿到验证码js文件，C利用B拿到的资源文件信息以及gt，challenge去请求极验服务器拿到滑块验证码带缺口和不带缺口的乱序底图，这些底图经过前段js文件渲染就呈现出我们看到的滑块验证码的样子；D请求通过传入gt，challenge，w值和callback请求极验服务器完成对滑块验证码的验证。</p><h3 id="滑块验证码底图还原与滑动距离计算"><a href="#滑块验证码底图还原与滑动距离计算" class="headerlink" title="滑块验证码底图还原与滑动距离计算"></a>滑块验证码底图还原与滑动距离计算</h3><h4 id="底图还原"><a href="#底图还原" class="headerlink" title="底图还原"></a>底图还原</h4><p>要想计算滑块需要移动的距离，就需要先将乱序的验证码图片变成有序。</p><p>先看下滑块的大小：</p><img src="https://raw.githubusercontent.com/beyond-heshipeng/blg-pic/main/pic/202204201632353.png?watermark/2/text/5YWz5rOo5b6u5L-h5YWs5LyX5Y-377ya6YCG5ZCR5LiA5q2l5q2l/font/5a6L5L2T/fontsize/300" alt="image-20220420163229256" style="zoom:50%;" /><p>图片大小 w &#x3D; 260px, h &#x3D; 116px。我们点击图片选择审查元素，可以看到底图是由52个div组成，每个div的w &#x3D; 10px，h &#x3D; 58px。分为上下两个半区，每个半区26个div。刚好组成260px * 116px的矩形验证码。如下图：</p><img src="https://raw.githubusercontent.com/beyond-heshipeng/blg-pic/main/pic/202204201636328.png?watermark/2/text/5YWz5rOo5b6u5L-h5YWs5LyX5Y-377ya6YCG5ZCR5LiA5q2l5q2l/font/5a6L5L2T/fontsize/300" alt="image-20220420163621256" style="zoom: 35%;" /><p>可以看到第一个div，即上半区左上角的第一个div，background-position &#x3D; -157px -58px。表示将background-image向左偏移157个像素，向上偏移58个像素，作为第一个div放在上半区最左边。由于前面分析过，每个div的宽是10px，高是58px。所以第一个div四个顶点在background-image上的相对坐标是(157, 58), (167, 58), (157, 116), (167, 116)。</p><p>同理，我们推测上半区第二个div的四个顶点的相对坐标分别是(145, 0), (155, 0), (145, 58), (155, 58)。</p><p>此外，background-image就是我们抓包分析的第三步获取到的乱序图。</p><p>知道了每一个个div的坐标，以及乱序的背景图，就可以通过从乱序图上裁剪出一个个div，然后再拼接到一起，这样不就构成了正确有序的图片。</p><p>知道了原理，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">div_offset = [</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">157</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    <span class="comment"># 省略若干行</span></span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">205</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restore_pic</span>(<span class="params">pic_path, new_pic_path</span>):</span><br><span class="line">    unordered_pic = Image.<span class="built_in">open</span>(pic_path)</span><br><span class="line">    ordered_pic = unordered_pic.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裁剪并拼接</span></span><br><span class="line">    <span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(div_offset):</span><br><span class="line">        im = unordered_pic.crop((math.fabs(d[<span class="string">&#x27;x&#x27;</span>]), math.fabs(d[<span class="string">&#x27;y&#x27;</span>]), math.fabs(d[<span class="string">&#x27;x&#x27;</span>]) + <span class="number">10</span>, math.fabs(d[<span class="string">&#x27;y&#x27;</span>]) + <span class="number">58</span>))</span><br><span class="line">        <span class="comment"># 上半区</span></span><br><span class="line">        <span class="keyword">if</span> d[<span class="string">&#x27;y&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">0</span>), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">58</span>), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    ordered_pic.save(new_pic_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    restore_pic(<span class="string">&quot;img.png&quot;</span>, <span class="string">&quot;new_img.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>解释一下上面用到的PIL库的几个方法：copy表示复制一张图片；crop表示以矩形区域裁剪，入参是一个四个元素的元组，分别是矩形左上角顶点的x坐标，左上角顶点的y坐标，右下角顶点的x坐标，右下角顶点的y坐标；paste表示粘贴图片。</p><p>测试效果如下：</p><p>不带缺口的乱序背景图以及还原后的图片：</p><p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121455248.jpg" alt="不带缺口的乱序背景图"><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121457563.jpg" alt="new_1"></p><p>带缺口的乱序背景图以及还原后的图片：</p><p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121507601.jpg" alt="2"><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121508668.jpg" alt="new_2"></p><p>还原图后边依然存在乱序的部分，但是这些乱序的地方已经超出260px，实际上不会展示到页面上，也即没有影响。</p><h4 id="计算滑动距离"><a href="#计算滑动距离" class="headerlink" title="计算滑动距离"></a>计算滑动距离</h4><p>既然底图已经还原了，接下来就是缺口位置的计算，从而得到滑块需要滑动的距离。缺口计算有2种方式，一种是采用深度模型识别缺口坐标，参考文章<a href="https://lyy077.github.io/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BC%BA%E5%8F%A3%E4%BD%8D%E7%BD%AE/">如何利用深度学习识别滑块验证码缺口位置</a>。</p><p>第二种是计算图片的每个像素点位置的色差去判断缺口，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">diff_rgb</span>(<span class="params">rgb1, rgb2</span>):</span><br><span class="line">    <span class="keyword">return</span> math.fabs(rgb1[<span class="number">0</span>] - rgb2[<span class="number">0</span>]) + math.fabs(rgb1[<span class="number">1</span>] - rgb2[<span class="number">1</span>]) + math.fabs(rgb1[<span class="number">2</span>] - rgb2[<span class="number">2</span>]) &gt; <span class="number">255</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_moving_dst</span>(<span class="params">complete_pic_path, incomplete_pic_path</span>):</span><br><span class="line">    complete_pic = Image.<span class="built_in">open</span>(complete_pic_path)</span><br><span class="line">    incomplete_pic = Image.<span class="built_in">open</span>(incomplete_pic_path)</span><br><span class="line"></span><br><span class="line">    w, h = complete_pic.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h):</span><br><span class="line">            complete_pic_pixel_rgb = complete_pic.getpixel((i, j))</span><br><span class="line">            incomplete_pic_pixel_rgb = incomplete_pic.getpixel((i, j))</span><br><span class="line">            <span class="keyword">if</span> diff_rgb(complete_pic_pixel_rgb, incomplete_pic_pixel_rgb):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="w参数逆向与滑块轨迹模拟"><a href="#w参数逆向与滑块轨迹模拟" class="headerlink" title="w参数逆向与滑块轨迹模拟"></a>w参数逆向与滑块轨迹模拟</h3><p>首先对geetest.6.0.9.js这个文件进行反混淆，将二进制数字转化为十进制数，将base64编码的字符串转化为ASCII码字符，最后将字面量还原。将Js文件进行反混淆处理后在浏览器中进行override，覆盖线上版本，进行本地调试。</p><h4 id="w参数逆向"><a href="#w参数逆向" class="headerlink" title="w参数逆向"></a>w参数逆向</h4><p>前面分析过，最终向极验后端提交的四个参数中，gt和challenge都是通过其它接口返回的，callback参数是当前时间戳生成的，只有w参数需要逆向。</p><p>全局搜索<code>&quot;w&quot;:</code>，发现如下代码：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305142101981.png" alt="image-20230514210118875" style="zoom: 67%;" /><p>可以看到，w是由r7z和H7z拼接而成。</p><h5 id="逆向r7z"><a href="#逆向r7z" class="headerlink" title="逆向r7z"></a>逆向r7z</h5><p>整理下代码逻辑如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r7z = p7B.<span class="title class_">Ha</span>(n0B.<span class="title function_">encrypt</span>(h7B.<span class="title function_">stringify</span>(Y7z), v7z.<span class="title function_">wb</span>()))</span><br></pre></td></tr></table></figure><p>先看最里面的，全局搜索wb，发现wb实际上调用的是C7B方法，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305142135040.png" alt="image-20230514213545968" style="zoom:67%;" /><p>再全局搜索下C7B(搜索的时候注意区分大小写，这样排除了很多干扰项)，发现C7B实际上是四次调用H1W方法，并把四次返回结果拼接在一起，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305142138981.png" alt="image-20230514213850874" style="zoom:67%;" /><p>再看下H1W方法的源码，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305142140806.png" alt="image-20230514214049697" style="zoom:67%;" /><p>不再调用其它封装的方法，综上，整理出来wb方法，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">H1W</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">65536</span> * (<span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>()) | <span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">substring</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wb = <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>();</span><br></pre></td></tr></table></figure><p>然后是h7B.stringify，经过测试，h7B.stringify这个方法的作用等同于JSON.stringify。</p><p>接着看下n0B.encrypt，定位到代码如图所示：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150131419.png" alt="image-20230515013105304" style="zoom:67%;" /><p>传入的三个参数，第一个r7W是JSON.stringify(Y7z)，第二个m7W是随机的字符串即上边的wb，第三个变量P7W未使用。简单分析下代码，不难看出这个encrypt方法实际上是对AES加密算法做了一个封装，然后自定义了一些逻辑。其中，m7W用作生成key，0000000000000000用作生成iv。</p><p>代码修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Encrypt</span>(<span class="params">word, key, iv</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(word);</span><br><span class="line">    <span class="keyword">let</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(srcs, key, &#123; <span class="attr">iv</span>: iv, <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>, <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="property">ciphertext</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">r7W, m7W, P7W</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> p2r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(m7W);</span><br><span class="line">    <span class="keyword">const</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&#x27;0000000000000000&#x27;</span>);   <span class="comment">//十六位十六进制数作为密钥偏移量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> <span class="variable constant_">W7W</span> = <span class="title class_">Encrypt</span>(r7W, key, iv), <span class="variable constant_">Z7W</span> = <span class="variable constant_">W7W</span>.<span class="property">words</span>, <span class="variable constant_">H7W</span> = <span class="variable constant_">W7W</span>.<span class="property">sigBytes</span>, d7W = [], l7W = <span class="number">0</span>; p2r * (p2r + <span class="number">1</span>) * p2r % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; l7W &lt; <span class="variable constant_">H7W</span>; l7W++) &#123;</span><br><span class="line">        <span class="keyword">var</span> q7W = <span class="variable constant_">Z7W</span>[l7W &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - l7W % <span class="number">4</span> * <span class="number">8</span> &amp; <span class="number">255</span>;</span><br><span class="line">        d7W[<span class="string">&quot;push&quot;</span>](q7W);</span><br><span class="line">        p2r = p2r &gt; <span class="number">33997</span> ? p2r / <span class="number">5</span> : p2r * <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d7W;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码用到了<code>crypto-js</code>包，需要用命令<code>npm install crypto-js</code>安装。</p><p>再接着看下p7B.Ha这个方法，代码如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150146459.png" alt="image-20230515014645346" style="zoom: 67%;" /><p>Ha调用T6B.Ga方法，跟进去：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150149642.png" alt="image-20230515014959508" style="zoom:50%;" /><p>代码如图，直接抠出来整个Ga代码，只不过图中圈出的this在node环境中需要补一下，经过调试，this中包含如下的方法和值友用到：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150153931.png" alt="image-20230515015327784" style="zoom:50%;" /><p>经过流程平坦化之后，完整代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ga</span> = <span class="keyword">function</span> (<span class="params">o6B, t6B</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> D5r = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">var</span> I9z = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">X6B</span> = &#123;</span><br><span class="line">        <span class="string">&quot;wa&quot;</span>: <span class="number">7274496</span>,</span><br><span class="line">        <span class="string">&quot;xa&quot;</span>: <span class="number">9483264</span>,</span><br><span class="line">        <span class="string">&quot;ya&quot;</span>: <span class="number">19220</span>,</span><br><span class="line">        <span class="string">&quot;za&quot;</span>: <span class="number">235</span>,</span><br><span class="line">        <span class="string">&quot;Aa&quot;</span>: <span class="number">24</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable constant_">X6B</span>.<span class="property">Da</span> = <span class="keyword">function</span>(<span class="params">r0B</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> v9z = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> h0B = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789()&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (r0B &lt; <span class="number">0</span> || r0B &gt;= h0B[<span class="string">&quot;length&quot;</span>]) &amp;&amp; v9z * (v9z + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">8</span> ? <span class="string">&quot;.&quot;</span> : h0B[<span class="string">&quot;charAt&quot;</span>](r0B);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable constant_">X6B</span>.<span class="property">Fa</span> = <span class="keyword">function</span>(<span class="params">R0B, C0B</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable constant_">R0B</span> &gt;&gt; <span class="variable constant_">C0B</span> &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    t6B || (t6B = <span class="variable constant_">X6B</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">N6B</span> = <span class="keyword">function</span> (<span class="params">Q6B, x6B</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable constant_">I6B</span> = <span class="number">0</span>, v6B = t6B[<span class="string">&quot;Aa&quot;</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (v6B &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v6B &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="number">1</span> === <span class="variable constant_">X6B</span>[<span class="string">&quot;Fa&quot;</span>](x6B, v6B) &amp;&amp; (<span class="variable constant_">I6B</span> = (<span class="variable constant_">I6B</span> &lt;&lt; <span class="number">1</span>) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Fa&quot;</span>](<span class="variable constant_">Q6B</span>, v6B));</span><br><span class="line">                v6B -= <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable constant_">I6B</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable constant_">I6B</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    j6B = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="variable constant_">K6B</span> = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    c6B = o6B[<span class="string">&quot;length&quot;</span>],</span><br><span class="line">    f6B = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (f6B &lt; c6B &amp;&amp; I9z * (I9z + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable constant_">B6B</span>;</span><br><span class="line">        <span class="keyword">if</span> (f6B + <span class="number">2</span> &lt; c6B) &#123;</span><br><span class="line">            <span class="variable constant_">B6B</span> = (o6B[f6B] &lt;&lt; <span class="number">16</span>) + (o6B[f6B + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + o6B[f6B + <span class="number">2</span>], j6B += <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;wa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;xa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;ya&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;za&quot;</span>]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> n6B = c6B % <span class="number">3</span>;</span><br><span class="line">            <span class="number">2</span> === n6B ? (<span class="variable constant_">B6B</span> = (o6B[f6B] &lt;&lt; <span class="number">16</span>) + (o6B[f6B + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>), j6B += <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;wa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;xa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;ya&quot;</span>])), <span class="variable constant_">K6B</span> = t6B[<span class="string">&quot;r&quot;</span>]) : <span class="number">1</span> === n6B &amp;&amp; (<span class="variable constant_">B6B</span> = o6B[f6B] &lt;&lt; <span class="number">16</span>, j6B += <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;wa&quot;</span>])) + <span class="variable constant_">X6B</span>[<span class="string">&quot;Da&quot;</span>](<span class="title function_">N6B</span>(<span class="variable constant_">B6B</span>, t6B[<span class="string">&quot;xa&quot;</span>])), <span class="variable constant_">K6B</span> = t6B[<span class="string">&quot;r&quot;</span>] + t6B[<span class="string">&quot;r&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        I9z = I9z &gt; <span class="number">53617</span> ? I9z - <span class="number">7</span> : I9z + <span class="number">7</span>;</span><br><span class="line">        f6B += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;res&quot;</span>: j6B,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>: <span class="variable constant_">K6B</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Ha</span> = <span class="keyword">function</span> (<span class="params">M6B</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">L6B</span> = <span class="title class_">Ga</span>(<span class="variable constant_">M6B</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">L6B</span>[<span class="string">&quot;res&quot;</span>] + <span class="variable constant_">L6B</span>[<span class="string">&quot;end&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后看下压轴部分，Y7z的代码：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305150510333.png" alt="image-20230515051007195" style="zoom:67%;" /><p>可以看到Y7z的属性有userresponse, passtime, imgload, aa, ep, rp。</p><p>先看下i7B.C方法，直接将这个方法扣下来拿来用即可，在node中测试不需要补环境。</p><p>接着看下c7B[“a”]这个方法，实际上是取得c7B[“Na”]这个对象的属性，为了方便跟踪这个对象，在浏览器watch栏中添加这个对象，然后给滑块添加一个断点，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305151447578.png" alt="image-20230515144736431" style="zoom: 50%;" /><p>拖动滑块，进入单步调试，调试结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305151438513.png" alt="image-20230515143849349" style="zoom: 50%;" /><p>可以看到c7B[“Na”]对象的相关属性来自于L7z这个光标事件。其中有一个数组arr，里面每一个元素都是一个三维向量，分别代表x轴坐标，y轴坐标和经过的时间，这个数组即用来保存滑块的移动轨迹。</p><p>其中passtime是滑块滑动所需的时间，可以由轨迹数组计算出来。ep是版本号，这里写死为<code>&#123;v: &quot;6.0.9&quot;&#125;</code>即可。aa则是由轨迹数组经过加密生成的字符串。imgload是加载的图片数量，经过测试，给一个随机值即可。userresponse是调用i7B[“C”]生成的，这个方法已经扣下来了，参数g7z和challenge，challenge是由接口返回，所以只需要计算g7z即可。</p><p>经过调试，passtime和g7z的计算方法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passtime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> g7z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; X1z.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    passtime += X1z[index][<span class="number">2</span>];</span><br><span class="line">    g7z += X1z[index][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">g7z -= X1z[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>紧接着看下aa，断点进入，代码如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305151549318.png" alt="image-20230515154908221" style="zoom:67%;" /><p>整理下这个t方法，并且抠出其调用的方法，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">O6z = <span class="keyword">function</span> (<span class="params">r6z</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> d6z = <span class="string">&quot;()*,-./0123456789:?@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqr&quot;</span>,</span><br><span class="line">        m6z = d6z[<span class="string">&quot;length&quot;</span>],</span><br><span class="line">        Z6z = <span class="string">&quot;&quot;</span>,</span><br><span class="line">        H6z = <span class="title class_">Math</span>[<span class="string">&quot;abs&quot;</span>](r6z),</span><br><span class="line">        W6z = <span class="built_in">parseInt</span>(H6z / m6z);</span><br><span class="line">    W6z &gt;= m6z &amp;&amp; (W6z = m6z - <span class="number">1</span>), W6z &amp;&amp; (Z6z = d6z[<span class="string">&quot;charAt&quot;</span>](W6z)), H6z %= m6z;</span><br><span class="line">    <span class="keyword">var</span> q6z = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> r6z &lt; <span class="number">0</span> &amp;&amp; (q6z += <span class="string">&quot;!&quot;</span>), Z6z &amp;&amp; (q6z += <span class="string">&quot;$&quot;</span>), q6z + Z6z + d6z[<span class="string">&quot;charAt&quot;</span>](H6z);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u6z = <span class="keyword">function</span> (<span class="params">R6z</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t8r = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">var</span> f5r = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">var</span> z6z = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">0</span>], [<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">3</span>, <span class="number">0</span>], [<span class="number">2</span>, -<span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>]],</span><br><span class="line">        h6z = <span class="number">0</span>,</span><br><span class="line">        C6z = z6z[<span class="string">&quot;length&quot;</span>];</span><br><span class="line">    <span class="keyword">while</span> (h6z &lt; C6z &amp;&amp; f5r * (f5r + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (R6z[<span class="number">0</span>] === z6z[h6z][<span class="number">0</span>] &amp;&amp; R6z[<span class="number">1</span>] === z6z[h6z][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;stuvwxyz~&quot;</span>[h6z];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f5r = f5r &gt;= <span class="number">62252</span> ? f5r - <span class="number">6</span> : f5r + <span class="number">6</span>;</span><br><span class="line">            h6z++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">function</span> (<span class="params">X1z</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o5r = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">var</span> N1z,</span><br><span class="line">        f1z = [],</span><br><span class="line">        B1z = [],</span><br><span class="line">        o1z = [],</span><br><span class="line">        t1z = <span class="number">0</span>,</span><br><span class="line">        j1z = X1z[<span class="string">&quot;length&quot;</span>];</span><br><span class="line">    <span class="keyword">while</span> (o5r * (o5r + <span class="number">1</span>) % <span class="number">2</span> + <span class="number">8</span> &amp;&amp; t1z &lt; j1z) &#123;</span><br><span class="line">        N1z = <span class="title function_">u6z</span>(X1z[t1z]), N1z ? B1z[<span class="string">&quot;push&quot;</span>](N1z) : (f1z[<span class="string">&quot;push&quot;</span>](<span class="title function_">O6z</span>(X1z[t1z][<span class="number">0</span>])), B1z[<span class="string">&quot;push&quot;</span>](<span class="title function_">O6z</span>(X1z[t1z][<span class="number">1</span>]))), o1z[<span class="string">&quot;push&quot;</span>](<span class="title function_">O6z</span>(X1z[t1z][<span class="number">2</span>]));</span><br><span class="line">        o5r = o5r &gt;= <span class="number">17705</span> ? o5r / <span class="number">3</span> : o5r * <span class="number">3</span>;</span><br><span class="line">        t1z++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f1z[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>) + <span class="string">&quot;!!&quot;</span> + B1z[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>) + <span class="string">&quot;!!&quot;</span> + o1z[<span class="string">&quot;join&quot;</span>](<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>t方法调用传入的X1z就是滑块滑动产生的轨迹数组。</p><p>这里调试会发现，生成的aa与页面上的不一致，实际上F7z除了由上边的t方法修改之外，还有一个地方也修改了，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305160007452.png" alt="image-20230516000744285" style="zoom:67%;" /><p>调用了e7B.u方法，接收3个参数，第一个是上面t方法生成的初步的F7z，第二个是c，第三个是s，其中c和s都是通过接口拿到。所以这里的重点工作是抠出e7B.u方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e7B = &#123;&#125;;</span><br><span class="line">e7B.<span class="property">u</span> = <span class="keyword">function</span> (<span class="params">Q1z, v1z, T1z</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> K5r = <span class="number">2</span>, j5r = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> ((!v1z || !T1z) &amp;&amp; j5r * (j5r + <span class="number">1</span>) * j5r % <span class="number">2</span> === <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> Q1z;</span><br><span class="line">    <span class="keyword">var</span> i1z, x1z = <span class="number">0</span>, c1z = Q1z, y1z = v1z[<span class="number">0</span>], k1z = v1z[<span class="number">2</span>], L1z = v1z[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">while</span> ((i1z = T1z[<span class="string">&quot;substr&quot;</span>](x1z, <span class="number">2</span>)) &amp;&amp; K5r * (K5r + <span class="number">1</span>) * K5r % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        x1z += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> n1z = <span class="built_in">parseInt</span>(i1z, <span class="number">16</span>),</span><br><span class="line">            M1z = <span class="title class_">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](n1z),</span><br><span class="line">            I1z = (y1z * n1z * n1z + k1z * n1z + L1z) % Q1z[<span class="string">&quot;length&quot;</span>];</span><br><span class="line">        c1z = c1z[<span class="string">&quot;substr&quot;</span>](<span class="number">0</span>, I1z) + M1z + c1z[<span class="string">&quot;substr&quot;</span>](I1z);</span><br><span class="line">        K5r = K5r &gt; <span class="number">10375</span> ? K5r / <span class="number">8</span> : K5r * <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c1z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后看下rp属性，不难看出rp是由gt，challenge的前32位，passtime经过md5加密算法生成。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> md5 = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line"></span><br><span class="line">Y7z[<span class="string">&quot;rp&quot;</span>] = md5.<span class="title function_">update</span>(gt + challenge.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">32</span>) + passtime).<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br></pre></td></tr></table></figure><p>至此，w参数的前半部分r7z剖析完了。</p><h5 id="逆向H7z"><a href="#逆向H7z" class="headerlink" title="逆向H7z"></a>逆向H7z</h5><p>进入断点调试，可以看到H7z是调用V7z.Ub方法生成。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305152250030.png" alt="image-20230515225024832" style="zoom:67%;" /><p>抠出V7z.Ub方法，并补全其中用到的RSA算法，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> jsbn <span class="keyword">import</span> <span class="title class_">RSAKey</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_">get_H7z</span>(wb):</span><br><span class="line">    rsa = <span class="title class_">RSAKey</span>()</span><br><span class="line">    rsa.<span class="title function_">setPublic</span>(<span class="string">&quot;00C1E3934D1614465B33053E7F48EE4EC87B14B95EF88947713D25EECBFF7E74C7977D02DC1D9451F79DD&quot;</span></span><br><span class="line">                  <span class="string">&quot;5D1C10C29ACB6A9B4D6FB7D0A0279B6719E1772565F09AF627715919221AEF91899CAE08C0D686D748B20&quot;</span></span><br><span class="line">                  <span class="string">&quot;A3603BE2318CA6BC2B59706592A9219D0BF05C9F65023A21D2330807252AE0066D59CEEFA5F2748EA80BAB81&quot;</span>,</span><br><span class="line">                  <span class="string">&quot;10001&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rsa.<span class="title function_">encrypt</span>(wb)</span><br></pre></td></tr></table></figure><p>代码说明：需要安装RSA库，用<code>pip install pyjsbn-rsa</code>命令安装即可，因为没有找到合适的Node库，所以采用Python库。其中的RSA public key相关信息单步调试的时候可以拿到，wb是一个随机生成的字符串，产生随机字符串的代码在r7z部分已经逆向完成。<strong>特别注意：r7z和H7z通过这个随机字符串关联起来，生成r7z和H7z用到的随机字符串必须是同一个，所以wb最好定义为全局变量，并且全局生成一次。</strong></p><h4 id="滑块轨迹模拟"><a href="#滑块轨迹模拟" class="headerlink" title="滑块轨迹模拟"></a>滑块轨迹模拟</h4><p>极验滑块的轨迹主要有三种方式，一种是直接用网上现有的滑动轨迹模型，另一种是自己搭建模型自己训练。这里介绍第三种，手动滑动滑块得到正确的拼图，同时保存滑块轨迹，数据结构采用key-value形式，key是滑块需要的滑动的距离，value是轨迹数组，通过上百次的滑动，预先建立一个轨迹字典，下次滑动时通过距离从这个字典中直接拿到轨迹数组。</p><p>具体实现如下：</p><ol><li>用Flask搭建一个轨迹收集服务</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> cross_origin</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/track&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@cross_origin(<span class="params">supports_credentials=<span class="literal">True</span>, methods=<span class="string">&quot;*&quot;</span>, allow_headers=<span class="string">&quot;*&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@cross_origin()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">track</span>():</span><br><span class="line">    tracks = pickle.load(<span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line">    d = json.loads(request.data.decode())</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载乱序的缺口图和完整图</span></span><br><span class="line">    download_image(d[<span class="string">&#x27;bg&#x27;</span>], <span class="string">&quot;bg.png&quot;</span>)</span><br><span class="line">    download_image(d[<span class="string">&#x27;fullbg&#x27;</span>], <span class="string">&quot;fullbg.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 还原乱序的缺口图和完整图</span></span><br><span class="line">    restore_pic(<span class="string">&quot;bg.png&quot;</span>, <span class="string">&quot;new_bg.png&quot;</span>)</span><br><span class="line">    restore_pic(<span class="string">&quot;fullbg.png&quot;</span>, <span class="string">&quot;new_fullbg.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取缺口的位置</span></span><br><span class="line">    x = get_moving_dst(<span class="string">&quot;new_bg.png&quot;</span>, <span class="string">&quot;new_fullbg.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tracks.get(x):</span><br><span class="line">        tracks[x].append(&#123;<span class="string">&#x27;track&#x27;</span>: d[<span class="string">&#x27;track&#x27;</span>], <span class="string">&#x27;g7z&#x27;</span>: d[<span class="string">&#x27;g7z&#x27;</span>]&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tracks[x] = [&#123;<span class="string">&#x27;track&#x27;</span>: d[<span class="string">&#x27;track&#x27;</span>], <span class="string">&#x27;g7z&#x27;</span>: d[<span class="string">&#x27;g7z&#x27;</span>]&#125;]</span><br><span class="line">    pickle.dump(tracks, <span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;wb&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">url, image_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(requests.get(url).content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    track_data = &#123;&#125;</span><br><span class="line">    pickle.dump(track_data, <span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;wb&quot;</span>))</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8088</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>注入Js代码</li></ol><p>注入Js代码，每次滑动时向收集服务发送请求，将轨迹数组传递过去。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Http</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="keyword">const</span> url=<span class="string">&#x27;http://127.0.0.1:8088/track&#x27;</span>;</span><br><span class="line"><span class="title class_">Http</span>.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, url);</span><br><span class="line"><span class="title class_">Http</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求成功, track: &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(X1z));</span><br><span class="line"><span class="comment">// 请求结束后,在此处写处理代码</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Http</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line"><span class="attr">track</span>: X1z,</span><br><span class="line">    <span class="attr">bg</span>: <span class="regexp">/\&quot;(.*?)\&quot;/g</span>.<span class="title function_">exec</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;gt_cut_bg_slice&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundImage</span>)[<span class="number">1</span>],</span><br><span class="line"><span class="attr">fullbg</span>: <span class="regexp">/\&quot;(.*?)\&quot;/g</span>.<span class="title function_">exec</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;gt_cut_fullbg_slice&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundImage</span>)[<span class="number">1</span>],</span><br><span class="line">    g7z</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>代码插入位置如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204281558130.png" alt="image-20220428155854981" style="zoom: 50%;" /><p>通过手动过滑块就可以把轨迹数组收集到tracks.pkl文件了。</p><h3 id="完整代码测试及总结"><a href="#完整代码测试及总结" class="headerlink" title="完整代码测试及总结"></a>完整代码测试及总结</h3><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305170053416.png" alt="image-20230517005330218" style="zoom: 33%;" /><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>极验滑块之前发过相关的文章了，当时用到的方法是将整个Js文件抠下来然后补环境，整个代码有大几千行，这次换了个思路，只是抠调用到的代码，整个下来也就300行左右。</p><p>若需要完整代码，扫描加微信。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305170100384.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="AES" scheme="http://example.com/tags/AES/"/>
    
    <category term="RSA" scheme="http://example.com/tags/RSA/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>如何利用深度学习识别滑块验证码缺口位置</title>
    <link href="http://example.com/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BC%BA%E5%8F%A3%E4%BD%8D%E7%BD%AE/"/>
    <id>http://example.com/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BC%BA%E5%8F%A3%E4%BD%8D%E7%BD%AE/</id>
    <published>2023-05-12T09:15:57.000Z</published>
    <updated>2023-05-24T13:44:40.422Z</updated>
    
    <content type="html"><![CDATA[<p>极验滑块验证码缺口位置的计算有2种方式，第一种通过计算像素点差值来定位缺口位置，在<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%A4%A9%E7%9C%BC%E6%9F%A5%E8%BF%87%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81/">JS逆向案例——天眼查过极验滑块验证码</a>一文中介绍过，今天这篇文章介绍第二种方式，如何利用深度学习识别缺口的位置。这里采用华为云<strong>ModelArts</strong>云服务去训练缺口识别模型。</p><h3 id="数据集的准备"><a href="#数据集的准备" class="headerlink" title="数据集的准备"></a>数据集的准备</h3><h4 id="收集验证码图片"><a href="#收集验证码图片" class="headerlink" title="收集验证码图片"></a>收集验证码图片</h4><p>先上代码，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">div_offset = [</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">157</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">145</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">265</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">277</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">181</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">169</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">241</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">253</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">109</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">97</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">289</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">301</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">85</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">73</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">25</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">37</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">13</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">121</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">133</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">61</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">49</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">217</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">229</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">205</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">193</span>, <span class="string">&quot;y&quot;</span>: -<span class="number">58</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">145</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">157</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">277</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">265</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">169</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">181</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">253</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">241</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">97</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">109</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">301</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">289</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">73</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">85</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">37</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">25</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">1</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">13</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">133</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">121</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">49</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">61</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">229</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">217</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">193</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>: -<span class="number">205</span>, <span class="string">&quot;y&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_pic</span>(<span class="params">pic_path, new_pic_path</span>):</span><br><span class="line">    unordered_pic = Image.<span class="built_in">open</span>(pic_path)</span><br><span class="line">    ordered_pic = unordered_pic.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裁剪并拼接</span></span><br><span class="line">    <span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(div_offset):</span><br><span class="line">        im = unordered_pic.crop((math.fabs(d[<span class="string">&#x27;x&#x27;</span>]), math.fabs(d[<span class="string">&#x27;y&#x27;</span>]), math.fabs(d[<span class="string">&#x27;x&#x27;</span>]) + <span class="number">10</span>, math.fabs(d[<span class="string">&#x27;y&#x27;</span>]) + <span class="number">58</span>))</span><br><span class="line">        <span class="comment"># 上半区</span></span><br><span class="line">        <span class="keyword">if</span> d[<span class="string">&#x27;y&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">0</span>), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">58</span>), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    ordered_pic.save(new_pic_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_pic</span>(<span class="params">store_name</span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://www.tianyancha.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.tianyancha.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-site&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;(KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X-TYCID&#x27;</span>: <span class="string">&#x27;70c68810ddbd11eda0a455532f9618b6&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;112&quot;, &quot;Google Chrome&quot;;v=&quot;112&quot;, &quot;Not:A-Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;_&#x27;</span>: <span class="string">&#x27;1683799958183&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://napi-huawei.tianyancha.com/validate/init&#x27;</span>, params=params, headers=headers)</span><br><span class="line">    resp = json.loads(response.text)</span><br><span class="line">    data = json.loads(resp[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    gt = data[<span class="string">&#x27;gt&#x27;</span>]</span><br><span class="line">    challenge = data[<span class="string">&#x27;challenge&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.tianyancha.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;cross-site&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;Chrome/112.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;112&quot;, &quot;Gostiogle Chrome&quot;;v=&quot;112&quot;, &quot;Not:A-Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(</span><br><span class="line">        <span class="string">f&#x27;https://api.geevisit.com/get.php?gt=<span class="subst">&#123;gt&#125;</span>&amp;challenge=<span class="subst">&#123;challenge&#125;</span>&amp;product=popup&amp;offline=false&amp;&#x27;</span></span><br><span class="line">        <span class="string">f&#x27;api_server=api.geevisit.com&amp;protocol=https://&amp;type=slide&amp;path=/static/js/geetest.6.0.9.js&#x27;</span></span><br><span class="line">        <span class="string">f&#x27;&amp;callback=geetest_<span class="subst">&#123;<span class="built_in">str</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))&#125;</span>&#x27;</span>,</span><br><span class="line">        headers=headers,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    bg_url = urljoin(<span class="string">&quot;https://static.geetest.com/&quot;</span>, re.findall(<span class="string">&quot;\&quot;bg\&quot;: \&quot;(.*?)\&quot;&quot;</span>, response.text)[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;下载验证码图片，地址：&quot;</span> + bg_url)</span><br><span class="line">    resp = requests.get(bg_url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(store_name, <span class="string">&quot;wb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(resp.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        name = <span class="string">&quot;input/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        download_pic(name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;保存乱序验证码图片，保存位置：&quot;</span> + name)</span><br><span class="line">        new_name = <span class="string">&quot;output/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        recover_pic(name, new_name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;还原乱序验证码图片，保存位置：&quot;</span> + new_name)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>解释主要用到的2个方法，<code>download_pic</code>下载乱序的验证码图片，<code>recover_pic</code>还原乱序的验证码图片。关于下载验证码的请求逻辑，参考<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E5%BA%95%E5%9B%BE%E8%BF%98%E5%8E%9F/">JS逆向案例——极验滑块验证码底图还原</a>。</p><p>运行效果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121752382.png" alt="image-20230512175231221" style="zoom:50%;" /><p>下载好图片后，将图片上传到华为云对象存储，具体方法可以自行网上查阅。这里下载并上传了100张图片。</p><h4 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h4><p>通过网址<code>https://console.huaweicloud.com/modelarts/?region=cn-north-4#/dashboard</code>打开<strong>ModelArts</strong>主界面，然后点击主动学习：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121808453.png" alt="image-20230512180852319" style="zoom: 33%;" /><p>可以看到ModelArts支持的全部功能，这里选择第二个物体检测，点击创建项目：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121810001.png" alt="image-20230512181042875" style="zoom:33%;" /><p>项目名称和数据集名称可以采用自动生成的，数据集输入位置填刚才上传验证码的那个bucket的目录，数据集输出位置就在此bucket下新建一个空目录即可。最后点击创建项目。</p><p>然后点击未标注：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121815728.png" alt="image-20230512181548602" style="zoom:33%;" /><p>接着随意点击一张未标注的图片，对图片进行标注：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121816523.png" alt="标注1" style="zoom:33%;" /><p>标注完成之后，后边会显示缺口相对于背景图的坐标：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121817355.png" alt="标注2" style="zoom:33%;" /><p>标注完成之后点击选择下一张标注，数据集一共100张，大概10多分钟标注完。</p><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>数据集标注完之后，点击开始训练：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121820363.png" alt="开始训练" style="zoom:33%;" /><p>然后会提示模型训练中：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121821223.png" alt="训练中" style="zoom:33%;" /><p>数据集样本比较少，训练大概5-10分钟，完成后界面如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121823354.png" alt="训练完成" style="zoom:33%;" /><p>注意：之所以准确率只有94%，有2个原因，一是样本数量少；二是数据标注为了节约时间没有太细致。改善这2点原因让准确率接近100%不是不可能。</p><h3 id="模型部署"><a href="#模型部署" class="headerlink" title="模型部署"></a>模型部署</h3><p>点击部署按钮：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121825554.png" alt="部署" style="zoom:33%;" /><p>直接点击下一步即可。</p><h3 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h3><p>上传一张图片测试：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121828023.png" alt="预测测试" style="zoom:33%;" /><p>可以看到缺口位置基本识别正确。</p><p>再上传一张带干扰的图片测试：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305121829716.png" alt="带干扰的预测" style="zoom:33%;" /><p>也正确识别。</p><p>至此，完结撒花。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;极验滑块验证码缺口位置的计算有2种方式，第一种通过计算像素点差值来定位缺口位置，在&lt;a href=&quot;https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%A4</summary>
      
    
    
    
    <category term="深度学习" scheme="http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="云服务" scheme="http://example.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向之浏览器内存漫游解决方案</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E4%B9%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2023-04-12T14:40:21.000Z</published>
    <updated>2023-05-19T13:53:10.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器内存漫游"><a href="#浏览器内存漫游" class="headerlink" title="浏览器内存漫游"></a>浏览器内存漫游</h3><p>所谓浏览器内存漫游就是通过内存中变量级别的抓包监控，把浏览器中js加载过程中的变量值全部存储下来，从而达到可以随意检索浏览器内存中的数据。</p><p>有了浏览器内存漫游，就可以通过某个接口的变量的值反查变量生成的地方，从而快速定位接口参数，这在JS逆向这一块非常方便。</p><p>在<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E4%B9%8BFiddler%E7%BC%96%E7%A8%8B%E7%8C%AB%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/">JS逆向之Fiddler编程猫插件使用</a>一文中提到过一种浏览器内存漫游的方案，那就是使用Fiddler+编程猫插件，然而编程猫插件只支持windows平台，而且两个软件配置起来有点麻烦。这里介绍一个新的库：<a href="https://github.com/JSREI/ast-hook-for-js-RE%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%E8%B7%A8%E5%B9%B3%E5%8F%B0%EF%BC%8C%E5%B9%B6%E4%B8%94%E9%85%8D%E7%BD%AE%E7%AE%80%E5%8D%95%E3%80%82">https://github.com/JSREI/ast-hook-for-js-RE，这个工具跨平台，并且配置简单。</a></p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>以mac环境为例，其它环境大同小异。</p><ol><li>克隆项目到本地文件夹</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/CC11001100/ast-hook-for-js-RE.git</span><br></pre></td></tr></table></figure><ol start="2"><li>安装依赖</li></ol><p>进入项目文件夹，并安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ast-hook-for-js-RE</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><ol start="3"><li>安装anyproxy并安装证书</li></ol><p>由于ast-hook-for-js是依赖于anyproxy抓包的，所以需要先安装anyproxy：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g anyproxy</span><br></pre></td></tr></table></figure><p>通过命令安装anyproxy。</p><p>要代理https，还需生成CA证书并添加信任，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anyproxy-ca</span><br></pre></td></tr></table></figure><p>会在当前目录下生成一个rootCA.crt文件，双击这个文件，然后选择系统，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182321395.png" style="zoom: 33%;" /><p>进入到系统，刚才添加的证书默认是不信任，如图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182324900.png" alt="image-20230518232430790" style="zoom:33%;" /><p>双击这个文件，展开信任栏，选择始终信任，如下图：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182327693.png" style="zoom:33%;" /><p>然后退出保存修改即可。</p><ol start="4"><li>启动项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src/proxy-server</span><br><span class="line">node proxy-server.js</span><br></pre></td></tr></table></figure><p>注：<strong>一定要进入到proxy-server.js所在的目录后再运行proxy-server.js，否则会出现莫名的错误</strong>。</p><ol start="5"><li>配置系统代理</li></ol><p>打开设置，搜索代理：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182331135.png" alt="image-20230518233138014" style="zoom:33%;" /><p>点击代理，配置如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182332762.png" alt="image-20230518233258653" style="zoom:33%;" /><p>至此，安装配置完成。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>以极验为例，浏览器中打开<a href="https://gt4.geetest.com/%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%89%93%E5%BC%80%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E8%BF%9B%E5%85%A5network%E6%A0%8F%E3%80%82%E6%89%BE%E5%88%B0%E5%8A%A0%E8%BD%BD%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%B9%B6%E9%9A%8F%E4%BE%BF%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%EF%BC%8C%E6%AF%94%E5%A6%82challenge%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A">https://gt4.geetest.com/，并且打开控制台，进入network栏。找到加载验证码的请求，并随便复制一个请求参数，比如challenge，如下图：</a></p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182337106.png" alt="image-20230518233753024" style="zoom: 50%;" /><p>然后切换到console控制台，输入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hook.<span class="title function_">search</span>(<span class="string">&quot;e7116cce-9779-4cad-be71-f0117681e781&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305182340970.png" alt="image-20230518234009822" style="zoom: 39%;" /><p>这样就根据值查找到了需要逆向的入参，点击最后的一个代码位置，进入到相关代码位置，如下：</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305192152414.png" alt="image-20230518234233992" style="zoom:67%;" /><p>可以看到challenge是由uuid方法生成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;浏览器内存漫游&quot;&gt;&lt;a href=&quot;#浏览器内存漫游&quot; class=&quot;headerlink&quot; title=&quot;浏览器内存漫游&quot;&gt;&lt;/a&gt;浏览器内存漫游&lt;/h3&gt;&lt;p&gt;所谓浏览器内存漫游就是通过内存中变量级别的抓包监控，把浏览器中js加载过程中的变量值全部存储下来，从</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="浏览器" scheme="http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="内存漫游" scheme="http://example.com/tags/%E5%86%85%E5%AD%98%E6%BC%AB%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之去掉未被调用的函数</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/</id>
    <published>2022-05-28T13:44:53.000Z</published>
    <updated>2023-05-12T17:10:13.762Z</updated>
    
    <content type="html"><![CDATA[<p>本文接上一篇 <a href="AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F">AST解JS混淆之去掉未被使用的变量</a>，去掉未被调用的函数，其思路与去掉未被使用的变量思路区别不大，在某些情况下，二者是通用的。如下：</p><p>需要清洗的代码依旧是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m, n;</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">a</span>() + <span class="number">1</span>; </span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&quot;Wow&quot;</span>;</span><br></pre></td></tr></table></figure><p>跟前面去掉未使用变量的代码基本一致，略作修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="string">&quot;VariableDeclarator|FunctionDeclaration&quot;</span>(path) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id&#125; = path.<span class="property">node</span>;</span><br><span class="line">        <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(id.<span class="property">name</span>);</span><br><span class="line">        <span class="comment">// 如果变量被修改过，不去掉</span></span><br><span class="line">        <span class="keyword">if</span> (!binding || binding.<span class="property">constantViolations</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果变量未被引用，去掉</span></span><br><span class="line">        <span class="keyword">if</span> (binding.<span class="property">referencePaths</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          path.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意”VariableDeclarator|FunctionDeclaration”这种写法，如果是想匹配多个节点，用|分割即可，但是得用双引号括起来。这样子就会对变量和函数同时应用下面的规则，即看变量或函数是否被修改过，是否存在引用。</p><p>结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> m, k;</span><br><span class="line">  m++;</span><br><span class="line">  k++;</span><br><span class="line">  <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到多余的变量以及未被调用的函数被去掉了。</p><p>但是有一种特殊情况需要考虑到，那就是当遇到函数体里面定义的变量与函数名同名时，就会存在作用域的问题，这种情况下，运用上面的代码去清晰函数和变量时，就不会起作用了。</p><p>比如说如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;Hello,AST&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然函数a未被调用，但是变量a存在引用关系。我们使用<code>Scope.dump()</code>输出一下作用域与变量信息，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-143413.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-143413.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-143413.png</div>            </figure><p>可以看到有2个不同作用域的a，一个a是存在于作用域Program，另一个a是存在于作用域FunctionDeclaration。由于是同样的名字，所以我们在使用代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;id&#125; = path.<span class="property">node</span>;</span><br><span class="line"><span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(id.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>它应该会使用哪个a呢？我们来看看getBinding的源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getBinding</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> scope = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">const</span> binding = scope.<span class="title function_">getOwnBinding</span>(name);</span><br><span class="line"><span class="keyword">if</span> (binding) &#123;</span><br><span class="line"><span class="keyword">return</span> binding;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (scope = scope.<span class="property">parent</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，不停的在遍历父级作用域，直到获取 binding 为止，由于是 do-while循环，所以会先从当前的作用域开始遍历。而对于上面的特例来说，会优先遍历FunctionDeclaration的作用域，因为这里函数作用域本身就是Program。</p><p>所以只需要对之前的代码略加修改即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="string">&quot;VariableDeclarator|FunctionDeclaration&quot;</span>(path) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id&#125; = path.<span class="property">node</span>;</span><br><span class="line">        <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="property">parent</span>.<span class="title function_">getBinding</span>(id.<span class="property">name</span>);</span><br><span class="line">        <span class="comment">// 如果变量被修改过，不去掉</span></span><br><span class="line">        <span class="keyword">if</span> (!binding || binding.<span class="property">constantViolations</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果变量未被引用，去掉</span></span><br><span class="line">        <span class="keyword">if</span> (binding.<span class="property">referencePaths</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          path.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>const binding = path.scope.parent.getBinding(id.name);</code> 这个就是修改的地方，即直接从父作用域开始遍历，这样避免了同名导致的遍历错误作用域的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文接上一篇 &lt;a href=&quot;AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之AST基础</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8BAST%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8BAST%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-28T12:32:08.000Z</published>
    <updated>2023-05-12T17:09:46.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识AST"><a href="#认识AST" class="headerlink" title="认识AST"></a>认识AST</h1><p>打开 <a href="https://astexplorer.net/">https://astexplorer.net/</a> ，选择语言Javascript，选择解析库@babel&#x2F;parser。如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220630230656018.png" alt="image-20220630230656018" title="">                </div>                <div class="image-caption">image-20220630230656018</div>            </figure><p>并在左侧输入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">somewhat</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&quot;Hello,AST&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><p>折叠右边展示的Tree的所有子节点，可以看到主要结构如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220630231236304.png" alt="image-20220630231236304" title="">                </div>                <div class="image-caption">image-20220630231236304</div>            </figure><p>其中<strong>File是整个树的根节点</strong>。然后基本上每一个子节点都包含type, start, end, loc。给出一个表格列出这几个字段的含义：</p><table><thead><tr><th>节点属性</th><th>记录的信息</th></tr></thead><tbody><tr><td>type</td><td>当前节点的类型</td></tr><tr><td>start</td><td>当前节点的起始位</td></tr><tr><td>end</td><td>当前节点的末尾</td></tr><tr><td>loc</td><td>当前节点所在的行列位置 起始于结束的行列信息</td></tr><tr><td>errors</td><td>File节点所持有的特有属性，可以不用理会</td></tr><tr><td>program</td><td>包含整个源代码，不包含注释节点</td></tr><tr><td>comments</td><td>源代码中所有的注释会显示在这里</td></tr></tbody></table><p>我们通常关注的节点是program，因为源码对应的AST语法子树结构都在program节点中。我们展开program节点，然后对照着JS源码逐步分析：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656603410051.jpg" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656603410051.jpg" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656603410051.jpg</div>            </figure><p>可以看到程序主要由三部分组成，一个是函数定义，一个是变量定义，一个是表达式语句。</p><p>我们接着展开FunctionDeclaration：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220630234230480.png" alt="image-20220630234230480" title="">                </div>                <div class="image-caption">image-20220630234230480</div>            </figure><p>可以看到somewhat这个函数，主要由2部分组成，一个是变量定义，一个是for语句。</p><h1 id="Code-gt-AST"><a href="#Code-gt-AST" class="headerlink" title="Code-&gt;AST"></a>Code-&gt;AST</h1><p><code>@babel/parser</code>能将<code>javascript</code>代码解析成AST，具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">var a = 123;</span></span><br><span class="line"><span class="string">function somewhat() &#123;</span></span><br><span class="line"><span class="string">console.log(&quot;Hello, AST&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(code);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(ast, <span class="literal">null</span>, <span class="string">&#x27;\t&#x27;</span>));</span><br></pre></td></tr></table></figure><h1 id="travel-AST"><a href="#travel-AST" class="headerlink" title="travel AST"></a>travel AST</h1><h2 id="使用path进行遍历"><a href="#使用path进行遍历" class="headerlink" title="使用path进行遍历"></a>使用path进行遍历</h2><p>在使用 <code>enter</code> 遍历所有节点的时候，参数 <code>path</code> 会传入当前的路径，可以根据<code>path</code>进行各种判断，继而进行各类操作。</p><p>编写如下的遍历代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//babel库及文件模块导入</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//babel库相关，解析，转换，构建，生产</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">argv</span>.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Usage: node $&#123;file&#125;.js $&#123;encode&#125;.js $&#123;decode&#125;.js&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input_file = process.<span class="property">argv</span>[<span class="number">2</span>], output_file = process.<span class="property">argv</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = fs.<span class="title function_">readFileSync</span>(input_file, &#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路径类型&#x27;</span>, path.<span class="property">type</span>); <span class="comment">// 打印当前路径类型</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路径源码：&#x27;</span>, path.<span class="title function_">toString</span>()); <span class="comment">// 打印当前路径所对应的源代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure><p>深度遍历的过程中，输出每一个节点的类型与其对应的源码。结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656605283688.jpg" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656605283688.jpg" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1656605283688.jpg</div>            </figure><p>可以看到，使用path方式对AST遍历时，是从Program节点开始的，并不是File根节点开始。事实上，不止是采用path方式，下面介绍的采用节点方式对AST进行遍历，都是通过travel模块来进行的。而<strong>采用travel对AST进行遍历都是从Program节点开始</strong>。</p><h2 id="使用节点进行遍历"><a href="#使用节点进行遍历" class="headerlink" title="使用节点进行遍历"></a>使用节点进行遍历</h2><p>与使用path遍历不同，我们不用关心每个节点，只需要关注自己想要处理的那些节点。与path相同的是，path同样会作为参数传入。</p><p>修改之前遍历的代码，修改visitor如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">ForStatement</span>(path) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路径 源码:\n&#x27;</span>, path.<span class="title function_">toString</span>());</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前路径 节点:\n&#x27;</span>, path.<span class="property">node</span>.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只处理for-statement，输出其源码以及下面的节点。输出结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220701003649630.png" alt="image-20220701003649630" title="">                </div>                <div class="image-caption">image-20220701003649630</div>            </figure><h1 id="AST-gt-Code"><a href="#AST-gt-Code" class="headerlink" title="AST-&gt;Code"></a>AST-&gt;Code</h1><p>在对AST进行遍历处理之后，需要把AST转化成我们需要的JS代码，用到的模块是<code>@babel/generator</code>。</p><p>以一段代码作为演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//babel库及文件模块导入</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//babel库相关，解析，转换，构建，生产</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">argv</span>.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Usage: node $&#123;file&#125;.js $&#123;encode&#125;.js $&#123;decode&#125;.js&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input_file = process.<span class="property">argv</span>[<span class="number">2</span>], output_file = process.<span class="property">argv</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = fs.<span class="title function_">readFileSync</span>(input_file, &#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">BinaryExpression</span>(path) &#123;            <span class="comment">// 寻找所有 二元表达式节点</span></span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">operator</span> == <span class="string">&#x27;*&#x27;</span>) &#123;  <span class="comment">// 并且这个表达式节点的操作是做 乘法 </span></span><br><span class="line">        path.<span class="property">node</span>.<span class="property">operator</span> = <span class="string">&#x27;+&#x27;</span>;       <span class="comment">// 将操作改为 加</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">Identifier</span>(path) &#123;                  </span><br><span class="line">      <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;squire&#x27;</span>) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">name</span> = <span class="string">&#x27;plus&#x27;</span>;        <span class="comment">// 将函数名改为plus</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(output_file, code, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>这段代码的作用是修改方法squire，将其从平方变为加法，主要做2步，第一步是将乘法变为加法，第二步是将squire重命名为plus。可以看到generator的用法很简单，接受的第一个参数是一个AST语法树，返回一个字符串，这个字符串就是全部的JS代码。</p><h1 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h1><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>给出一张图，列出节点的类型，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1403732-20200713201324374-2129914519.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1403732-20200713201324374-2129914519.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/1403732-20200713201324374-2129914519.png</div>            </figure><p>这些类型，都在@babel&#x2F;types中定义。</p><p>当前节点的类型，通过<code>path.type</code>来获取。而判断当前节点的类型，有2种方式，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="property">type</span> === <span class="string">&#x27;ForStatement&#x27;</span></span><br><span class="line">path.<span class="title function_">isForStatement</span>()</span><br></pre></td></tr></table></figure><p>第一种方式是比较节点的type属性与节点类型是否一致。第二种方式则是调用每个属性对应的判断类型的方法，规则是在每个节点类型加上前缀<code>is</code>，然后按照驼峰式命名即可。比如<code>NumericLiteral</code>对应的是<code>isNumericLiteral</code>，<code>SwitchCase</code>对应的是<code>isSwitchCase</code>。</p><h2 id="对Node进行增删改"><a href="#对Node进行增删改" class="headerlink" title="对Node进行增删改"></a>对Node进行增删改</h2><h3 id="创建node"><a href="#创建node" class="headerlink" title="创建node"></a>创建node</h3><p><code>@babel/types</code>包含了各个节点的定义，可以通过使用<code>@babel/types</code>的类型名，查阅<a href="https://babeljs.io/docs/en/babel-types"><code>@babel/types</code>官方文档</a>，获取对应类型的构造函数，创建对应类型的节点。</p><p>我们这里来做一个示范，比如创建一条语法<code>console.log(&quot;Hello,AST&quot;)</code>。我们先把这条语句放在 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 中看下这条语句应该对应的AST结构。这里说个小的Tips，在做反混淆的过程中，经常需要反复对照 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 这个网站去分析AST结构。分析结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220701020813706.png" alt="image-20220701020813706" title="">                </div>                <div class="image-caption">image-20220701020813706</div>            </figure><p>可以看到，这条JS语句主要包含4个主要的部分，整个JS代码是一条表达式，所以最外层是一个<code>ExpressStatement</code>，然后具体是什么表达式呢？是一个<code>CallExpress</code>即一个方法调用。然后这个方法调用包含2部分：<code>MemberExpression</code>和<code>Arguments</code>，<code>console.log</code>显然是一个成员表达式，而<code>Hello,AST</code>则是这个方法调用传入的参数。</p><p>分析完之后，编写代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> args = [type.<span class="title class_">StringLiteral</span>(<span class="string">&quot;Hello,AST&quot;</span>)]; <span class="comment">// 方法调用参数</span></span><br><span class="line"><span class="keyword">var</span> callee = type.<span class="title function_">memberExpression</span>(type.<span class="title function_">identifier</span>(<span class="string">&quot;console&quot;</span>), type.<span class="title function_">identifier</span>(<span class="string">&quot;log&quot;</span>)); <span class="comment">// 成员表达式分2个部分</span></span><br><span class="line"><span class="keyword">var</span> call_exp = type.<span class="title function_">callExpression</span>(callee, args); <span class="comment">// 方法调用，第一个参数是方法名，第二个参数是方法调用参数</span></span><br><span class="line"><span class="keyword">var</span> exp_statement = type.<span class="title class_">ExpressionStatement</span>(call_exp); <span class="comment">// 表达式</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">generator</span>(exp_statement)[<span class="string">&#x27;code&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-022717.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-022717.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-022717.png</div>            </figure><h3 id="插入node"><a href="#插入node" class="headerlink" title="插入node"></a>插入node</h3><p><code>NodePath.insertAfter()</code>方法用于在当前<code>path</code>前面插入节点，<code>NodePath.insertBefore()</code>方法用于在当前<code>path</code>后面插入节点。下面用一个实例来演示这2个方法的使用。</p><p>假设有一行代码为<code>var a = 1;</code>，我们的任务是在这行代码之前插入<code>let b = &quot;Hello,AST&quot;</code>，在其之后插入<code>const c = 2;</code>。方法一样，首先把这三行代码放到  <a href="https://astexplorer.net/">https://astexplorer.net/</a>  上面分析，具体的分析过程不过多描述了，直接给出代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = <span class="string">&quot;var a = 1;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">VariableDeclaration</span>(path) &#123;</span><br><span class="line">    <span class="comment">// 定位到a节点</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">kind</span> == <span class="string">&#x27;var&#x27;</span> &amp;&amp; path.<span class="property">node</span>.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">id</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> variableDeclarator = types.<span class="title function_">variableDeclarator</span>(id=types.<span class="title class_">Identifier</span>(<span class="string">&quot;b&quot;</span>), init=types.<span class="title class_">StringLiteral</span>(<span class="string">&quot;Hello,AST&quot;</span>));</span><br><span class="line">    <span class="keyword">var</span> nodeBefore = types.<span class="title class_">VariableDeclaration</span>(kind=<span class="string">&#x27;let&#x27;</span>, declarations=[variableDeclarator]);</span><br><span class="line">    path.<span class="title function_">insertBefore</span>(nodeBefore);</span><br><span class="line">            </span><br><span class="line">    variableDeclarator = types.<span class="title function_">variableDeclarator</span>(id=types.<span class="title class_">Identifier</span>(<span class="string">&quot;c&quot;</span>), init=types.<span class="title class_">NumericLiteral</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">var</span> nodeAfter = types.<span class="title class_">VariableDeclaration</span>(kind=<span class="string">&#x27;const&#x27;</span>, declarations=[variableDeclarator]);</span><br><span class="line">    path.<span class="title function_">insertAfter</span>(nodeAfter);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-030118.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-030118.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-030118.png</div>            </figure><h3 id="替换node"><a href="#替换node" class="headerlink" title="替换node"></a>替换node</h3><p><code>NodePath.replaceInline</code> 方法用于替换对应path的节点。我们依旧给出一个例子。比如有一条JS语句<code>let a = 1</code>，想把它变为<code>let  a = 2</code>。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = <span class="string">&quot;var a = 1;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">NumericLiteral</span>(path) &#123;</span><br><span class="line">    path.<span class="title function_">replaceInline</span>(types.<span class="title class_">NumericLiteral</span>(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 防止递归插入</span></span><br><span class="line">    path.<span class="title function_">stop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-105013.png" alt="image-20220701104832811" title="">                </div>                <div class="image-caption">image-20220701104832811</div>            </figure><h3 id="删除node"><a href="#删除node" class="headerlink" title="删除node"></a>删除node</h3><p><code>NodePath.remove()</code>用于删除路径对应的节点，由于是对<code>path</code>操作，所以务必注意不要误删。同样地，以一案例来讲解下删除节点，话不多说，直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = <span class="string">`</span></span><br><span class="line"><span class="string">function sum(a, b) &#123;</span></span><br><span class="line"><span class="string">var c = 1;</span></span><br><span class="line"><span class="string">return a + b;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">VariableDeclaration</span>(path) &#123;</span><br><span class="line">    path.<span class="title function_">remove</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(code);</span><br></pre></td></tr></table></figure><p>逻辑比较简单，遍历到变量定义的节点，然后调用path.remove删除即可。</p><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-112346.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-112346.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-112346.png</div>            </figure><h1 id="作用域Scope-与-被绑定量Binding"><a href="#作用域Scope-与-被绑定量Binding" class="headerlink" title="作用域Scope 与 被绑定量Binding"></a>作用域Scope 与 被绑定量Binding</h1><h2 id="作用域Scope"><a href="#作用域Scope" class="headerlink" title="作用域Scope"></a>作用域Scope</h2><p><code>@Babel</code>解析出来的语法树节点对象会包含作用域信息，这个信息会作为节点<code>Node</code>对象的一个属性保存，这个属性本身是一个<code>Scope</code>对象，其定义位于<code>node_modules/@babel/traverse/lib/scope/index.js</code>中。</p><p>查看基本作用域与绑定信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jscode = <span class="string">`</span></span><br><span class="line"><span class="string">function a() &#123;</span></span><br><span class="line"><span class="string">return &quot;Hello,AST&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">function b() &#123;</span></span><br><span class="line"><span class="string">return 1 + 2;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var c = &quot;Wow&quot;;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="string">&quot;FunctionDeclaration&quot;</span>(path)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n\n这里是函数 &quot;</span>, path.<span class="property">node</span>.<span class="property">id</span>.<span class="property">name</span> + <span class="string">&#x27;()&#x27;</span>)</span><br><span class="line">        path.<span class="property">scope</span>.<span class="title function_">dump</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure><p>执行 <code>Scope.dump()</code>，会得到自底向上的 作用域与变量信息，得到结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-113832.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-113832.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-113832.png</div>            </figure><p>输出查看方法：</p><ul><li>每一个作用域都以<code>#</code>标识输出</li><li>每一个绑定都以<code>-</code>标识输出</li><li>对于单次输出，都是自底向上的先输出当前作用域，再输出父级作用域，再输出父级的父级作用域……</li><li>对于单个绑定<code>Binding</code>，会输出4种信息<ul><li>constant 表示声明后，是否会被修改</li><li>references 指被引用次数</li><li>violations 则是被重新定义的次数</li><li>kind 是指函数声明类型。param 参数, hoisted 提升，var 变量， local 内部。</li></ul></li></ul><h2 id="绑定-Binding"><a href="#绑定-Binding" class="headerlink" title="绑定 Binding"></a>绑定 Binding</h2><p><code>Binding</code> 对象用于存储绑定的信息，这个对象会作为<code>Scope</code>对象的一个属性存在，同一个作用域可以包含多个 <code>Binding</code>。你可以在 <code>@babel/traverse/lib/scope/binding.js</code> 中查看到它的定义。</p><p>查看<code>Binding</code>信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jscode = <span class="string">`</span></span><br><span class="line"><span class="string">function a() &#123;</span></span><br><span class="line"><span class="string">var m;</span></span><br><span class="line"><span class="string">m++;</span></span><br><span class="line"><span class="string">return m;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">function b() &#123;</span></span><br><span class="line"><span class="string">let c = a() + 1; </span></span><br><span class="line"><span class="string">return c;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var c = &quot;Wow&quot;;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">BlockStatement</span>(path) &#123;</span><br><span class="line">    <span class="keyword">var</span> bindings = path.<span class="property">scope</span>.<span class="property">bindings</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> binding <span class="keyword">in</span> bindings) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding name: &quot;</span> + binding);</span><br><span class="line">    binding = bindings[binding];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding type: &quot;</span> + binding.<span class="property">kind</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding constant: &quot;</span> + binding.<span class="property">constant</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding constantViolations: &quot;</span> + binding.<span class="property">constantViolations</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding referenced: &quot;</span> + binding.<span class="property">referenced</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;binding references: &quot;</span> + binding.<span class="property">references</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br></pre></td></tr></table></figure><p>输出信息如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-115258.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-115258.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220701-115258.png</div>            </figure><p>可以看到，变量m类型是var，有被引用，且被引用次数是2；变量c则是let类型，也有被引用，被引用次数是1。</p><blockquote><p>关于作用域与绑定的关系？一个代码块(比如函数，循环，逻辑判断分支等)就是一个作用域，而定义在作用域里面的变量就是一个绑定，绑定是依附在作用域上。</p></blockquote><h1 id="关于学习AST相关的资源整理"><a href="#关于学习AST相关的资源整理" class="headerlink" title="关于学习AST相关的资源整理"></a>关于学习AST相关的资源整理</h1><table><thead><tr><th>信息</th><th>地址</th></tr></thead><tbody><tr><td>AST在线解析</td><td><a href="https://astexplorer.net/">https://astexplorer.net/</a></td></tr><tr><td>babel中文文档</td><td><a href="https://www.babeljs.cn/docs/">https://www.babeljs.cn/docs/</a></td></tr><tr><td>babel英文文档</td><td><a href="https://babeljs.io/docs/en/">https://babeljs.io/docs/en/</a></td></tr><tr><td>Github</td><td><a href="https://github.com/babel/babel">https://github.com/babel/babel</a></td></tr><tr><td>插件手册</td><td><a href="https://blog.csdn.net/weixin_33826609/article/details/93164633#toc-visitors">https://blog.csdn.net/weixin_33826609/article/details/93164633#toc-visitors</a></td></tr><tr><td>babel各节点解释</td><td><a href="https://github.com/babel/babylon/blob/master/ast/spec.md">https://github.com/babel/babylon/blob/master/ast/spec.md</a></td></tr><tr><td>babel简单剖析</td><td><a href="http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/">http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/</a></td></tr><tr><td>淘宝前端团队写的babel相关</td><td><a href="https://fed.taobao.org/blog/taofed/do71ct/babel-plugins/">https://fed.taobao.org/blog/taofed/do71ct/babel-plugins/</a></td></tr><tr><td>babel到底将代码转换成什么</td><td><a href="http://www.alloyteam.com/2016/05/babel-code-into-a-bird-like/">http://www.alloyteam.com/2016/05/babel-code-into-a-bird-like/</a></td></tr><tr><td>babel在线源码</td><td><a href="https://doc.esdoc.org/github.com/mason-lang/esast/class/src/ast.js~VariableDeclarator.html">https://doc.esdoc.org/github.com/mason-lang/esast/class/src/ast.js~VariableDeclarator.html</a></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识AST&quot;&gt;&lt;a href=&quot;#认识AST&quot; class=&quot;headerlink&quot; title=&quot;认识AST&quot;&gt;&lt;/a&gt;认识AST&lt;/h1&gt;&lt;p&gt;打开 &lt;a href=&quot;https://astexplorer.net/&quot;&gt;https://astexplorer.</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之去掉未被使用的变量</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8E%BB%E6%8E%89%E6%9C%AA%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F/</id>
    <published>2022-05-28T12:32:08.000Z</published>
    <updated>2023-05-12T16:22:53.381Z</updated>
    
    <content type="html"><![CDATA[<p>在JS混淆的过程中，加入很多无辜的变量，从头到尾都没有使用过，这样子可以冗余一部分代码，达到混淆视听的目的，这也是JS混淆的一种常见手段。那么如何去除这些“无辜”的变量呢？这就是本篇文章需要讨论的主题。</p><p>比如下面一段代码，显然变量n和全局变量c是可以删除的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m, n;</span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">a</span>() + <span class="number">1</span>; </span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&quot;Wow&quot;</span>;</span><br></pre></td></tr></table></figure><p>删除没有使用的变量，核心代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">VariableDeclarator</span>(path) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id&#125; = path.<span class="property">node</span>;</span><br><span class="line">        <span class="comment">// 获取binding信息</span></span><br><span class="line">        <span class="keyword">const</span> binding = path.<span class="property">scope</span>.<span class="title function_">getBinding</span>(id.<span class="property">name</span>);</span><br><span class="line">        <span class="comment">// 如果变量被修改，则不能删除</span></span><br><span class="line">        <span class="keyword">if</span> (!binding || binding.<span class="property">constantViolations</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果变量没有被引用，则可以删除</span></span><br><span class="line">        <span class="keyword">if</span> (binding.<span class="property">referencePaths</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          path.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有阅读前面写过的一篇文章 <a href="https://lyy077.github.io/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8BAST%E5%9F%BA%E7%A1%80/">AST解JS混淆之AST基础</a>，了解了作用域与Binding，则上面的代码并不难理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在JS混淆的过程中，加入很多无辜的变量，从头到尾都没有使用过，这样子可以冗余一部分代码，达到混淆视听的目的，这也是JS混淆的一种常见手段。那么如何去除这些“无辜”的变量呢？这就是本篇文章需要讨论的主题。&lt;/p&gt;
&lt;p&gt;比如下面一段代码，显然变量n和全局变量c是可以删除的。&lt;</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之删除所有注释</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%B3%A8%E9%87%8A/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E6%B3%A8%E9%87%8A/</id>
    <published>2022-05-27T15:20:29.000Z</published>
    <updated>2022-07-04T11:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>当代码中有成段成段的注释，但是我们又不需要的时候，可以采用如下代码去删除JS源代码中的注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> output = <span class="title function_">generator</span>(ast, opts=&#123;<span class="string">&quot;comments&quot;</span>: <span class="literal">false</span>&#125;, code);</span><br></pre></td></tr></table></figure><p>测试如下：</p><p>例如源代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行测试，第一行</span></span><br><span class="line"><span class="comment">这是多行测试，第二行</span></span><br><span class="line"><span class="comment">这是多行测试，第三行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;你好AST&quot;</span>; <span class="comment">// 这也是单行测试</span></span><br><span class="line"><span class="comment">// 这是单行测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = a + <span class="number">1</span>; <span class="comment">/*这也是单行测试*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="comment">/*这是代码之间的测试*/</span>b);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这也是多行测试，第一行</span></span><br><span class="line"><span class="comment">这也是多行测试，第二行</span></span><br><span class="line"><span class="comment">这也是多行测试，第三行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面是输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;你好AST&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b = a + <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当代码中有成段成段的注释，但是我们又不需要的时候，可以采用如下代码去删除JS源代码中的注释：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之还原中文的Unicode编码</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E8%BF%98%E5%8E%9F%E4%B8%AD%E6%96%87%E7%9A%84Unicode%E7%BC%96%E7%A0%81/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E8%BF%98%E5%8E%9F%E4%B8%AD%E6%96%87%E7%9A%84Unicode%E7%BC%96%E7%A0%81/</id>
    <published>2022-05-27T14:56:32.000Z</published>
    <updated>2023-05-12T17:10:06.339Z</updated>
    
    <content type="html"><![CDATA[<p>前面一篇文章 <a href="https://lyy077.github.io/AST%E8%A7%A3%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6,%20%E4%B8%AD%E8%8B%B1%E6%96%87Unicode%E5%AD%97%E7%AC%A6%E4%B8%B2/">AST解混淆之处理数值与字符串</a> 介绍过unicode或者utf8编码的字符串还原的方法，但是如果这个字符串是中文，这个方法并不会奏效，比如有下面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;\u4f60\u597d\u0041\u0053\u0054&quot;</span>;</span><br></pre></td></tr></table></figure><p>经过前面的插件处理之后，结果为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;\u4F60\u597DAST&quot;</span>;</span><br></pre></td></tr></table></figure><p>可以看到unicode编码的中文并没有还原。</p><p>要想还原unicode编码的中文，必须用到generate函数有个 <code>options选项</code>，下面是这个选项能完成的功能：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/111.png" alt="图片" title="">                </div>                <div class="image-caption">图片</div>            </figure><p>所以修改我们的插件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//babel库及文件模块导入</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//babel库相关，解析，转换，构建，生产</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">argv</span>.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Usage: node $&#123;file&#125;.js $&#123;encode&#125;.js $&#123;decode&#125;.js&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input_file = process.<span class="property">argv</span>[<span class="number">2</span>], output_file = process.<span class="property">argv</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = fs.<span class="title function_">readFileSync</span>(input_file, &#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">StringLiteral</span>(&#123;node&#125;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">extra</span> &amp;&amp; <span class="regexp">/\\[ux]/gi</span>.<span class="title function_">test</span>(node.<span class="property">extra</span>.<span class="property">raw</span>)) &#123;</span><br><span class="line">            node.<span class="property">extra</span> = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast, opts = &#123;<span class="attr">jsescOption</span>:&#123;<span class="string">&quot;minimal&quot;</span>:<span class="literal">true</span>&#125;&#125;);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(output_file, code, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220630-201530.png" alt="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220630-201530.png" title="">                </div>                <div class="image-caption">https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/WX20220630-201530.png</div>            </figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面一篇文章 &lt;a href=&quot;https://lyy077.github.io/AST%E8%A7%A3%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC%E5%8D%81%E5%85%AD%E8</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之删除空行与空语句</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%88%A0%E9%99%A4%E7%A9%BA%E8%A1%8C%E4%B8%8E%E7%A9%BA%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%88%A0%E9%99%A4%E7%A9%BA%E8%A1%8C%E4%B8%8E%E7%A9%BA%E8%AF%AD%E5%8F%A5/</id>
    <published>2022-05-27T13:59:20.000Z</published>
    <updated>2023-05-12T17:09:59.470Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何删除空语句。有时候将源代码利用AST调整后，会有很多类似这样的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">456</span>;</span><br></pre></td></tr></table></figure><p>其中，中间的 <strong>;</strong> 这一行是没必要存在了，那如何编写插件删除没啥用的这行呢？</p><p>同样的方法，先将这段代码放入 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 解析网站看看：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220630191917900.png" alt="image-20220630191917900" title="">                </div>                <div class="image-caption">image-20220630191917900</div>            </figure><p>解析如上图。这里介绍一个小技巧：当代码行数过多时？将鼠标移动到我们想要迅速观察的那一行代码上 ，解析网站自动帮我们定位到这一行代码的AST结构。</p><p>可以看到它是一个 <code>EmptyStatement</code>，想要删除这个节点，方法很简单，直接遍历这个节点，再调用 remove 方法即可，代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">EmptyStatement</span>(path) &#123;</span><br><span class="line">        path.<span class="title function_">remove</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是这么的简单。</p><p>看下运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/image-20220630192204612.png" alt="image-20220630192204612" title="">                </div>                <div class="image-caption">image-20220630192204612</div>            </figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文介绍如何删除空语句。有时候将源代码利用AST调整后，会有很多类似这样的代码:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之处理数值与字符串</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-05-27T12:29:25.000Z</published>
    <updated>2023-05-12T17:10:12.195Z</updated>
    
    <content type="html"><![CDATA[<p>比如有下面一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m7z = &#123;</span><br><span class="line">    <span class="string">&#x27;\x67\x74&#x27;</span>: V7z[M9r.<span class="title function_">C8z</span>(<span class="number">190</span>)][M9r.<span class="title function_">C8z</span>(<span class="number">189</span>)],</span><br><span class="line">    <span class="string">&#x27;\x63\x68\x61\x6c\x6c\x65\x6e\x67\x65&#x27;</span>: V7z[M9r.<span class="title function_">R8z</span>(<span class="number">190</span>)][M9r.<span class="title function_">R8z</span>(<span class="number">425</span>)],</span><br><span class="line">    <span class="string">&#x27;\x77&#x27;</span>: r7z + H7z,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0x25</span>,b = <span class="number">0b10001001</span>,c = <span class="number">0o123456</span>, e = <span class="string">&quot;\u0068\u0065\u006c\u006c\u006f\u002c\u0041\u0053\u0054&quot;</span>;</span><br></pre></td></tr></table></figure><p>这种把字符串处理成unicode或者utf8编码，把数字处理成非10进制，不利于我们进行调试，我们可以对其进行反混淆，变成我们更加习惯的编码或者进制。</p><p>观察AST结构：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206301559685.png" alt="image-20220630155927641" title="">                </div>                <div class="image-caption">image-20220630155927641</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206301609536.png" alt="image-20220630160915492" title="">                </div>                <div class="image-caption">image-20220630160915492</div>            </figure><p>可以看到在extra节点中的raw是utf-8编码的，而value的值是正常的。官网手册查询得知，<strong>NumericLiteral、StringLiteral类型的extra节点并非必需，这样在将其删除时，不会影响原节点</strong>。所以一种通用的解决方案是直接删除extra节点即可。</p><p>所以解混淆插件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//TODO  write your code here！</span></span><br><span class="line">    <span class="title class_">NumericLiteral</span>(&#123;node&#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">extra</span> &amp;&amp; <span class="regexp">/^0[obx]/i</span>.<span class="title function_">test</span>(node.<span class="property">extra</span>.<span class="property">raw</span>)) &#123;</span><br><span class="line">            node.<span class="property">extra</span> = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">StringLiteral</span>(&#123;node&#125;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">extra</span> &amp;&amp; <span class="regexp">/\\[ux]/gi</span>.<span class="title function_">test</span>(node.<span class="property">extra</span>.<span class="property">raw</span>)) &#123;</span><br><span class="line">            node.<span class="property">extra</span> = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历遇到NumericLiteral节点时，判断extra是否为二进制，八进制，十六进制，如果是的话直接置空；同理，遍历遇到StringLiteral节点时，判断其extra是否为unicode编码或者utf8编码，如果是的话也置空。</p><p>最后解混淆的结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206301617590.png" alt="image-20220630161728547" title="">                </div>                <div class="image-caption">image-20220630161728547</div>            </figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;比如有下面一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>AST解JS混淆之反混淆代码模版</title>
    <link href="http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8F%8D%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81%E6%A8%A1%E7%89%88/"/>
    <id>http://example.com/AST%E8%A7%A3JS%E6%B7%B7%E6%B7%86%E4%B9%8B%E5%8F%8D%E6%B7%B7%E6%B7%86%E4%BB%A3%E7%A0%81%E6%A8%A1%E7%89%88/</id>
    <published>2022-05-26T14:32:54.000Z</published>
    <updated>2022-07-04T11:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，直接上模版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//babel库及文件模块导入</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//babel库相关，解析，转换，构建，生产</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">argv</span>.<span class="property">length</span> &lt; <span class="number">4</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Usage: node $&#123;file&#125;.js $&#123;encode&#125;.js $&#123;decode&#125;.js&quot;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input_file = process.<span class="property">argv</span>[<span class="number">2</span>], output_file = process.<span class="property">argv</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jscode = fs.<span class="title function_">readFileSync</span>(input_file, &#123;<span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//转换为ast树</span></span><br><span class="line"><span class="keyword">let</span> ast    = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//TODO  write your code here！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//some function code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用插件，处理源代码</span></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成新的js code，并保存到文件中输出</span></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = <span class="title function_">generator</span>(ast);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(output_file, code, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>上面代码保存成一个文件，比如decode_obfuscator.js ，然后执行以下命令即可完成反混淆：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node decode_obfuscator.js input.js output.js</span><br></pre></td></tr></table></figure><p>input.js表示待解混淆的文件，output.js表示解混淆之后保存的结果文件。</p><p>接着看看decode_obfuscator.js文件的内容：</p><p>主要分三步，第一步是引入parser模块，并调用相关的方法把JS源码转化为AST；第二步，对AST进行遍历，处理相应的节点，主要用到的是babel库的traverse模块；第三步是调用generator模块的相关方法，把AST还原成JS代码。其中第二步可以调用多次traverse，编写多个visitor，因为下一次遍历AST可能需要上一次遍历并处理之后的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;话不多说，直接上模版：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>一文教你如何利用AST还原JS混淆</title>
    <link href="http://example.com/%E4%B8%80%E6%96%87%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8AST%E8%BF%98%E5%8E%9FJS%E6%B7%B7%E6%B7%86/"/>
    <id>http://example.com/%E4%B8%80%E6%96%87%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8AST%E8%BF%98%E5%8E%9FJS%E6%B7%B7%E6%B7%86/</id>
    <published>2022-04-25T15:06:51.000Z</published>
    <updated>2023-05-12T17:09:56.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果不了解JS混淆原理以及常见的混淆手段，可以戳我以前写过的2篇文章：<a href="https://lyy077.github.io/JS%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94AST%E6%B7%B7%E6%B7%86%E5%8E%9F%E7%90%86/">JS代码安全防护原理——AST混淆原理</a> 和 <a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E7%9A%84%E5%8E%9F%E7%90%86/">JS逆向之代码混淆的原理</a></p></blockquote><p>开篇先回答一个问题，为什么需要反混淆？因为一般具有防护的JS代码都会经过混淆处理，虽然经过混淆的代码完全可以不处理混淆依旧对其进行逆向，但是由于字符串，数字都是混淆的，同时源码中冗余了很多无关的代码，控制流程平台化的存在更是让我们在代码的阅读上有了很大的障碍，这样下来导致逆向源码耗费的时间需要成倍的增加。如果有一种方式，能够让我们获得的源码就是高可阅读性，也没有冗余的代码，能帮我们不止一点点地提高逆向源码的效率，你学还是不学？</p><h1 id="什么是AST？"><a href="#什么是AST？" class="headerlink" title="什么是AST？"></a>什么是AST？</h1><p>所谓磨刀不误砍材功，既然反混淆是必要的，那跟AST有啥关系？不着急，容我慢慢解释。试想一下，要反混淆的话，是不是得处理JS源码？对于源码而言，如果只是一个文本文件，是不是非常不好处理(变量，常量，函数，分支什么的都是分散的)？所以我们必须把源码预处理成一种利于解混淆的形式，比如JSON格式？如果大学有接触过编译原理的话，一定有接触一个概念叫做语法树。没错，AST（Abstract Syntax Tree），中文抽象语法树，简称语法树（Syntax Tree），是源代码的抽象语法结构的树状表现形式，树上的每个节点都表示源代码中的一种结构。</p><p>让我们看看AST长啥样？打开AST提供的一个解析网站：<a href="https://astexplorer.net/">https://astexplorer.net/</a> ，其顶部可以选择语言，编译器。语法树没有单一的格式，选择不同的语言、不同的编译器，得到的结果也是不一样的，在 JavaScript 中，编译器有 Acorn、Espree、Esprima、Recast、Uglify-JS 等，使用最多的是 Babel，后续的学习也是以 Babel 为例。如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206292307135.png" alt="image-20220629155332110" title="">                </div>                <div class="image-caption">image-20220629155332110</div>            </figure><h1 id="Babel简介"><a href="#Babel简介" class="headerlink" title="Babel简介"></a>Babel简介</h1><p>Babel 是一个 JavaScript 编译器，也可以说是一个解析库。Babel 内置了很多分析 JavaScript 代码的方法，我们可以利用 Babel 将 JavaScript 代码转换成 AST 语法树，然后增删改查等操作之后，再转换成 JavaScript 代码。</p><p>在做逆向解混淆中，主要用到了 Babel 的以下几个功能包，本文也仅介绍以下几个功能包：</p><ol><li><code>@babel/core</code>：Babel 编译器本身，提供了 babel 的编译 API；</li><li><code>@babel/parser</code> ：将 JavaScript 代码解析成 AST 语法树；</li><li><code>@babel/traverse</code>： 遍历、修改 AST 语法树的各个节点；</li><li><code>@babel/generator</code>：将 AST 还原成 JavaScript 代码；</li><li><code>@babel/types</code>：判断、验证节点的类型、构建新 AST 节点等。</li></ol><p>用一张图说明上面各个模块的功能：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206292307165.png" alt="640" title="">                </div>                <div class="image-caption">640</div>            </figure><h2 id="babel库的安装"><a href="#babel库的安装" class="headerlink" title="babel库的安装"></a>babel库的安装</h2><p>安装完NodeJS之后，使用命令<code>npm install @babel/core</code>进行安装即可。</p><h2 id="babel-x2F-core"><a href="#babel-x2F-core" class="headerlink" title="@babel&#x2F;core"></a>@babel&#x2F;core</h2><p>Babel 编译器本身，被拆分成了三个模块：<code>@babel/parser</code>、<code>@babel/traverse</code>、<code>@babel/generator</code>，比如以下方法的导入效果都是一样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parse = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>).<span class="property">parse</span>;</span><br><span class="line"><span class="keyword">const</span> parse = <span class="built_in">require</span>(<span class="string">&quot;@babel/core&quot;</span>).<span class="property">parse</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/core&quot;</span>).<span class="property">traverse</span></span><br></pre></td></tr></table></figure><h2 id="babel-x2F-parser"><a href="#babel-x2F-parser" class="headerlink" title="@babel&#x2F;parser"></a>@babel&#x2F;parser</h2><p><code>@babel/parser</code> 可以将 JavaScript 代码解析成 AST 语法树，其中主要提供了两个方法：</p><ul><li><code>parser.parse(code, [&#123;options&#125;])</code>：解析一段 JavaScript 代码；</li><li><code>parser.parseExpression(code, [&#123;options&#125;])</code>：考虑到了性能问题，解析单个 JavaScript 表达式。</li></ul><p>部分可选参数 <code>options</code>：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">allowImportExportEverywhere</td><td align="left">默认 import 和 export 声明语句只能出现在程序的最顶层，设置为 true 则在任何地方都可以声明</td></tr><tr><td align="left">allowReturnOutsideFunction</td><td align="left">默认如果在顶层中使用 return 语句会引起错误，设置为 true 就不会报错</td></tr><tr><td align="left">sourceType</td><td align="left">默认为 script，当代码中含有 import 、export 等关键字时会报错，需要指定为 module</td></tr><tr><td align="left">errorRecovery</td><td align="left">默认如果 babel 发现一些不正常的代码就会抛出错误，设置为 true 则会在保存解析错误的同时继续解析代码，错误的记录将被保存在最终生成的 AST 的 errors 属性中，当然如果遇到严重的错误，依然会终止解析</td></tr></tbody></table><p>好了，看完理论知识，来实践下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">&quot;var a = &#x27;\u0068\u0065\u006c\u006c\u006f\u002c\u0041\u0053\u0054&#x27;; \n console[&#x27;log&#x27;](a);&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(code, &#123;<span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ast)</span><br></pre></td></tr></table></figure><p>执行，结果如下，可以看到跟在 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 中看到的是一致的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206292307184.png" alt="image-20220629171249989" title="">                </div>                <div class="image-caption">image-20220629171249989</div>            </figure><h2 id="babel-x2F-generator"><a href="#babel-x2F-generator" class="headerlink" title="@babel&#x2F;generator"></a>@babel&#x2F;generator</h2><p><code>@babel/generator</code> 可以将 AST 还原成 JavaScript 代码，提供了一个 <code>generate</code> 方法：<code>generate(ast, [&#123;options&#125;], code)</code>。</p><p>部分可选参数 <code>options</code>：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">auxiliaryCommentBefore</td><td align="left">在输出文件内容的头部添加注释块文字</td></tr><tr><td align="left">auxiliaryCommentAfter</td><td align="left">在输出文件内容的末尾添加注释块文字</td></tr><tr><td align="left">comments</td><td align="left">输出内容是否包含注释</td></tr><tr><td align="left">compact</td><td align="left">输出内容是否不添加空格，避免格式化</td></tr><tr><td align="left">concise</td><td align="left">输出内容是否减少空格使其更紧凑一些</td></tr><tr><td align="left">minified</td><td align="left">是否压缩输出代码</td></tr><tr><td align="left">retainLines</td><td align="left">尝试在输出代码中使用与源代码中相同的行号</td></tr></tbody></table><p>我们运行一段下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generate = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">&quot;var a = &#x27;Hello, world&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(code, &#123;<span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改id名为b</span></span><br><span class="line">ast.<span class="property">program</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">id</span>.<span class="property">name</span> = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="comment">// 修改变量值为Hello</span></span><br><span class="line">ast.<span class="property">program</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">init</span>.<span class="property">value</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// generate模块将AST语法树转换成JS代码</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">generate</span>(ast, &#123;<span class="attr">minified</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">code</span>)</span><br></pre></td></tr></table></figure><p>最终输出结果<code>var b=&quot;Hello&quot;;</code>，变量名和值都成功更改了，由于加了压缩处理，等号左右两边的空格也没了。</p><p>代码里 <code>&#123;minified: true&#125;</code> 演示了如何添加可选参数，这里表示压缩输出代码，<code>generate</code> 得到的 <code>result</code> 得到的是一个对象，其中的 <code>code</code> 属性才是最终的 JS 代码。</p><p>代码里 <code>ast.program.body[0].declarations[0].id.name</code> 是 a 在 AST 中的位置，<code>ast.program.body[0].declarations[0].init.value</code> 是 a的值即字符串Hello 在 AST 中的位置，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206292307216.png" alt="image-20220629175017218" title="">                </div>                <div class="image-caption">image-20220629175017218</div>            </figure><h2 id="babel-x2F-traverse"><a href="#babel-x2F-traverse" class="headerlink" title="@babel&#x2F;traverse"></a>@babel&#x2F;traverse</h2><p>当代码多了，我们不可能像前面那样挨个定位并修改，对于相同类型的节点，我们可以直接遍历所有节点来进行修改，这里就用到了 <code>@babel/traverse</code>，它通常和 <code>visitor</code> 一起使用，<code>visitor</code> 是一个对象，这个名字是可以随意取的，<code>visitor</code> 里可以定义一些方法来过滤节点，这里还是用一个例子来演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generate = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">&quot;var a = &#x27;Hello, world&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(code, &#123;<span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">Identifier</span>(path) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">name</span> = path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">StringLiteral</span>(path)&#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">value</span> = <span class="string">&quot;I Love JavaScript!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">generate</span>(ast, &#123;<span class="attr">minified</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">code</span>)</span><br></pre></td></tr></table></figure><p>输出为<code>var b=&quot;I Love JavaScript!&quot;;</code>，通过AST语法树，将变量a更名为变量b，同时将其值修改为”I Love JavaScript!”。</p><p>我们看看代码主逻辑，首先定义一个<code>visitor</code>，然后定义对应类型的处理方法，<code>traverse</code> 接收两个参数，第一个是 AST 对象，第二个是 <code>visitor</code>，当 <code>traverse</code> 遍历所有节点，遇到节点类型为 <code>StringLiteral</code> 和 <code>Identifier</code> 时，就会调用 <code>visitor</code> 中对应的处理方法。 之所以定义<code>StringLiteral</code>和<code>Identifier</code>两种类型，是因为在抽象语法树中变量a是一个标识符，其类型为<code>Identifier</code>，而a的值是一个字符串，其类型为<code>StringLiteral</code>。<code>visitor</code> 中的方法会接收一个当前节点的 <code>path</code> 对象，该对象的类型是 <code>NodePath</code>，该对象有非常多的属性，以下介绍几种最常用的：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">toString()</td><td align="left">当前路径的源码</td></tr><tr><td align="left">node</td><td align="left">当前路径的节点</td></tr><tr><td align="left">parent</td><td align="left">当前路径的父级节点</td></tr><tr><td align="left">parentPath</td><td align="left">当前路径的父级路径</td></tr><tr><td align="left">type</td><td align="left">当前路径的类型</td></tr></tbody></table><p><code>path</code> 对象除了有很多属性以外，还有很多方法，比如替换节点、删除节点、插入节点、寻找父级节点、获取同级节点、添加注释、判断节点类型等，可在需要时查询相关文档或查看源码，后续介绍 <code>@babel/types</code> 部分将会举部分例子来演示，以后的实战文章中也会有相关实例。</p><p>如果多个类型的节点，处理的方式都一样，那么还可以使用 <code>|</code> 将所有节点连接成字符串，将同一个方法应用到所有节点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="string">&quot;Identifier|StringLiteral&quot;</span>(path) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">name</span> = path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">value</span> = path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span> ? path.<span class="property">node</span>.<span class="property">value</span> : <span class="string">&quot;I Love JavaScript!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>visitor</code> 对象有多种写法，以下几种写法的效果都是一样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">Identifier</span>(path) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">name</span> = path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">StringLiteral</span>(path)&#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">value</span> = <span class="string">&quot;I Love JavaScript!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">Identifier</span>: <span class="keyword">function</span>(<span class="params">path</span>) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">name</span> = path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">StringLiteral</span>: <span class="keyword">function</span>(<span class="params">path</span>)&#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">value</span> = <span class="string">&quot;I Love JavaScript!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">Identifier</span>: &#123;</span><br><span class="line">    <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">name</span> = path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">StringLiteral</span>: &#123;</span><br><span class="line">        <span class="title function_">enter</span>(<span class="params">path</span>)&#123;</span><br><span class="line">        path.<span class="property">node</span>.<span class="property">value</span> = <span class="string">&quot;I Love JavaScript!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title function_">enter</span>(<span class="params">path</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">type</span> == <span class="string">&quot;Identifier&quot;</span>) &#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">name</span> = path.<span class="property">node</span>.<span class="property">name</span> == <span class="string">&#x27;a&#x27;</span> ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">type</span> === <span class="string">&quot;StringLiteral&quot;</span>) &#123;</span><br><span class="line">            path.<span class="property">node</span>.<span class="property">value</span> = <span class="string">&quot;I Love JavaScript!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上几种写法中有用到了 <code>enter</code> 方法，在节点的遍历过程中，进入节点（enter）与退出（exit）节点都会访问一次节点，<code>traverse</code> 默认在进入节点时进行节点的处理，如果要在退出节点时处理，那么在 <code>visitor</code> 中就必须声明 <code>exit</code> 方法。</p><h2 id="babel-x2F-types"><a href="#babel-x2F-types" class="headerlink" title="@babel&#x2F;types"></a>@babel&#x2F;types</h2><p>前面提到过，babel&#x2F;types主要2个作用，一是包含了许多节点的类型，经常用来做类型判断。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">types.<span class="title function_">stringLiteral</span>(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">// string</span></span><br><span class="line">types.<span class="title function_">numericLiteral</span>(<span class="number">100</span>); <span class="comment">// number</span></span><br><span class="line">types.<span class="title function_">booleanLiteral</span>(<span class="literal">true</span>); <span class="comment">// boolean</span></span><br><span class="line">types.<span class="title function_">nullLiteral</span>(); <span class="comment">// null</span></span><br><span class="line">types.<span class="title function_">identifier</span>(); <span class="comment">// undefined</span></span><br><span class="line">types.<span class="title function_">regExpLiteral</span>(<span class="string">&quot;\\.js?$&quot;</span>, <span class="string">&quot;g&quot;</span>); <span class="comment">// 正则</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">/\.<span class="property">js</span>?$/g</span><br></pre></td></tr></table></figure><p>另一个作用是构建新的 AST 节点。通过一个简单的例子解释下吧。比如我们有如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>想在这句常量的定义之后插入<code>let b=1;</code> 这段代码，变成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>我们在 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 中输入这2行代码，然后对照着看下代码该如何写？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206292307245.png" alt="image-20220629221958113" title="">                </div>                <div class="image-caption">image-20220629221958113</div>            </figure><p>可以看到增加了一个变量声明之后，会在body下面增加一个VariableDeclaration节点。所以我们编写visitor的时候，相应的代码也应该在VariableDeclaration下面。</p><p>我们的思路就是在遍历节点时，遍历到 <code>VariableDeclaration</code> 节点，就在其后面增加一个 <code>VariableDeclaration</code> 节点，生成  <code>VariableDeclaration</code> 节点，可以使用 <code>types.variableDeclaration()</code> 方法，在 types 中各种方法名称和我们在 AST 中看到的是一样的，只不过首字母是小写的，所以我们不需要知道所有方法的情况下，也能大致推断其方法名，只知道这个方法还不行，还得知道传入的参数是什么，可以查文档。</p><p>通过文档，可以看到variableDeclarator需要<code>kind</code> 和 <code>declarations</code> 两个参数，其中 <code>declarations</code> 是 <code>VariableDeclarator</code> 类型的节点组成的列表。kind表示声明的类型，比如const, var, let。这里顺便问下为什么declarations是一个列表呢？因为JS是支持同时声明多个变量的，比如<code>let a, b, c = 1</code>，显然，declarations有多个。</p><p>接下来我们还需要进一步定义 <code>declarator</code>，也就是 <code>VariableDeclarator</code> 类型的节点。调用的是<code>variableDeclarator</code>方法，这个方法接受2个参数，第一个是类型，我们传入<code>types.identifier(&quot;b&quot;)</code>，表示一个名为b的标识符，第二个参数是变量的初始化方式，这里我们传入<code>types.numericLiteral(1)</code>，因为我们是要给b赋值一个数值类型1。</p><p>最后我们要指明这条赋值表达式的插入位置，<code>path.insertAfter()</code> 插入节点语句后面加了一句 <code>path.stop()</code>，表示插入完成后立即停止遍历当前节点和后续的子节点，添加的新节点也是 <code>VariableDeclaration</code>，如果不加停止语句的话，就会无限循环插入下去。</p><p>完整的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generate = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">&quot;const a = &#x27;Hello&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(code, &#123;<span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">VariableDeclaration</span>(path)&#123;</span><br><span class="line">        <span class="keyword">let</span> init = types.<span class="title function_">numericLiteral</span>(<span class="number">1</span>); <span class="comment">// 变量的初始化方式</span></span><br><span class="line">        <span class="keyword">let</span> declarator = types.<span class="title function_">variableDeclarator</span>(types.<span class="title function_">identifier</span>(<span class="string">&quot;b&quot;</span>), init) <span class="comment">// 声明变量名</span></span><br><span class="line">        <span class="keyword">let</span> declaration = types.<span class="title function_">variableDeclaration</span>(<span class="string">&quot;let&quot;</span>, [declarator]); <span class="comment">// 声明类型</span></span><br><span class="line">        path.<span class="title function_">insertAfter</span>(declaration) <span class="comment">// 插入位置</span></span><br><span class="line">        path.<span class="title function_">stop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">generate</span>(ast, &#123;<span class="attr">minified</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">code</span>)</span><br></pre></td></tr></table></figure><h1 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h1><p>最后通过一个小案例来为这篇入门文章结尾吧。</p><p>我们有如下一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;\x44\x61\x74\x65&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;\u0068\u0065\u006c\u006c\u006f\u002c\u0041\u0053\u0054&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">0b10001001</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">0o123456</span>;</span><br></pre></td></tr></table></figure><p>这些数字或者字符串看起来非常不方便，所以我们需要对其进行解混淆处理，解混淆代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> generate = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> types = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">&quot;var a = &#x27;\x44\x61\x74\x65&#x27;; \</span></span><br><span class="line"><span class="string">const b = &#x27;\u0068\u0065\u006c\u006c\u006f\u002c\u0041\u0053\u0054&#x27;; \</span></span><br><span class="line"><span class="string">let c = 0b10001001; \</span></span><br><span class="line"><span class="string">let d = 0o123456;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ast = parser.<span class="title function_">parse</span>(code, &#123;<span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="title class_">NumericLiteral</span>(&#123;node&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">extra</span> &amp;&amp; <span class="regexp">/^0[obx]/i</span>.<span class="title function_">test</span>(node.<span class="property">extra</span>.<span class="property">raw</span>)) &#123;</span><br><span class="line">      node.<span class="property">extra</span> = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">StringLiteral</span>(&#123;node&#125;)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">extra</span> &amp;&amp; <span class="regexp">/\\[ux]/gi</span>.<span class="title function_">test</span>(node.<span class="property">extra</span>.<span class="property">raw</span>)) &#123;</span><br><span class="line">      node.<span class="property">extra</span> = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, visitor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">generate</span>(ast, &#123;<span class="attr">minified</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">code</span>)</span><br></pre></td></tr></table></figure><p>解混淆结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202206292307274.png" alt="image-20220629224644829" title="">                </div>                <div class="image-caption">image-20220629224644829</div>            </figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果不了解JS混淆原理以及常见的混淆手段，可以戳我以前写过的2篇文章：&lt;a href=&quot;https://lyy077.github.io/JS%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    <category term="AST反混淆" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/AST%E5%8F%8D%E6%B7%B7%E6%B7%86/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="AST" scheme="http://example.com/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——天眼查过极验滑块验证码</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%A4%A9%E7%9C%BC%E6%9F%A5%E8%BF%87%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%A4%A9%E7%9C%BC%E6%9F%A5%E8%BF%87%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81/</id>
    <published>2022-04-24T11:21:03.000Z</published>
    <updated>2023-05-23T07:17:59.324Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文是机器过极验滑块验证码系列文章的第四篇，通过一个实际网站介绍如何利用逆向分析自动过极验滑块，极验滑块系列包含乱序底图还原，验证码w参数生成，补环境，利用像素点RGB差值获取缺口位置以及通过机器学习获取缺口位置。而极验滑块系列只是验证码系列的第一个系列，后边会罗列市面上常用的验证码，然后发文一一解决。</p><p>上一篇文章见：<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E8%A1%A5%E7%8E%AF%E5%A2%83/">JS逆向案例——极验滑块验证码补环境</a></p><h3 id="模拟登录天眼查"><a href="#模拟登录天眼查" class="headerlink" title="模拟登录天眼查"></a>模拟登录天眼查</h3><h4 id="极验滑块验证码与登录接口的关系"><a href="#极验滑块验证码与登录接口的关系" class="headerlink" title="极验滑块验证码与登录接口的关系"></a>极验滑块验证码与登录接口的关系</h4><p>网址：aHR0cHM6Ly93d3cudGlhbnlhbmNoYS5jb20v</p><p>以天眼查的登录为例，在进行滑块验证时，进行抓包分析。</p><p>在极验系列第一篇 <a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E5%BA%95%E5%9B%BE%E8%BF%98%E5%8E%9F/">JS逆向案例——极验滑块验证码底图还原</a> 中，说过geetest的几个请求之间的关系，这里重新梳理一下，然后顺便梳理下geetest请求与天眼查登录接口的关系。如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204242240627.png" alt="image-20220424224028967" title="">                </div>                <div class="image-caption">image-20220424224028967</div>            </figure><p>可以看到每一次请求都是环环相扣，一共发起5次请求，下一次请求的入参或多或少都用到上一次请求的返回。</p><h4 id="第一次请求"><a href="#第一次请求" class="headerlink" title="第一次请求"></a>第一次请求</h4><p>封装一个geetest_xhtml请求，用于获取challenge和gt，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geetest_xhtml</span>():</span><br><span class="line">    cookies = &#123;</span><br><span class="line">        <span class="comment"># cookie值</span></span><br><span class="line">        <span class="string">&#x27;acw_sc__v2&#x27;</span>: <span class="string">&#x27;acw_sc__v2的值&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="comment"># header值</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    json_data = &#123;</span><br><span class="line">        <span class="string">&#x27;uuid&#x27;</span>: math.floor(time.time() * <span class="number">1000</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    response = requests.post(<span class="string">&#x27;https://www.tianyancha.com/verify/geetest.xhtml&#x27;</span>, cookies=cookies, headers=headers, json=json_data)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br></pre></td></tr></table></figure><p>cookie值里面仅仅需要一个acw_sc__v2，而acw_sc__v2的值是有时效性的，所以在实际生产中肯定也要逆向去动态生成这个cookie值，但是本文重点放在极验滑动验证码上，所以cookie直接拷贝，并没有细究cookie是如何生成的，后边有空了可以回过头了看看这个cookie是如何生成的。</p><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204250016632.png" alt="image-20220425001609069" title="">                </div>                <div class="image-caption">image-20220425001609069</div>            </figure><h4 id="第二次请求"><a href="#第二次请求" class="headerlink" title="第二次请求"></a>第二次请求</h4><p>封装一个get_type请求，入参是第一个请求返回的gt，用正则匹配get_type返回的path和type，这两个值将在下一个请求中用到，由于这里只是做一个简单的演示，所以并未考虑程序的健壮性，写的有点糙，略略略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_type</span>(<span class="params">gt</span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="comment"># header值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;gt&#x27;</span>: gt,</span><br><span class="line">        <span class="string">&#x27;callback&#x27;</span>: <span class="string">f&#x27;geetest_<span class="subst">&#123;math.floor(time.time() * <span class="number">1000</span>)&#125;</span>&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://api.geetest.com/gettype.php&#x27;</span>, params=params, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line">    path = re.findall(<span class="string">&#x27;\&quot;path\&quot;: \&quot;(.*?)\&quot;&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">    _<span class="built_in">type</span> = re.findall(<span class="string">&#x27;\&quot;type\&quot;: \&quot;(.*?)\&quot;&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> path, _<span class="built_in">type</span></span><br></pre></td></tr></table></figure><p>代码运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204250030914.png" alt="image-20220425003036734" title="">                </div>                <div class="image-caption">image-20220425003036734</div>            </figure><h4 id="第三次请求"><a href="#第三次请求" class="headerlink" title="第三次请求"></a>第三次请求</h4><p>封装一个get请求，如参是第一次请求返回的gt和challenge以及第二次请求返回的type和path，该请求返回新的challenge(实际上在之前的challenge后边拼接了2个字符串)，c，s，bg，fullbg。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_">get</span>(gt, challenge, _type, path):</span><br><span class="line">    url = f<span class="string">&quot;https://api.geetest.com/get.php?gt=&#123;gt&#125;&amp;challenge=&#123;challenge&#125;&amp;product=popup&amp;offline=false&amp;&quot;</span> \</span><br><span class="line">          f<span class="string">&quot;protocol=https://&amp;type=&#123;_type&#125;&amp;path=&#123;path&#125;&amp;callback=geetest_&#123;math.floor(time.time() * 1000)&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;authority&#x27;</span>: <span class="string">&#x27;api.geetest.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.tianyancha.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;100&quot;, &quot;Google Chrome&quot;;v=&quot;100&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;cross-site&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;GeeTestAjaxUser=feae0be0cdd2042a5e570e9d3245e949; GeeTestUser=52dc984495fafeb0d018864b96edccd9&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.<span class="title function_">get</span>(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">text</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204251119325.png" alt="image-20220425111939144" title="">                </div>                <div class="image-caption">image-20220425111939144</div>            </figure><h4 id="第四次请求"><a href="#第四次请求" class="headerlink" title="第四次请求"></a>第四次请求</h4><p>第四次请求需要滑块的轨迹，轨迹数组需要通过滑块缺口的差值来生成，要想计算滑块缺口的差值，需要还原滑块底图。</p><h5 id="滑块底图还原"><a href="#滑块底图还原" class="headerlink" title="滑块底图还原"></a>滑块底图还原</h5><p>底图还原参考文章： <a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E5%BA%95%E5%9B%BE%E8%BF%98%E5%8E%9F/">JS逆向案例——极验滑块验证码底图还原</a></p><p>核心代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">restore_pic</span>(<span class="params">pic_path, new_pic_path</span>):</span><br><span class="line">    unordered_pic = Image.<span class="built_in">open</span>(pic_path)</span><br><span class="line">    ordered_pic = unordered_pic.copy()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裁剪并拼接</span></span><br><span class="line">    <span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(div_offset):</span><br><span class="line">        im = unordered_pic.crop((math.fabs(d[<span class="string">&#x27;x&#x27;</span>]), math.fabs(d[<span class="string">&#x27;y&#x27;</span>]), math.fabs(d[<span class="string">&#x27;x&#x27;</span>]) + <span class="number">10</span>, math.fabs(d[<span class="string">&#x27;y&#x27;</span>]) + <span class="number">58</span>))</span><br><span class="line">        <span class="comment"># 上半区</span></span><br><span class="line">        <span class="keyword">if</span> d[<span class="string">&#x27;y&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">0</span>), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ordered_pic.paste(im, (<span class="number">10</span> * (i % (<span class="built_in">len</span>(div_offset) // <span class="number">2</span>)), <span class="number">58</span>), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    ordered_pic.save(new_pic_path)</span><br></pre></td></tr></table></figure><h5 id="缺口计算"><a href="#缺口计算" class="headerlink" title="缺口计算"></a>缺口计算</h5><p>缺口计算的方式基本上分2种，一种是图片处理，计算图片的每个像素点位置的色差去判断缺口；一种是通过深度学习去识别缺口位置。会专门出一篇文章计算这2种方式。这里先贴第一种方式的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">diff_rgb</span>(<span class="params">rgb1, rgb2</span>):</span><br><span class="line">    <span class="keyword">return</span> math.fabs(rgb1[<span class="number">0</span>] - rgb2[<span class="number">0</span>]) + math.fabs(rgb1[<span class="number">1</span>] - rgb2[<span class="number">1</span>]) + math.fabs(rgb1[<span class="number">2</span>] - rgb2[<span class="number">2</span>]) &gt; <span class="number">255</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_moving_dst</span>(<span class="params">complete_pic_path, incomplete_pic_path</span>):</span><br><span class="line">    complete_pic = Image.<span class="built_in">open</span>(complete_pic_path)</span><br><span class="line">    incomplete_pic = Image.<span class="built_in">open</span>(incomplete_pic_path)</span><br><span class="line"></span><br><span class="line">    w, h = complete_pic.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, w):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, h):</span><br><span class="line">            complete_pic_pixel_rgb = complete_pic.getpixel((i, j))</span><br><span class="line">            incomplete_pic_pixel_rgb = incomplete_pic.getpixel((i, j))</span><br><span class="line">            <span class="keyword">if</span> diff_rgb(complete_pic_pixel_rgb, incomplete_pic_pixel_rgb):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="生成轨迹数组"><a href="#生成轨迹数组" class="headerlink" title="生成轨迹数组"></a>生成轨迹数组</h5><p>在网上找了一些轨迹算法，效果似乎不太好。就想着搭建一个本地的轨迹库，然后在实际使用的时候根据滑动距离从本地库中去拿。</p><p>具体思路是：</p><ol><li>用Flask搭建一个轨迹收集服务</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> cross_origin</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/track&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@cross_origin(<span class="params">supports_credentials=<span class="literal">True</span>, methods=<span class="string">&quot;*&quot;</span>, allow_headers=<span class="string">&quot;*&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@cross_origin()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">track</span>():</span><br><span class="line">    tracks = pickle.load(<span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line">    d = json.loads(request.data.decode())</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载乱序的缺口图和完整图</span></span><br><span class="line">    download_image(d[<span class="string">&#x27;bg&#x27;</span>], <span class="string">&quot;bg.png&quot;</span>)</span><br><span class="line">    download_image(d[<span class="string">&#x27;fullbg&#x27;</span>], <span class="string">&quot;fullbg.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 还原乱序的缺口图和完整图</span></span><br><span class="line">    restore_pic(<span class="string">&quot;bg.png&quot;</span>, <span class="string">&quot;new_bg.png&quot;</span>)</span><br><span class="line">    restore_pic(<span class="string">&quot;fullbg.png&quot;</span>, <span class="string">&quot;new_fullbg.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取缺口的位置</span></span><br><span class="line">    x = get_moving_dst(<span class="string">&quot;new_bg.png&quot;</span>, <span class="string">&quot;new_fullbg.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tracks.get(x):</span><br><span class="line">        tracks[x].append(&#123;<span class="string">&#x27;track&#x27;</span>: d[<span class="string">&#x27;track&#x27;</span>], <span class="string">&#x27;g7z&#x27;</span>: d[<span class="string">&#x27;g7z&#x27;</span>]&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tracks[x] = [&#123;<span class="string">&#x27;track&#x27;</span>: d[<span class="string">&#x27;track&#x27;</span>], <span class="string">&#x27;g7z&#x27;</span>: d[<span class="string">&#x27;g7z&#x27;</span>]&#125;]</span><br><span class="line">    pickle.dump(tracks, <span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;wb&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">url, image_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(requests.get(url).content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    track_data = &#123;&#125;</span><br><span class="line">    pickle.dump(track_data, <span class="built_in">open</span>(<span class="string">&quot;tracks.pkl&quot;</span>, <span class="string">&quot;wb&quot;</span>))</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8088</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先手动通过滑块验证100-200次，收集起来每一次g7z(g7z为实际滑动的距离)对应的轨迹方程。</p><ol start="2"><li>使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Http</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="keyword">const</span> url=<span class="string">&#x27;http://127.0.0.1:8088/track&#x27;</span>;</span><br><span class="line"><span class="title class_">Http</span>.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, url);</span><br><span class="line"><span class="title class_">Http</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求成功, track: &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(X1z));</span><br><span class="line"><span class="comment">// 请求结束后,在此处写处理代码</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Http</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line"><span class="attr">track</span>: X1z,</span><br><span class="line">    <span class="attr">bg</span>: <span class="regexp">/\&quot;(.*?)\&quot;/g</span>.<span class="title function_">exec</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;gt_cut_bg_slice&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundImage</span>)[<span class="number">1</span>],</span><br><span class="line"><span class="attr">fullbg</span>: <span class="regexp">/\&quot;(.*?)\&quot;/g</span>.<span class="title function_">exec</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;gt_cut_fullbg_slice&quot;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">backgroundImage</span>)[<span class="number">1</span>],</span><br><span class="line">    g7z</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>在返回加密轨迹数组的之前去调用Flask服务，这样拿到的轨迹数组就是最终的轨迹数组，从而可以收集正确的轨迹数组。如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204281558130.png" alt="image-20220428155854981" title="">                </div>                <div class="image-caption">image-20220428155854981</div>            </figure><p>通过手动过滑块就可以把轨迹数组收集到tracks.pkl文件了。</p><h5 id="生成w参数"><a href="#生成w参数" class="headerlink" title="生成w参数"></a>生成w参数</h5><p>w参数逆向分析与其服务搭建参考：<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81w%E5%8F%82%E6%95%B0%E7%94%9F%E6%88%90/">JS逆向案例——极验滑块验证码w参数生成</a> 和 <a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E8%A1%A5%E7%8E%AF%E5%A2%83/">JS逆向案例——极验滑块验证码补环境</a></p><p>鉴于我们早已经搭建好了w请求服务，这里直接调用接口就好了，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_w</span>(<span class="params">gt, challenge, tracks, c, s, v</span>):</span><br><span class="line">    url = <span class="string">&quot;http://127.0.01:8081/geetest/w&quot;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;tracks&quot;</span>: json.dumps(tracks),</span><br><span class="line">        <span class="string">&quot;c&quot;</span>: json.dumps(c),</span><br><span class="line">        <span class="string">&quot;s&quot;</span>: s,</span><br><span class="line">        <span class="string">&quot;challenge&quot;</span>: challenge,</span><br><span class="line">        <span class="string">&quot;gt&quot;</span>: gt,</span><br><span class="line">        <span class="string">&quot;v&quot;</span>: v</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, json=data)</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204251531087.png" alt="image-20220425153143590" title="">                </div>                <div class="image-caption">image-20220425153143590</div>            </figure><h5 id="进行滑块的验证"><a href="#进行滑块的验证" class="headerlink" title="进行滑块的验证"></a>进行滑块的验证</h5><p>进行滑块验证的请求很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_">ajax</span>(gt, challenge, w):</span><br><span class="line">    url = f<span class="string">&#x27;https://api.geetest.com/ajax.php?gt=&#123;gt&#125;&amp;challenge=&#123;challenge&#125;&amp;w=&#123;w&#125;&amp;callback=geetest_&#123;t&#125;&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;authority&#x27;</span>: <span class="string">&#x27;api.geetest.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://www.tianyancha.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;100&quot;, &quot;Google Chrome&quot;;v=&quot;100&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;macOS&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;no-cors&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;cross-site&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.<span class="title function_">get</span>(url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">text</span></span><br></pre></td></tr></table></figure><p>就一个get请求，带上gt，challenge和w参数就行。</p><p>滑块验证的核心逻辑，主要调用前面写好的几个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">tracks</span>):</span><br><span class="line">    <span class="comment"># 获取gt, challenge</span></span><br><span class="line">    d = geetest_xhtml()</span><br><span class="line">    gt = d[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;gt&#x27;</span>]</span><br><span class="line">    challenge = d[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;challenge&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取path, type</span></span><br><span class="line">    path, _<span class="built_in">type</span> = get_type(gt)</span><br><span class="line">    m = get(gt, challenge, _<span class="built_in">type</span>, path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 下载乱序的缺口图和背景图</span></span><br><span class="line">    url = <span class="string">&quot;https://static.geetest.com/&quot;</span></span><br><span class="line">    unordered_complete_pic = urljoin(url, m[<span class="string">&#x27;fullbg&#x27;</span>])</span><br><span class="line">    unordered_incomplete_pic = urljoin(url, m[<span class="string">&#x27;bg&#x27;</span>])</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;image1.png&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(requests.get(unordered_complete_pic).content)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;image2.png&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(requests.get(unordered_incomplete_pic).content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 还原乱序图 </span></span><br><span class="line">    restore_pic(<span class="string">&quot;image1.png&quot;</span>, <span class="string">&quot;new_image1.png&quot;</span>)</span><br><span class="line">    restore_pic(<span class="string">&quot;image2.png&quot;</span>, <span class="string">&quot;new_image2.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取缺口位置</span></span><br><span class="line">    dist = get_moving_dst(<span class="string">&quot;new_image1.png&quot;</span>, <span class="string">&quot;new_image2.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从本地的tracks.pkl中读取轨迹数组</span></span><br><span class="line">    <span class="keyword">if</span> tracks.get(dist):</span><br><span class="line">        track = tracks[dist][<span class="number">0</span>][<span class="string">&#x27;track&#x27;</span>]</span><br><span class="line">        g7z = tracks[dist][<span class="number">0</span>][<span class="string">&#x27;g7z&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果未拿到轨迹数组，直接返回</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用Express服务获取w参数</span></span><br><span class="line">    w = get_w(m[<span class="string">&#x27;gt&#x27;</span>], m[<span class="string">&#x27;challenge&#x27;</span>], track, m[<span class="string">&#x27;c&#x27;</span>], m[<span class="string">&#x27;s&#x27;</span>], m[<span class="string">&#x27;version&#x27;</span>], g7z)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进行验证</span></span><br><span class="line">    validator = ajax(w[<span class="string">&#x27;gt&#x27;</span>], w[<span class="string">&#x27;challenge&#x27;</span>], w[<span class="string">&#x27;w&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(validator)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204281609390.png" alt="image-20220428160923233" title="">                </div>                <div class="image-caption">image-20220428160923233</div>            </figure><h5 id="登录天眼查"><a href="#登录天眼查" class="headerlink" title="登录天眼查"></a>登录天眼查</h5><p>别忘了我们这篇文章的最终目的是模拟登录天眼查，拿到滑块验证成功返回的validate之后，要请求天眼查的登录接口，先看下请求接口的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">mobile, password, challenge, validator</span>):</span><br><span class="line">    cookies = &#123;</span><br><span class="line">        <span class="string">&#x27;acw_sc__v2&#x27;</span>: <span class="string">&#x27;acw_sc__v2的值&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="comment"># header值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    json_data = &#123;</span><br><span class="line">        <span class="string">&#x27;mobile&#x27;</span>: mobile,</span><br><span class="line">        <span class="string">&#x27;cdpassword&#x27;</span>: password,</span><br><span class="line">        <span class="string">&#x27;loginway&#x27;</span>: <span class="string">&#x27;PL&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;autoLogin&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;challenge&#x27;</span>: challenge,</span><br><span class="line">        <span class="string">&#x27;validate&#x27;</span>: validator,</span><br><span class="line">        <span class="string">&#x27;seccode&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;validator&#125;</span>|jordan&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.post(<span class="string">&#x27;https://www.tianyancha.com/cd/login.json&#x27;</span>, cookies=cookies, headers=headers,</span><br><span class="line">                             json=json_data)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br></pre></td></tr></table></figure><p>就是一个post请求，没什么说的。</p><p>接着在主程序main方法的末尾加入调用这个login的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> validator:</span><br><span class="line">    validate = re.findall(<span class="string">&quot;\&quot;validate\&quot;: \&quot;(.*?)\&quot;&quot;</span>, validator)[<span class="number">0</span>]</span><br><span class="line">    login_res = login(<span class="string">&#x27;17777777777&#x27;</span>, <span class="string">&#x27;202cb962ac59075b964b07152d234b70&#x27;</span>, m[<span class="string">&#x27;challenge&#x27;</span>], validate)</span><br><span class="line">        <span class="keyword">return</span> login_res</span><br></pre></td></tr></table></figure><p>还是前面提到的，我们的主要目的放在极验验证上，所以这里cookie的acw_sc__v2值跟前面一样，复制下来就可，只不过这个cookie和第一个请求的cookie保持一致就行。另外，password也是一个加密的字符串，32位很符合md5码的特征，但是管它是啥呢？我们复制过来用就行。还有一点要注意的是，challenge要传get请求返回过来的，不要传第一个请求返回的。</p><p>程序运行的结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204281633498.png" alt="image-20220428163341351" title="">                </div>                <div class="image-caption">image-20220428163341351</div>            </figure><p>提示密码错误，很显然，登录接口成功了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>极验滑块的总算是成功了，暂时告一段落。我们是针对6.0.9这个版本的极验js文件进行的逆向，小版本的极验逻辑都差不多。大版本的可能区别会大一些，不过思路也差不多。极验的最新版本好像是4，后边会看看4这个大版本有什么不同。然后除了极验的滑块，还会试着看看能否搞定极验的点选与推理验证。</p><p>若需要代码，扫描加微信即可。</p><img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202305170100384.png" alt="image-20230517010053227" style="zoom:25%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验滑块验证码补环境</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E8%A1%A5%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E8%A1%A5%E7%8E%AF%E5%A2%83/</id>
    <published>2022-04-24T09:44:38.000Z</published>
    <updated>2023-05-23T07:17:33.123Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本文是机器过极验滑块验证码系列文章的第三篇，接上篇w参数抠出来之后，补环境。后边还会陆陆续续发文，如何包括利用像素点RGB差值获取缺口位置以及通过机器学习获取缺口位置，最后会通过几个采用极验验证码的网站去完整的展示整个自动化过程。而极验滑块系列只是验证码系列的第一个系列，后边会罗列市面上常用的验证码，然后发文一一解决。</p><p>上一篇文章见：<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97w%E5%8F%82%E6%95%B0%E7%94%9F%E6%88%90/">JS逆向案例——极验滑块w参数生成</a></p><h4 id="补环境过程"><a href="#补环境过程" class="headerlink" title="补环境过程"></a>补环境过程</h4><p>抠好w参数生成的代码之后，贴到VS中，先补上window和document：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="variable language_">global</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Document</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="variable language_">document</span> = <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">document</span> = <span class="variable language_">document</span>;</span><br></pre></td></tr></table></figure><p>运行之后报错，报navigator不存在</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204241808114.png" alt="image-20220424180831738" title="">                </div>                <div class="image-caption">image-20220424180831738</div>            </figure><p>补上navigator：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Navigator</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">navigator = <span class="keyword">new</span> <span class="title class_">Navigator</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">navigator</span> = navigator;</span><br></pre></td></tr></table></figure><p>补好之后接着报错，document缺少方法createElement，可以看到createElement这个方法接受一个参数，并且返回为一个object。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204241817808.png" alt="image-20220424181756529" title="">                </div>                <div class="image-caption">image-20220424181756529</div>            </figure><p>我们给document补上createElement方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Document</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">createElement</span> = <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;img&#x27;</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行下，竟然成功了。。。没想到补环境如此轻松。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204241830790.png" alt="image-20220424183013485" title="">                </div>                <div class="image-caption">image-20220424183013485</div>            </figure><h4 id="利用Express封装成一个服务"><a href="#利用Express封装成一个服务" class="headerlink" title="利用Express封装成一个服务"></a>利用Express封装成一个服务</h4><p>将gt，challenge，c，s，版本v以及轨迹数组X1z作为参数传入，返回加密后的w参数，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> md5 = crypto.<span class="title function_">createHash</span>(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">window</span> = <span class="variable language_">global</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Document</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Document</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">createElement</span> = <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;img&#x27;</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span> = <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Navigator</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">navigator = <span class="keyword">new</span> <span class="title class_">Navigator</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">document</span> = <span class="variable language_">document</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">navigator</span> = navigator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> G0b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">H1W</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">65536</span> * (<span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>()) | <span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wb = <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>();</span><br><span class="line"></span><br><span class="line">G0b.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">wb</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> wb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _v0B;</span><br><span class="line"><span class="keyword">var</span> _n0B;</span><br><span class="line"><span class="keyword">var</span> _e7B;</span><br><span class="line"><span class="keyword">var</span> _i7B;</span><br><span class="line"><span class="keyword">var</span> _p7B;</span><br><span class="line"><span class="keyword">var</span> _I0B;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">中间抠的JS代码省略</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_H7z</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> g0b = <span class="keyword">new</span> <span class="title function_">G0b</span>();</span><br><span class="line">    <span class="keyword">let</span> aaa = <span class="keyword">new</span> <span class="title function_">_v0B</span>();</span><br><span class="line">    <span class="keyword">return</span> aaa.<span class="title function_">encrypt</span>(g0b.<span class="title function_">wb</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_q7z</span>(<span class="params">X1z, c, s, gt, challenge, v</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> g0b = <span class="keyword">new</span> <span class="title function_">G0b</span>();</span><br><span class="line">    <span class="keyword">let</span> passtime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; X1z.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        passtime += X1z[index][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(_e7B.<span class="title function_">u</span>(_e7B.<span class="title function_">t</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), X1z), c, s));</span><br><span class="line">    <span class="keyword">let</span> Y7z = &#123;</span><br><span class="line">        <span class="string">&quot;aa&quot;</span>: _e7B.<span class="title function_">u</span>(_e7B.<span class="title function_">t</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), X1z), c, s),</span><br><span class="line">        <span class="string">&quot;userresponse&quot;</span>: _i7B.<span class="title function_">C</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>), challenge),</span><br><span class="line">        <span class="string">&quot;passtime&quot;</span>: passtime,</span><br><span class="line">        <span class="string">&quot;imgload&quot;</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>),</span><br><span class="line">        <span class="string">&quot;ep&quot;</span>: &#123;<span class="string">&quot;v&quot;</span>: v&#125;,      </span><br><span class="line">        <span class="string">&quot;rp&quot;</span>: <span class="title function_">_I0B</span>(gt + challenge.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">32</span>) +  passtime)         </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _n0B.<span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(Y7z), g0b.<span class="title function_">wb</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_r7z</span>(<span class="params">q7z</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _p7B.<span class="title class_">Ha</span>(q7z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/geetest/w&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>.<span class="property">tracks</span>);</span><br><span class="line">    <span class="keyword">let</span> X1z = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">body</span>.<span class="property">tracks</span>);</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">body</span>.<span class="property">c</span>);</span><br><span class="line">    <span class="keyword">let</span> s = req.<span class="property">body</span>.<span class="property">s</span>;</span><br><span class="line">    <span class="keyword">let</span> challenge = req.<span class="property">body</span>.<span class="property">challenge</span>;</span><br><span class="line">    <span class="keyword">let</span> gt = req.<span class="property">body</span>.<span class="property">gt</span>;</span><br><span class="line">    <span class="keyword">let</span> v = req.<span class="property">body</span>.<span class="property">v</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> h7z = <span class="title function_">get_H7z</span>();</span><br><span class="line">    <span class="keyword">let</span> q7z = <span class="title function_">get_q7z</span>(X1z, c, s, gt, challenge, v);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> r7z = <span class="title function_">get_r7z</span>(q7z);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> w = r7z + h7z;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        w, gt, challenge</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8081</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started, address: http://localhost:%s&quot;</span>, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204241919217.png" alt="image-20220424191932778" title="">                </div>                <div class="image-caption">image-20220424191932778</div>            </figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向案例——极验滑块验证码w参数生成</title>
    <link href="http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81w%E5%8F%82%E6%95%B0%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81w%E5%8F%82%E6%95%B0%E7%94%9F%E6%88%90/</id>
    <published>2022-04-21T07:13:39.000Z</published>
    <updated>2023-05-23T07:17:43.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 免责声明：<strong>本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！</strong></p></blockquote><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本文是机器过极验滑块验证码系列文章的第二篇，提交验证请求的w参数逆向分析。后边还会陆陆续续发文，讲解如何补环境，如何利用像素点RGB差值获取缺口位置以及通过机器学习获取缺口位置，最后会通过几个采用极验验证码的网站去完整的展示整个自动化过程。而极验滑块系列只是验证码系列的第一个系列，后边会罗列市面上常用的验证码，然后发文一一解决。</p><p>上一篇文章见：<a href="https://lyy077.github.io/JS%E9%80%86%E5%90%91%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E6%9E%81%E9%AA%8C%E6%BB%91%E5%9D%97%E9%AA%8C%E8%AF%81%E7%A0%81%E5%BA%95%E5%9B%BE%E8%BF%98%E5%8E%9F/">JS逆向案例——极验滑块验证码底图还原</a></p><h4 id="逆向分析过程"><a href="#逆向分析过程" class="headerlink" title="逆向分析过程"></a>逆向分析过程</h4><p>网址：aHR0cHM6Ly93d3cudGlhbnlhbmNoYS5jb20v</p><p>以天眼查的登录为例，提交滑块验证请求时，w参数跟值。</p><h5 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h5><p>在底图还原的那篇文章中就提到过一共有四个重要的包，其中前面三个包都没有用到w参数，只有在向服务器提交验证码验证的请求时才需要w参数，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212301379.png" alt="image-20220421230146225" title="">                </div>                <div class="image-caption">image-20220421230146225</div>            </figure><p>我们点进去ajax.php这个请求的方法调用栈：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212303683.png" alt="image-20220421230321601" title="">                </div>                <div class="image-caption">image-20220421230321601</div>            </figure><p>我们可以看到gt, challenge以及w参数生成位置，如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212305223.png" alt="image-20220421230550163" title="">                </div>                <div class="image-caption">image-20220421230550163</div>            </figure><h5 id="确定逆向目标"><a href="#确定逆向目标" class="headerlink" title="确定逆向目标"></a>确定逆向目标</h5><p>通过上边的抓包分析，可以确定的是w参数有2个变量r7z和H7z拼接而成，然后r7z是调用一个函数生成，这个函数接受一个参数q7z；H7z也是调用一个函数生成。这样逆向的目标也就确定了，就是抠出这2个函数以及参数q7z。</p><h5 id="H7z生成规则"><a href="#H7z生成规则" class="headerlink" title="H7z生成规则"></a>H7z生成规则</h5><p>H7z是由一个无参的函数V7z[M9r.C8z(92)]生成，所以先看这个函数。可以看到每次调用的结果都不同。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212317007.png" alt="image-20220421231717931" title="">                </div>                <div class="image-caption">image-20220421231717931</div>            </figure><p>可以看到这个函数采用了流程平坦化，<strong>对于流程平坦化，在调试时看下return语句返回的值，如果有多个return语句，则每个return语句都打上断点，如果只有一个return语句，看下return的那个变量，每个给这个变量赋值的语句都要打上断点</strong>，显然这里函数返回的是Y0B，则给这个变量赋值的几个地方都断上：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212319591.png" alt="image-20220421231912531" title="">                </div>                <div class="image-caption">image-20220421231912531</div>            </figure><p>我们断进来发现，只走了M9r.k9r()[18][36][24]这个分支，实例化一个v0B对象，然后调用这个对象的某一个方法，返回一串加密后的字符串。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212324263.png" alt="image-20220421232420203" title="">                </div>                <div class="image-caption">image-20220421232420203</div>            </figure><p>利用console把<code>Y0B = new v0B()[M9r.C8z(699)](g0B[M9r.C8z(818)](D0B))</code>这行代码简化为<code>Y0B = new v0B().encrypt(g0B.wb())</code>，最后D0B为undefine所以省略。</p><p>所以这里要得到Y0B就先得抠出g0b的wb方法，然后抠出v0B的encrypt方法，我们一步步来吧。</p><ol><li>g0b对象的wb方法</li></ol><p>我们点进去wb方法，可以看到虽然是流程平坦化，但是只有一个case，最后返回的是一个逗号表达式，我们只看最后一个，也就是函数真正返回的是J0B变量，而J0B变量是调用C7B函数生成的。如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212338521.png" alt="image-20220421233831380" title="">                </div>                <div class="image-caption">image-20220421233831380</div>            </figure><p>没办法，我们只有接着追进去调试C7B函数，可以看到花里胡哨的其实只是调用了四次H1W函数，然后拼接成一个字符串返回。如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212341304.png" alt="image-20220421234115235" title="">                </div>                <div class="image-caption">image-20220421234115235</div>            </figure><p>我们再扒一扒H1W函数的代码看下，将返回的那条语句反混淆之后结果为<code>(65536 * (1 + Math.random()) | 0).toString(16).substring(1)</code> 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204212348080.png" alt="image-20220421234837015" title="">                </div>                <div class="image-caption">image-20220421234837015</div>            </figure><p>到这里都是调用内置的函数了，而且算法比较简单，所以不需要进一步往下挖了。整理一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> G0b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">G0b.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">wb</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">H1W</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">65536</span> * (<span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>()) | <span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g0b = <span class="keyword">new</span> <span class="title function_">G0b</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li>v0B对象的encrypt方法</li></ol><p>接着看下v0B对象的encrypt方法。点进去看这个方法体，发现这个方法还依赖了很多其它的方法，而且依赖的这些方法都不是内置方法，如果单抠这样的一个个方法就很麻烦了，更不用想去一个个理清楚这些方法的逻辑，然后用Python去自己实现了。遇到这样的情况一般比较简单的方法是全抠整个JS，然后想办法导出所需要的方法即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204220021962.png" alt="image-20220422002133796" title="">                </div>                <div class="image-caption">image-20220422002133796</div>            </figure><p>想要导出V9B方法，就需要导出v0B对象，因为V9B方法属于v0B对象，而如何导出v0B对象呢？就要看这个对象的上一层是什么。如果遇到代码行数很多，代码层次比较多的时候推荐使用Notepad++方便去管理这种层次结构。下面介绍这个小技巧：</p><p>使用Notepad++查看JS代码层次结构小技巧：先拷贝整个文件至Notepad++，然后选择试图-&gt;折叠所有层次。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204220034063.png" alt="image-20220422003418919" title="">                </div>                <div class="image-caption">image-20220422003418919</div>            </figure><p>接着CTRL+F搜索我们要的代码，比如这里是v0B &#x3D; function()</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204220036294.png" alt="image-20220422003646204" title="">                </div>                <div class="image-caption">image-20220422003646204</div>            </figure><p>可以看到搜索结果只展开了包含我们搜索代码的那些分支，其余的依旧没有展开，这样非常方便我们观察代码的层次结构。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204220037208.png" alt="image-20220422003746128" title="">                </div>                <div class="image-caption">image-20220422003746128</div>            </figure><p>通过上图可以看到，只要加载这整个JS文件，就会执行流程平坦化中的代码，也就会得到v0B对象就会被定义，我们只需要全局定义一个变量接收v0B即可。如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204220043297.png" alt="image-20220422004359174" title="">                </div>                <div class="image-caption">image-20220422004359174</div>            </figure><p>代码改好之后，我们放到console上试验一下，成功拿到encrypt方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204220047547.png" alt="image-20220422004733474" title="">                </div>                <div class="image-caption">image-20220422004733474</div>            </figure><p>既然wb方法和encrypt方法都拿到了，那我们也就算是H7z的值。我们同样试验一下，也没问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204220050357.png" alt="image-20220422005005272" title="">                </div>                <div class="image-caption">image-20220422005005272</div>            </figure><p>H7z的值拿到了，接下来就是r7z，而r7z依赖于q7z，所以我们先看q7z。</p><h5 id="q7z生成规则"><a href="#q7z生成规则" class="headerlink" title="q7z生成规则"></a>q7z生成规则</h5><p>抠出q7z生成的代码：<code>q7z = n0B[M9r.R8z(699)](h7B[M9r.C8z(105)](Y7z), V7z[M9r.R8z(818)]())</code>，反混淆之后为：<code>q7z = n0B.encrypt(h7B.stringify(Y7z), V7z.wb())</code></p><p>encrypt，stringify，wb 🤔这几个怎么看起来那么眼熟？</p><p>V7z.wb实际上跟我们前面抠的g0b.wb一毛一样，然后h7B.stringify实际上就等同于JSON.stringify</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221229448.png" alt="image-20220422122917004" title="">                </div>                <div class="image-caption">image-20220422122917004</div>            </figure><p>n0B.encrypt则显然与前面抠的v0B.encrypt不同，这两个方法参数个数不同，返回值类型也不同。</p><p>所以要解决q7z，则需要抠出Y7z是如何生成的以及抠出n0B.encrypt。看下我们前面抠v0B的方式，是不是可以如法炮制🤨</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221241305.png" alt="image-20220422124107011" title="">                </div>                <div class="image-caption">image-20220422124107011</div>            </figure><p>运行结果如下，可以看到成功拿到了n0B.encrypt，只不过n0B.encrypt和之前的v0B.encrypt使用不一样。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221245985.png" alt="image-20220422124505892" title="">                </div>                <div class="image-caption">image-20220422124505892</div>            </figure><p>接下来就是Y7z了。我们先看下Y7z是个啥？🤓</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221250611.png" alt="image-20220422125036518" title="">                </div>                <div class="image-caption">image-20220422125036518</div>            </figure><p>随机滑动滑块几次，观察这几个参数哪些是固定的，哪些是变化的。目测除了版本号v之外，其余几个参数都不是固定的，心累😅</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221544594.png" alt="image-20220422154448445" title="">                </div>                <div class="image-caption">image-20220422154448445</div>            </figure><p>找到Y7z定义的地方，如下图，我们挨个看吧。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221558976.png" alt="image-20220422155807811" title="">                </div>                <div class="image-caption">image-20220422155807811</div>            </figure><ol><li>先看看aa是如何生成的。</li></ol><p>可以看到aa是由F7z变量赋值，我们在当前函数中找给F7z赋值的语句，并断上，如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221604649.png" alt="image-20220422160401488" title="">                </div>                <div class="image-caption">image-20220422160401488</div>            </figure><p><code>F7z = e7B[M9r.C8z(779)](V7z[M9r.R8z(602)])</code>反混淆为<code>F7z = e7B.t(V7z.b)</code>，V7z.b为一个13位的时间戳。我们跟进去这个方法：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221727047.png" alt="image-20220422172757864" title="">                </div>                <div class="image-caption">image-20220422172757864</div>            </figure><p>我们先看返回值：<code>f1z[M9r.R8z(592)](M9r.C8z(346)) + M9r.C8z(370) + B1z[M9r.R8z(592)](M9r.R8z(346)) + M9r.R8z(370) + o1z[M9r.R8z(592)](M9r.C8z(346))</code>反混淆为<code>f1z.join(&quot;&quot;) + &quot;!!&quot; B1z.join(&quot;&quot;) + &quot;!!&quot; +  o1z.join(&quot;&quot;)</code>，从这里可知，想要得到aa的值，就必须知道flz，Blz，olz的值。</p><p>我们再看看X1z：X1z是一个轨迹数组，每个元素都是一个包含三个向量的数组，分别是x坐标，y坐标，时间。经过分析知这个轨迹数组是浏览器监听鼠标事件得出来的，我们用机器去自动过验证码的时候是没办法通过这种方式得到的这个轨迹数组的，唯一的方式可能是写一种模拟拖动滑块的算法，生成这种轨迹，然后传给这个函数去计算aa的值。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221732544.png" alt="image-20220422173201445" title="">                </div>                <div class="image-caption">image-20220422173201445</div>            </figure><p>分析到这里，很显然我们要魔改这个生成aa的函数，传入一个轨迹数组，返回aa的值。由于这个函数也很复杂，所以考虑直接抠出这个函数，而不必去纠结具体的flz，Blz，olz是怎么得到的。</p><p>说干就干。操作如下，解释说明下几个标红的地方。开头定义一个全局变量_e7B用于导出生成aa的函数’\x74’，然后我们定位到’\x74’函数属于e7B对象，把这个对象赋值给_e7B，然后把X1z变量作为参数提上来，把里面的这个变量删掉。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221744356.png" alt="image-20220422174419168" title="">                </div>                <div class="image-caption">image-20220422174419168</div>            </figure><p>代码改好之后，我们测试一下，可以看到生成的aa与我们网站得到的一致。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221752482.png" alt="image-20220422175211230" title="">                </div>                <div class="image-caption">image-20220422175211230</div>            </figure><p>虽然我们拿到了aa的值，但是跟生成F7z的里面那个值有出入，那就是说定义aa的地方虽然调用了e7B.t方法生成aa，但是外面有其它地方对这个值进行了修改。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221823454.png" alt="image-20220422182356210" title="">                </div>                <div class="image-caption">image-20220422182356210</div>            </figure><p>我们在这个函数中搜索F7z，然后给所有包含F7z的赋值语句下断，一步步调试后发现修改F7z的地方如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221851258.png" alt="image-20220422185131813" title="">                </div>                <div class="image-caption">image-20220422185131813</div>            </figure><p>我们抠出来这条语句，然后反混淆为：<code>e7B.u(F7z, V7z.d.c, V7z.d.s)</code>，我们看下V7z.d.c和V7z.d.s：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221855613.png" alt="image-20220422185546434" title="">                </div>                <div class="image-caption">image-20220422185546434</div>            </figure><p>看着又有点似曾相识，emm，没错分别对应get.php返回的c和s：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221856167.png" alt="image-20220422185646048" title="">                </div>                <div class="image-caption">image-20220422185646048</div>            </figure><p>然后我们得抠下e7B.u这个方法，意外的发现，其实这个方法包含的对象前面抠过来，既然对象已经抠了，这个方法自然就有了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221859968.png" alt="image-20220422185947808" title="">                </div>                <div class="image-caption">image-20220422185947808</div>            </figure><p>验证一下，结果没毛病：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204221904380.png" alt="image-20220422190458150" title="">                </div>                <div class="image-caption">image-20220422190458150</div>            </figure><ol start="2"><li>再看看userresponse如何生成的</li></ol><p>抠出生成userresponse的代码，然后反混淆为：<code>i7B.C(g7z, V7z.d.challenge)</code>，g7z是拖拽鼠标滑动滑块的距离，可以通过轨迹数组计算出这个滑动的距离。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; X1z.<span class="property">length</span>; index++) &#123;</span><br><span class="line">passtime += X1z[index][<span class="number">2</span>];</span><br><span class="line">g7z += X1z[index][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">g7z -= X1z[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>V7z.d.challenge是get.php返回的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204222101497.png" alt="image-20220422210127144" title="">                </div>                <div class="image-caption">image-20220422210127144</div>            </figure><p>i7B.C这个函数的话，按照上边介绍的方法，先抠出i7B对象，自然就可以拿到C方法了。</p><ol start="3"><li>passtime的计算</li></ol><p>目测passtime是轨迹数组的每个向量的时间累积：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204222113188.png" alt="image-20220422211356975" title="">                </div>                <div class="image-caption">image-20220422211356975</div>            </figure><p>计算代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> passtime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; X1z.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    passtime += X1z[index][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>imgload生成</li></ol><p>imgload表示当前页面加载的图片数，这里我们用random随机一个值。</p><ol start="5"><li>rp的计算</li></ol><p>rp计算的代码为：<code>I0B(V7z[M9r.R8z(190)][M9r.R8z(189)] + V7z[M9r.C8z(190)][M9r.C8z(425)][M9r.R8z(504)](0, 32) + Y7z[M9r.C8z(193)])</code>反混淆之后为：<code>I0B(gt + challenge.slice(0, 32) +  passtime)</code>，gt，challenge，passtime都已经算出，抠出I0B方法即可，如何抠？参照上面的方式。</p><h5 id="r7z生成规则"><a href="#r7z生成规则" class="headerlink" title="r7z生成规则"></a>r7z生成规则</h5><p>有了q7z，r7z自然就很简单了。因为前面说过<code>r7z = p7B.Ha(q7z)</code>，只需要抠出p7B即可，过程同理。</p><h5 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h5><p>按照上面的抠出相应的方法后，然后编写生成w参数的代码，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> G0b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">H1W</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">65536</span> * (<span class="number">1</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>()) | <span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wb = <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>() + <span class="title function_">H1W</span>();</span><br><span class="line"></span><br><span class="line">G0b.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">wb</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> wb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _v0B;</span><br><span class="line"><span class="keyword">var</span> _n0B;</span><br><span class="line"><span class="keyword">var</span> _e7B;</span><br><span class="line"><span class="keyword">var</span> _i7B;</span><br><span class="line"><span class="keyword">var</span> _p7B;</span><br><span class="line"><span class="keyword">var</span> _I0B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抠出对应的object </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_H7z</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> g0b = <span class="keyword">new</span> <span class="title function_">G0b</span>();</span><br><span class="line">    <span class="keyword">let</span> aaa = <span class="keyword">new</span> <span class="title function_">_v0B</span>();</span><br><span class="line">    <span class="keyword">return</span> aaa.<span class="title function_">encrypt</span>(g0b.<span class="title function_">wb</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_q7z</span>(<span class="params">X1z, c, s, gt, challenge</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> g0b = <span class="keyword">new</span> <span class="title function_">G0b</span>();</span><br><span class="line">    <span class="keyword">let</span> passtime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; X1z.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        passtime += X1z[index][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(_e7B.<span class="title function_">u</span>(_e7B.<span class="title function_">t</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), X1z), c, s));</span><br><span class="line">    <span class="keyword">let</span> Y7z = &#123;</span><br><span class="line">        <span class="string">&quot;aa&quot;</span>: _e7B.<span class="title function_">u</span>(_e7B.<span class="title function_">t</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), X1z), c, s),</span><br><span class="line">        <span class="string">&quot;userresponse&quot;</span>: _i7B.<span class="title function_">C</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>), challenge),</span><br><span class="line">        <span class="string">&quot;passtime&quot;</span>: passtime,</span><br><span class="line">        <span class="string">&quot;imgload&quot;</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">200</span>),</span><br><span class="line">        <span class="string">&quot;ep&quot;</span>: &#123;<span class="string">&quot;v&quot;</span>: <span class="string">&quot;6.0.9&quot;</span>&#125;,               </span><br><span class="line">        <span class="string">&quot;rp&quot;</span>: <span class="title function_">_I0B</span>(gt + challenge.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">32</span>) +  passtime)         </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _n0B.<span class="title function_">encrypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(Y7z), g0b.<span class="title function_">wb</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_r7z</span>(<span class="params">q7z</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _p7B.<span class="title class_">Ha</span>(q7z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> X1z = [[<span class="number">21</span>,<span class="number">30</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">22</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">3</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">3</span>,<span class="number">0</span>,<span class="number">16</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">3</span>,<span class="number">0</span>,<span class="number">16</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">3</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">16</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">33</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">16</span>],[<span class="number">2</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">16</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">17</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">50</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">67</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">18383</span>]];</span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">12</span>, <span class="number">58</span>, <span class="number">98</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">95</span>, <span class="number">62</span>, <span class="number">15</span>, <span class="number">12</span>];</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;424f4e78&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> challenge = <span class="string">&quot;bb56791bfda35fac04bd7f7b14a5c8654r&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> gt = <span class="string">&quot;f5c10f395211c77e386566112c6abf21&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h7z = <span class="title function_">get_H7z</span>();</span><br><span class="line"><span class="keyword">var</span> q7z = <span class="title function_">get_q7z</span>(X1z, c, s, gt, challenge);</span><br><span class="line"><span class="keyword">var</span> r7z = <span class="title function_">get_r7z</span>(q7z);</span><br><span class="line"><span class="keyword">var</span> w = r7z + h7z;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w);</span><br></pre></td></tr></table></figure><h5 id="查找bug"><a href="#查找bug" class="headerlink" title="查找bug"></a>查找bug</h5><p>从开始逆向极验滑块，到完整的抠出w的算法只花了一天时间，本来一切顺风顺水，本来以为so easy，但是去用抠出来的w参数去发起ajax.php请求时，一直不成功。然后就是各种查找bug，查找bug花了我四天时间…期间各种猜想都尝试过了，感觉当时想着要不算了。但是想着自己前后花了快一个星期的时间，不能轻易言弃。这里列举主要的几个问题。</p><ol><li>w参数的h7z和r7z两部分的关联性</li></ol><p>前面说过，w参数是由2部分组成h7z和r7z。两部分看起来没有关联，其实这里有一个坑，这俩是有关联的。我们再理一下思路：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h7z = <span class="variable constant_">V0B</span>.<span class="title function_">encrypt</span>(g0b.<span class="title function_">wb</span>())</span><br><span class="line">q7z = n0B.<span class="title function_">encypt</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(Y7z), g0b.<span class="title function_">wb</span>())</span><br><span class="line">r7z = p7B.<span class="title class_">Ha</span>(q7z)</span><br></pre></td></tr></table></figure><p>h7z和r7z的生成这俩都用到了一个随机字符串wb，但是这两个随机字符串必须一致!!!，就是说后端会解密h7z和r7z然后比较这两个随机字符串是否一致，如果不一致就会不通过。我前期就是在生成h7z和r7z的地方调用了2次wb，导致验证一直不通过。正确的做法调用一次wb，并用一个全局变量保存，然后生成h7z和r7z的地方直接去拿这个全局变量即可。</p><ol start="2"><li>同名的对象</li></ol><p>另外导致一直通过的另外一部分原因是同名的对象有一些，再抠对象的时候一定要仔细，千万不能抠错。</p><ol start="3"><li>aa轨迹的确定</li></ol><p>跟某一个参数的值的时候，除了要在变量声明的地方分析变量值是如何变化的，还要注意在其它地方，尤其是逗号表达式的地方也隐藏着值的变化。比如：<code>j1r = (F7z = e7B[M9r.R8z(544)](F7z, V7z[M9r.R8z(190)][M9r.C8z(540)], V7z[M9r.R8z(190)][M9r.R8z(6)])</code>表面上是变量j1r的赋值，隐藏着变量F7z的值的变化。</p><p>这里介绍一些查找bug的技巧：</p><p>这里的w跟值包含2部分，r7z和h7z。可以先定位是h7z还是r7z的问题，定位到是哪半区的问题后，然后根据实际网站运行的结果和你自己编写的代码运行的结果一步步调试，2者结果为什么不一致，具体分析原因。</p><p>也可以利用浏览器的override功能或者hook尽可能的多输出一些变量的值，对比自己程序运行的结果和网站输出的值，看是哪一步出现问题。我们在调bug的时候就利用了override替换js文件输出了很多日志，如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/lyy077/blg-pic/main/pic/202204281459340.png" alt="image-20220428145928176" title="">                </div>                <div class="image-caption">image-20220428145928176</div>            </figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 免责声明：&lt;strong&gt;本文章中所有内容仅供学习交流，抓包内容、敏感网址、数据接口均已做脱敏处理，严禁用于商业用途和非法用途，否则由此产生的一切后果均与作者无关，若有侵权，请联系我立即删除！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="JS逆向" scheme="http://example.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="验证码" scheme="http://example.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
    <category term="极验" scheme="http://example.com/tags/%E6%9E%81%E9%AA%8C/"/>
    
  </entry>
  
</feed>
